
subFresh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800a110  0800a110  0000b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9f4  0800a9f4  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9f4  0800a9f4  0000b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9fc  0800a9fc  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9fc  0800a9fc  0000b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa00  0800aa00  0000ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800aa04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e0  0800abe4  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800abe4  0000c5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001575d  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e4  00000000  00000000  0002196d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105c  00000000  00000000  000256c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226af  00000000  00000000  00026724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd4  00000000  00000000  00048dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0fec  00000000  00000000  0005faa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006844  00000000  00000000  00130ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0013731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0f4 	.word	0x0800a0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a0f4 	.word	0x0800a0f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <pwm_val_increase>:
	__HAL_TIM_SET_COMPARE(&htim2, channel, MIN_PWM_VAL);
	HAL_Delay(5000);
	printf("thruster initialized \r\n");
}

void pwm_val_increase(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET < MAX_PWM_VAL){
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <pwm_val_increase+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da04      	bge.n	8000eee <pwm_val_increase+0x1a>
		PWM_VAL_SET++;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000eec:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val increased to %d \r\n", PWM_VAL_SET);
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <pwm_val_increase+0x34>)
 8000ef6:	f007 f921 	bl	800813c <iprintf>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004
 8000f08:	0800a128 	.word	0x0800a128

08000f0c <pwm_val_decrease>:

void pwm_val_decrease(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET > MIN_PWM_VAL){
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <pwm_val_decrease+0x30>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dd04      	ble.n	8000f26 <pwm_val_decrease+0x1a>
		PWM_VAL_SET--;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f24:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val decreased to %d \r\n", PWM_VAL_SET);
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <pwm_val_decrease+0x34>)
 8000f2e:	f007 f905 	bl	800813c <iprintf>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	0800a144 	.word	0x0800a144

08000f44 <init_thruster>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PWM_VAL);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	HAL_Delay(5000);
}

void init_thruster(int thruster) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	//uint32_t channel;
	//int PWM_Val;
	if(thruster){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <init_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <init_thruster+0x34>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <init_thruster+0x38>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5c:	e004      	b.n	8000f68 <init_thruster+0x24>
		//channel = TIM_CHANNEL_3; //right thruster
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <init_thruster+0x34>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <init_thruster+0x3c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
		//channel = TIM_CHANNEL_2; //left thruster
	}
	HAL_Delay(5000);
 8000f68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6c:	f001 fc74 	bl	8002858 <HAL_Delay>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000248 	.word	0x20000248
 8000f80:	200001fc 	.word	0x200001fc

08000f84 <set_thruster>:

void set_thruster(int thruster) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(thruster){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <set_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_VAL_SET);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <set_thruster+0x30>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <set_thruster+0x34>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
	}
	return;
 8000f9c:	e005      	b.n	8000faa <set_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <set_thruster+0x30>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <set_thruster+0x38>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 8000fa8:	bf00      	nop
}
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	200001fc 	.word	0x200001fc

08000fc0 <stop_thruster>:
		HAL_Delay(1000);
	}
}


void stop_thruster(int thruster) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if(thruster){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <stop_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <stop_thruster+0x30>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <stop_thruster+0x34>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	}
	return;
 8000fd8:	e005      	b.n	8000fe6 <stop_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <stop_thruster+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <stop_thruster+0x38>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 8000fe4:	bf00      	nop
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000248 	.word	0x20000248
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <goUp>:
 *  Created on: Mar 21, 2025
 *      Author: elainamn
 */


void goUp() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOX, GPIO_PIN_XX,  pin_state);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f002 fd15 	bl	8003a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f002 fd0e 	bl	8003a38 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <goDown>:

void goDown() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f002 fd03 	bl	8003a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f002 fcfc 	bl	8003a38 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <stop>:

void stop() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f002 fcf1 	bl	8003a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f002 fcea 	bl	8003a38 <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_CAN_RxFifo0MsgPendingCallback>:
int datacheck;

uint8_t sensorPacket[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001074:	2100      	movs	r1, #0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f001 feeb 	bl	8002e52 <HAL_CAN_GetRxMessage>
	//printf("triggered\n");

	if(RxHeader.StdId == 0x128)
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8001084:	d102      	bne.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		//printf("match\n");
		datacheck = 1;
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000318 	.word	0x20000318
 8001098:	200002d4 	.word	0x200002d4
 800109c:	2000032c 	.word	0x2000032c

080010a0 <can_setup>:

void can_setup(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	 canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <can_setup+0x94>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	621a      	str	r2, [r3, #32]
	 canfilterconfig.FilterBank = 5;  // which filter bank to use from the assigned ones
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <can_setup+0x94>)
 80010ae:	2205      	movs	r2, #5
 80010b0:	615a      	str	r2, [r3, #20]
	 canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <can_setup+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
	 canfilterconfig.FilterIdHigh = 0x128<<5;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <can_setup+0x94>)
 80010ba:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 80010be:	601a      	str	r2, [r3, #0]
	 canfilterconfig.FilterIdLow = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <can_setup+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
	 canfilterconfig.FilterMaskIdHigh = 0x128<<5;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <can_setup+0x94>)
 80010c8:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 80010cc:	609a      	str	r2, [r3, #8]
	 canfilterconfig.FilterMaskIdLow = 0x0000;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <can_setup+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
	 canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <can_setup+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
	 canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <can_setup+0x94>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
	 canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <can_setup+0x94>)
 80010e2:	220a      	movs	r2, #10
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24


	 HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80010e6:	4913      	ldr	r1, [pc, #76]	@ (8001134 <can_setup+0x94>)
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <can_setup+0x98>)
 80010ea:	f001 fcd4 	bl	8002a96 <HAL_CAN_ConfigFilter>


	 //using standard ID (don't need extended)
	 TxHeader.IDE = CAN_ID_STD;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <can_setup+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]

	 //ID of transmitter
	 TxHeader.StdId = 0x256;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <can_setup+0x9c>)
 80010f6:	f240 2256 	movw	r2, #598	@ 0x256
 80010fa:	601a      	str	r2, [r3, #0]

	 //Set it to send a data frame
	 TxHeader.RTR = CAN_RTR_DATA;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <can_setup+0x9c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]

	 //length of message
	 TxHeader.DLC = 8;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <can_setup+0x9c>)
 8001104:	2208      	movs	r2, #8
 8001106:	611a      	str	r2, [r3, #16]

	 TxData[0] = 0x69;
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <can_setup+0xa0>)
 800110a:	2269      	movs	r2, #105	@ 0x69
 800110c:	701a      	strb	r2, [r3, #0]

	HAL_CAN_Start(&hcan1);
 800110e:	480a      	ldr	r0, [pc, #40]	@ (8001138 <can_setup+0x98>)
 8001110:	f001 fd8b 	bl	8002c2a <HAL_CAN_Start>

	HAL_StatusTypeDef activate_return = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001114:	2102      	movs	r1, #2
 8001116:	4808      	ldr	r0, [pc, #32]	@ (8001138 <can_setup+0x98>)
 8001118:	f001 ffbd 	bl	8003096 <HAL_CAN_ActivateNotification>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]

	printf("notification output: %d\n", activate_return);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <can_setup+0xa4>)
 8001126:	f007 f809 	bl	800813c <iprintf>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002f0 	.word	0x200002f0
 8001138:	20000294 	.word	0x20000294
 800113c:	200002bc 	.word	0x200002bc
 8001140:	20000320 	.word	0x20000320
 8001144:	0800a170 	.word	0x0800a170

08001148 <read_control_from_CAN>:

uint8_t read_control_from_CAN(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	//  printf("reading = %d\r\n", RxHeader.StdId);
	  static uint8_t control = 0;
	  if(datacheck)
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <read_control_from_CAN+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <read_control_from_CAN+0x1a>
	  {
		  control = RxData[0];
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <read_control_from_CAN+0x2c>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <read_control_from_CAN+0x30>)
 800115a:	701a      	strb	r2, [r3, #0]
		  datacheck = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <read_control_from_CAN+0x28>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	  }
	  //printf("controller command is  = %d\r\n", control);
	  return control;
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <read_control_from_CAN+0x30>)
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	2000032c 	.word	0x2000032c
 8001174:	20000318 	.word	0x20000318
 8001178:	2000046a 	.word	0x2000046a

0800117c <transmit_sensor_packet>:

void transmit_sensor_packet(uint16_t gyroReading, uint32_t presTempReading, uint16_t flowReading){
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	4613      	mov	r3, r2
 800118a:	80bb      	strh	r3, [r7, #4]
	// Gyro
	uint8_t gyroMSB, gyroLSB;
	gyroMSB = (gyroReading >> 8) & 0xFF;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	75fb      	strb	r3, [r7, #23]
	gyroLSB = gyroReading & 0xFF;
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	75bb      	strb	r3, [r7, #22]

	printf("gyro reading is  = %d\r\n", gyroReading);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	4619      	mov	r1, r3
 800119c:	4825      	ldr	r0, [pc, #148]	@ (8001234 <transmit_sensor_packet+0xb8>)
 800119e:	f006 ffcd 	bl	800813c <iprintf>
	printf("pulse reading is  = %d\r\n", flowReading);
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4824      	ldr	r0, [pc, #144]	@ (8001238 <transmit_sensor_packet+0xbc>)
 80011a8:	f006 ffc8 	bl	800813c <iprintf>

	TxData[0] = gyroMSB;
 80011ac:	4a23      	ldr	r2, [pc, #140]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	7013      	strb	r3, [r2, #0]
	TxData[1] = gyroLSB;
 80011b2:	4a22      	ldr	r2, [pc, #136]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	7053      	strb	r3, [r2, #1]

	// Pressure sensor
	uint16_t pres, temp;
	pres = (presTempReading >> 16) & 0xFFFF;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	82bb      	strh	r3, [r7, #20]
	temp = presTempReading & 0xFFFF;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	827b      	strh	r3, [r7, #18]

	uint8_t presLSB, presMSB, tempLSB, tempMSB;
	presMSB = (pres >> 8) & 0xFF;
 80011c2:	8abb      	ldrh	r3, [r7, #20]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	747b      	strb	r3, [r7, #17]
	presLSB = pres & 0xFF;
 80011ca:	8abb      	ldrh	r3, [r7, #20]
 80011cc:	743b      	strb	r3, [r7, #16]
	tempMSB = (temp >> 8) & 0xFF;
 80011ce:	8a7b      	ldrh	r3, [r7, #18]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	73fb      	strb	r3, [r7, #15]
	tempLSB = temp & 0xFF;
 80011d6:	8a7b      	ldrh	r3, [r7, #18]
 80011d8:	73bb      	strb	r3, [r7, #14]

	TxData[2] = presMSB;
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011dc:	7c7b      	ldrb	r3, [r7, #17]
 80011de:	7093      	strb	r3, [r2, #2]
	TxData[3] = presLSB;
 80011e0:	4a16      	ldr	r2, [pc, #88]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011e2:	7c3b      	ldrb	r3, [r7, #16]
 80011e4:	70d3      	strb	r3, [r2, #3]
	TxData[4] = tempMSB;
 80011e6:	4a15      	ldr	r2, [pc, #84]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	7113      	strb	r3, [r2, #4]
	TxData[5] = tempLSB;
 80011ec:	4a13      	ldr	r2, [pc, #76]	@ (800123c <transmit_sensor_packet+0xc0>)
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	7153      	strb	r3, [r2, #5]

	// Flow sensor
	uint8_t flowMSB, flowLSB;

	flowMSB = (flowReading >> 8) & 0xFF;
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	737b      	strb	r3, [r7, #13]
	flowLSB = flowReading & 0xFF;
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	733b      	strb	r3, [r7, #12]

	TxData[6] = flowMSB;
 80011fe:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <transmit_sensor_packet+0xc0>)
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	7193      	strb	r3, [r2, #6]
	TxData[7] = flowLSB;
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <transmit_sensor_packet+0xc0>)
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	71d3      	strb	r3, [r2, #7]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <transmit_sensor_packet+0xc4>)
 800120c:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <transmit_sensor_packet+0xc0>)
 800120e:	490d      	ldr	r1, [pc, #52]	@ (8001244 <transmit_sensor_packet+0xc8>)
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <transmit_sensor_packet+0xcc>)
 8001212:	f001 fd4e 	bl	8002cb2 <HAL_CAN_AddTxMessage>
	printf("HAL CAN Transmit Result: %d\r\n", HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox));
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <transmit_sensor_packet+0xc4>)
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <transmit_sensor_packet+0xc0>)
 800121a:	490a      	ldr	r1, [pc, #40]	@ (8001244 <transmit_sensor_packet+0xc8>)
 800121c:	480a      	ldr	r0, [pc, #40]	@ (8001248 <transmit_sensor_packet+0xcc>)
 800121e:	f001 fd48 	bl	8002cb2 <HAL_CAN_AddTxMessage>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	4809      	ldr	r0, [pc, #36]	@ (800124c <transmit_sensor_packet+0xd0>)
 8001228:	f006 ff88 	bl	800813c <iprintf>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0800a18c 	.word	0x0800a18c
 8001238:	0800a1a4 	.word	0x0800a1a4
 800123c:	20000320 	.word	0x20000320
 8001240:	20000328 	.word	0x20000328
 8001244:	200002bc 	.word	0x200002bc
 8001248:	20000294 	.word	0x20000294
 800124c:	0800a1c0 	.word	0x0800a1c0

08001250 <controlThrusterStateCAN>:

void controlThrusterStateCAN(uint8_t controllerCommand){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	// turn right
	if(controllerCommand & 0b1){
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <controlThrusterStateCAN+0x28>
			printf("turn right (activate left thruster) \r\n");
 8001264:	481a      	ldr	r0, [pc, #104]	@ (80012d0 <controlThrusterStateCAN+0x80>)
 8001266:	f006 ffd1 	bl	800820c <puts>
			set_thruster(0);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fe8a 	bl	8000f84 <set_thruster>
			stop_thruster(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fea5 	bl	8000fc0 <stop_thruster>
	else {
		stop_thruster(0);
		stop_thruster(1);
	}

}
 8001276:	e027      	b.n	80012c8 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 1) & 0b1){
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <controlThrusterStateCAN+0x4a>
		printf("turn right (activate right thruster) \r\n");
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <controlThrusterStateCAN+0x84>)
 8001288:	f006 ffc0 	bl	800820c <puts>
		set_thruster(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fe79 	bl	8000f84 <set_thruster>
		stop_thruster(0);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe94 	bl	8000fc0 <stop_thruster>
}
 8001298:	e016      	b.n	80012c8 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 3) & 0b1){
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <controlThrusterStateCAN+0x6c>
		printf("forwards \r\n");
 80012a8:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <controlThrusterStateCAN+0x88>)
 80012aa:	f006 ffaf 	bl	800820c <puts>
		set_thruster(0);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fe68 	bl	8000f84 <set_thruster>
		set_thruster(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fe65 	bl	8000f84 <set_thruster>
}
 80012ba:	e005      	b.n	80012c8 <controlThrusterStateCAN+0x78>
		stop_thruster(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fe7f 	bl	8000fc0 <stop_thruster>
		stop_thruster(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fe7c 	bl	8000fc0 <stop_thruster>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800a1e0 	.word	0x0800a1e0
 80012d4:	0800a208 	.word	0x0800a208
 80012d8:	0800a230 	.word	0x0800a230

080012dc <controlThrusterSpeedCAN>:

void controlThrusterSpeedCAN(uint8_t controllerCommand) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	// decrease speed
	if(((controllerCommand >> 5) & 0b1) && !((controllerCommand >> 4) & 0b1)){
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <controlThrusterSpeedCAN+0x2c>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <controlThrusterSpeedCAN+0x2c>
		pwm_val_decrease();
 8001302:	f7ff fe03 	bl	8000f0c <pwm_val_decrease>
	}
	// increase speed
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
		pwm_val_increase();
	}
}
 8001306:	e00f      	b.n	8001328 <controlThrusterSpeedCAN+0x4c>
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <controlThrusterSpeedCAN+0x4c>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <controlThrusterSpeedCAN+0x4c>
		pwm_val_increase();
 8001324:	f7ff fdd6 	bl	8000ed4 <pwm_val_increase>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <controlLinearActuatorCAN>:


void controlLinearActuatorCAN(uint8_t controllerCommand) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	// decrease speed
		if((controllerCommand >> 7) & 0b1 && !((controllerCommand >> 6) & 0b1)){//up
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	09db      	lsrs	r3, r3, #7
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <controlLinearActuatorCAN+0x30>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	099b      	lsrs	r3, r3, #6
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d104      	bne.n	8001360 <controlLinearActuatorCAN+0x30>
			printf("syringe up\r\n");
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <controlLinearActuatorCAN+0x7c>)
 8001358:	f006 ff58 	bl	800820c <puts>
			goUp();
 800135c:	f7ff fe4e 	bl	8000ffc <goUp>
		 }
		 if(!((controllerCommand >> 7) & 0b1) && (controllerCommand >> 6) & 0b1){//down
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	09db      	lsrs	r3, r3, #7
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10b      	bne.n	8001386 <controlLinearActuatorCAN+0x56>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <controlLinearActuatorCAN+0x56>
			 printf("syringe down\r\n");
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <controlLinearActuatorCAN+0x80>)
 800137e:	f006 ff45 	bl	800820c <puts>
			 goDown();
 8001382:	f7ff fe4d 	bl	8001020 <goDown>
		 }
		 if(!((controllerCommand >> 7) & 0b1) && !((controllerCommand >> 6)) & 0b1){//down
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	09db      	lsrs	r3, r3, #7
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <controlLinearActuatorCAN+0x72>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <controlLinearActuatorCAN+0x72>
			 stop();
 800139e:	f7ff fe51 	bl	8001044 <stop>
		 }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800a23c 	.word	0x0800a23c
 80013b0:	0800a248 	.word	0x0800a248

080013b4 <diagnose_gyro>:
#define HEADING_ADDR 0x1A

extern I2C_HandleTypeDef hi2c1;


void diagnose_gyro(HAL_StatusTypeDef ret, char* message) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d053      	beq.n	800146e <diagnose_gyro+0xba>
		printf(message);
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f006 feb8 	bl	800813c <iprintf>
		printf("\r\n");
 80013cc:	482a      	ldr	r0, [pc, #168]	@ (8001478 <diagnose_gyro+0xc4>)
 80013ce:	f006 ff1d 	bl	800820c <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c1);
 80013d2:	482a      	ldr	r0, [pc, #168]	@ (800147c <diagnose_gyro+0xc8>)
 80013d4:	f002 fe0a 	bl	8003fec <HAL_I2C_GetError>
 80013d8:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <diagnose_gyro+0x34>
			 printf("No Error\r\n");
 80013e0:	4827      	ldr	r0, [pc, #156]	@ (8001480 <diagnose_gyro+0xcc>)
 80013e2:	f006 ff13 	bl	800820c <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 80013e6:	e042      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <diagnose_gyro+0x46>
			 printf("Bus Error\r\n");
 80013f2:	4824      	ldr	r0, [pc, #144]	@ (8001484 <diagnose_gyro+0xd0>)
 80013f4:	f006 ff0a 	bl	800820c <puts>
}
 80013f8:	e039      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <diagnose_gyro+0x58>
			 printf("Arbitration Lost Error\r\n");
 8001404:	4820      	ldr	r0, [pc, #128]	@ (8001488 <diagnose_gyro+0xd4>)
 8001406:	f006 ff01 	bl	800820c <puts>
}
 800140a:	e030      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <diagnose_gyro+0x6a>
			 printf("Acknowledge Failure Error\r\n");
 8001416:	481d      	ldr	r0, [pc, #116]	@ (800148c <diagnose_gyro+0xd8>)
 8001418:	f006 fef8 	bl	800820c <puts>
}
 800141c:	e027      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <diagnose_gyro+0x7c>
			 printf("Overrun/Underrun Error\r\n");
 8001428:	4819      	ldr	r0, [pc, #100]	@ (8001490 <diagnose_gyro+0xdc>)
 800142a:	f006 feef 	bl	800820c <puts>
}
 800142e:	e01e      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <diagnose_gyro+0x8e>
			 printf("DMA Transfer Error\r\n");
 800143a:	4816      	ldr	r0, [pc, #88]	@ (8001494 <diagnose_gyro+0xe0>)
 800143c:	f006 fee6 	bl	800820c <puts>
}
 8001440:	e015      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <diagnose_gyro+0xa0>
			 printf("Timeout Error\r\n");
 800144c:	4812      	ldr	r0, [pc, #72]	@ (8001498 <diagnose_gyro+0xe4>)
 800144e:	f006 fedd 	bl	800820c <puts>
}
 8001452:	e00c      	b.n	800146e <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <diagnose_gyro+0xb2>
			 printf("Size Management Error\r\n");
 800145e:	480f      	ldr	r0, [pc, #60]	@ (800149c <diagnose_gyro+0xe8>)
 8001460:	f006 fed4 	bl	800820c <puts>
}
 8001464:	e003      	b.n	800146e <diagnose_gyro+0xba>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <diagnose_gyro+0xec>)
 800146a:	f006 fe67 	bl	800813c <iprintf>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800a258 	.word	0x0800a258
 800147c:	20000340 	.word	0x20000340
 8001480:	0800a25c 	.word	0x0800a25c
 8001484:	0800a268 	.word	0x0800a268
 8001488:	0800a274 	.word	0x0800a274
 800148c:	0800a28c 	.word	0x0800a28c
 8001490:	0800a2a8 	.word	0x0800a2a8
 8001494:	0800a2c0 	.word	0x0800a2c0
 8001498:	0800a2d4 	.word	0x0800a2d4
 800149c:	0800a2e4 	.word	0x0800a2e4
 80014a0:	0800a2fc 	.word	0x0800a2fc

080014a4 <gyro_init>:

void gyro_init() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;

	printf("\r\n\r\n-------GYRO INIT-------\r\n");
 80014aa:	4817      	ldr	r0, [pc, #92]	@ (8001508 <gyro_init+0x64>)
 80014ac:	f006 feae 	bl	800820c <puts>


	// set operating mode ---------------------------------------
	buf[0] = OPR_MODE_ADDR;
 80014b0:	233d      	movs	r3, #61	@ 0x3d
 80014b2:	713b      	strb	r3, [r7, #4]
	buf[1] = IMU_FUSION_MODE;
 80014b4:	2308      	movs	r3, #8
 80014b6:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 80014b8:	1d3a      	adds	r2, r7, #4
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2302      	movs	r3, #2
 80014c2:	2150      	movs	r1, #80	@ 0x50
 80014c4:	4811      	ldr	r0, [pc, #68]	@ (800150c <gyro_init+0x68>)
 80014c6:	f002 fb83 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	diagnose_gyro(ret, "error setting op mode");
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	490f      	ldr	r1, [pc, #60]	@ (8001510 <gyro_init+0x6c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff6e 	bl	80013b4 <diagnose_gyro>

	// set unit  ---------------------------------------
	buf[0] = UNIT_SELECT_ADDR;
 80014d8:	233b      	movs	r3, #59	@ 0x3b
 80014da:	713b      	strb	r3, [r7, #4]
	buf[1] = UNIT_SELECT_DEGREES;
 80014dc:	2300      	movs	r3, #0
 80014de:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 80014e0:	1d3a      	adds	r2, r7, #4
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2302      	movs	r3, #2
 80014ea:	2150      	movs	r1, #80	@ 0x50
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <gyro_init+0x68>)
 80014ee:	f002 fb6f 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]

	diagnose_gyro(ret, "error setting unit");
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4906      	ldr	r1, [pc, #24]	@ (8001514 <gyro_init+0x70>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff5a 	bl	80013b4 <diagnose_gyro>

	return;
 8001500:	bf00      	nop
}
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800a318 	.word	0x0800a318
 800150c:	20000340 	.word	0x20000340
 8001510:	0800a338 	.word	0x0800a338
 8001514:	0800a350 	.word	0x0800a350

08001518 <gyroGetReading>:


	return;
}

uint16_t gyroGetReading() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint16_t heading;
	uint16_t heading_calibrated;

	// I2C
	buf[0] = HEADING_ADDR;
 800151e:	231a      	movs	r3, #26
 8001520:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 1, 1000);
 8001522:	463a      	mov	r2, r7
 8001524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2150      	movs	r1, #80	@ 0x50
 800152e:	4810      	ldr	r0, [pc, #64]	@ (8001570 <gyroGetReading+0x58>)
 8001530:	f002 fb4e 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
	ret = HAL_I2C_Master_Receive(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 8001538:	463a      	mov	r2, r7
 800153a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	2150      	movs	r1, #80	@ 0x50
 8001544:	480a      	ldr	r0, [pc, #40]	@ (8001570 <gyroGetReading+0x58>)
 8001546:	f002 fc5b 	bl	8003e00 <HAL_I2C_Master_Receive>
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]

	// Concatenate the data and calculate the heading
	heading = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800154e:	783b      	ldrb	r3, [r7, #0]
 8001550:	b21a      	sxth	r2, r3
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	80bb      	strh	r3, [r7, #4]
	heading_calibrated = heading/16;
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	807b      	strh	r3, [r7, #2]
	return heading_calibrated;
 8001566:	887b      	ldrh	r3, [r7, #2]

}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000340 	.word	0x20000340

08001574 <i2c_check>:
//                                                //
//        Helper functions for debugging          //
//                                                //
////////////////////////////////////////////////////

void i2c_check (HAL_StatusTypeDef ret, char* message) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <i2c_check+0x1c>
		printf("Pressure Sensor Error: %s\r\n", message);
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <i2c_check+0x2c>)
 800158a:	f006 fdd7 	bl	800813c <iprintf>
	} else {
		printf("Success: %s\r\n", message);
	}
}
 800158e:	e003      	b.n	8001598 <i2c_check+0x24>
		printf("Success: %s\r\n", message);
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <i2c_check+0x30>)
 8001594:	f006 fdd2 	bl	800813c <iprintf>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800a38c 	.word	0x0800a38c
 80015a4:	0800a3a8 	.word	0x0800a3a8

080015a8 <clear_buf>:
	printf("buf[0]: "); print_binary_uint8(buf[0]); printf("\r\n");
	printf("buf[1]: "); print_binary_uint8(buf[1]); printf("\r\n");
	printf("buf[2]: "); print_binary_uint8(buf[2]); printf("\r\n");
}

void clear_buf(uint8_t *buf) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	memset(buf, 0, 3 * sizeof(*buf));
 80015b0:	2203      	movs	r2, #3
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f006 ff09 	bl	80083cc <memset>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <diagnose_pressure>:

void diagnose_pressure(HAL_StatusTypeDef ret) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_BUSY){
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d102      	bne.n	80015da <diagnose_pressure+0x16>
		printf("hal_busy\r\n");
 80015d4:	4833      	ldr	r0, [pc, #204]	@ (80016a4 <diagnose_pressure+0xe0>)
 80015d6:	f006 fe19 	bl	800820c <puts>
	}
	if(ret == HAL_TIMEOUT){
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d102      	bne.n	80015e6 <diagnose_pressure+0x22>
			printf("hal_timeout\r\n");
 80015e0:	4831      	ldr	r0, [pc, #196]	@ (80016a8 <diagnose_pressure+0xe4>)
 80015e2:	f006 fe13 	bl	800820c <puts>
	}
	if(ret == HAL_ERROR){
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <diagnose_pressure+0x2e>
			printf("hal_error\r\n");
 80015ec:	482f      	ldr	r0, [pc, #188]	@ (80016ac <diagnose_pressure+0xe8>)
 80015ee:	f006 fe0d 	bl	800820c <puts>
	}
	if (ret == HAL_ERROR) {
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d150      	bne.n	800169a <diagnose_pressure+0xd6>
		printf("\r\n");
 80015f8:	482d      	ldr	r0, [pc, #180]	@ (80016b0 <diagnose_pressure+0xec>)
 80015fa:	f006 fe07 	bl	800820c <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c1);
 80015fe:	482d      	ldr	r0, [pc, #180]	@ (80016b4 <diagnose_pressure+0xf0>)
 8001600:	f002 fcf4 	bl	8003fec <HAL_I2C_GetError>
 8001604:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <diagnose_pressure+0x50>
			 printf("No Error\r\n");
 800160c:	482a      	ldr	r0, [pc, #168]	@ (80016b8 <diagnose_pressure+0xf4>)
 800160e:	f006 fdfd 	bl	800820c <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 8001612:	e042      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <diagnose_pressure+0x62>
			 printf("Bus Error\r\n");
 800161e:	4827      	ldr	r0, [pc, #156]	@ (80016bc <diagnose_pressure+0xf8>)
 8001620:	f006 fdf4 	bl	800820c <puts>
}
 8001624:	e039      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <diagnose_pressure+0x74>
			 printf("Arbitration Lost Error\r\n");
 8001630:	4823      	ldr	r0, [pc, #140]	@ (80016c0 <diagnose_pressure+0xfc>)
 8001632:	f006 fdeb 	bl	800820c <puts>
}
 8001636:	e030      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <diagnose_pressure+0x86>
			 printf("Acknowledge Failure Error\r\n");
 8001642:	4820      	ldr	r0, [pc, #128]	@ (80016c4 <diagnose_pressure+0x100>)
 8001644:	f006 fde2 	bl	800820c <puts>
}
 8001648:	e027      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <diagnose_pressure+0x98>
			 printf("Overrun/Underrun Error\r\n");
 8001654:	481c      	ldr	r0, [pc, #112]	@ (80016c8 <diagnose_pressure+0x104>)
 8001656:	f006 fdd9 	bl	800820c <puts>
}
 800165a:	e01e      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <diagnose_pressure+0xaa>
			 printf("DMA Transfer Error\r\n");
 8001666:	4819      	ldr	r0, [pc, #100]	@ (80016cc <diagnose_pressure+0x108>)
 8001668:	f006 fdd0 	bl	800820c <puts>
}
 800166c:	e015      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <diagnose_pressure+0xbc>
			 printf("Timeout Error\r\n");
 8001678:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <diagnose_pressure+0x10c>)
 800167a:	f006 fdc7 	bl	800820c <puts>
}
 800167e:	e00c      	b.n	800169a <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <diagnose_pressure+0xce>
			 printf("Size Management Error\r\n");
 800168a:	4812      	ldr	r0, [pc, #72]	@ (80016d4 <diagnose_pressure+0x110>)
 800168c:	f006 fdbe 	bl	800820c <puts>
}
 8001690:	e003      	b.n	800169a <diagnose_pressure+0xd6>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <diagnose_pressure+0x114>)
 8001696:	f006 fd51 	bl	800813c <iprintf>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800a470 	.word	0x0800a470
 80016a8:	0800a47c 	.word	0x0800a47c
 80016ac:	0800a48c 	.word	0x0800a48c
 80016b0:	0800a258 	.word	0x0800a258
 80016b4:	20000340 	.word	0x20000340
 80016b8:	0800a25c 	.word	0x0800a25c
 80016bc:	0800a268 	.word	0x0800a268
 80016c0:	0800a274 	.word	0x0800a274
 80016c4:	0800a28c 	.word	0x0800a28c
 80016c8:	0800a2a8 	.word	0x0800a2a8
 80016cc:	0800a2c0 	.word	0x0800a2c0
 80016d0:	0800a2d4 	.word	0x0800a2d4
 80016d4:	0800a2e4 	.word	0x0800a2e4
 80016d8:	0800a2fc 	.word	0x0800a2fc

080016dc <pressure_temp_Init>:
//             Sensor Calibration                 //
//                                                //
////////////////////////////////////////////////////


void pressure_temp_Init(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <clear_buf>

	printf("\r\n\r\n-----Begin Pressure Sensor-----\r\n");
 80016ea:	4811      	ldr	r0, [pc, #68]	@ (8001730 <pressure_temp_Init+0x54>)
 80016ec:	f006 fd8e 	bl	800820c <puts>

	//reset (needed to reconfigure on boot) ---------------------
	HAL_Delay(200);
 80016f0:	20c8      	movs	r0, #200	@ 0xc8
 80016f2:	f001 f8b1 	bl	8002858 <HAL_Delay>
	buf[0] = 0x1E;//reset command
 80016f6:	231e      	movs	r3, #30
 80016f8:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 80016fa:	1d3a      	adds	r2, r7, #4
 80016fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	21ec      	movs	r1, #236	@ 0xec
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <pressure_temp_Init+0x58>)
 8001708:	f002 fa62 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
	diagnose_pressure(ret);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff56 	bl	80015c4 <diagnose_pressure>
	i2c_check(ret, "reset command");
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4907      	ldr	r1, [pc, #28]	@ (8001738 <pressure_temp_Init+0x5c>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff29 	bl	8001574 <i2c_check>
	HAL_Delay(200);
 8001722:	20c8      	movs	r0, #200	@ 0xc8
 8001724:	f001 f898 	bl	8002858 <HAL_Delay>

}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0800a498 	.word	0x0800a498
 8001734:	20000340 	.word	0x20000340
 8001738:	0800a4c0 	.word	0x0800a4c0

0800173c <pressure_temp_calibrate>:


void pressure_temp_calibrate(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff2f 	bl	80015a8 <clear_buf>

	printf("Calibrating Pressure Sensor...\r\n");
 800174a:	48a2      	ldr	r0, [pc, #648]	@ (80019d4 <pressure_temp_calibrate+0x298>)
 800174c:	f006 fd5e 	bl	800820c <puts>

	//read PROM (calibration data) ------------------------------
	HAL_Delay(100);
 8001750:	2064      	movs	r0, #100	@ 0x64
 8001752:	f001 f881 	bl	8002858 <HAL_Delay>

	buf[0] = 0xA0; //PROM read command c0
 8001756:	23a0      	movs	r3, #160	@ 0xa0
 8001758:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 800175a:	1d3a      	adds	r2, r7, #4
 800175c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	21ec      	movs	r1, #236	@ 0xec
 8001766:	489c      	ldr	r0, [pc, #624]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 8001768:	f002 fa32 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	499a      	ldr	r1, [pc, #616]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fefd 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 800177a:	1d3a      	adds	r2, r7, #4
 800177c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2302      	movs	r3, #2
 8001784:	21ec      	movs	r1, #236	@ 0xec
 8001786:	4894      	ldr	r0, [pc, #592]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 8001788:	f002 fb3a 	bl	8003e00 <HAL_I2C_Master_Receive>
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4993      	ldr	r1, [pc, #588]	@ (80019e0 <pressure_temp_calibrate+0x2a4>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff feed 	bl	8001574 <i2c_check>
	prom.c0 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C0
 800179a:	793b      	ldrb	r3, [r7, #4]
 800179c:	b21b      	sxth	r3, r3
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b8d      	ldr	r3, [pc, #564]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 80017ae:	801a      	strh	r2, [r3, #0]

	buf[0] = 0xA2; //PROM read command c1
 80017b0:	23a2      	movs	r3, #162	@ 0xa2
 80017b2:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 80017b4:	1d3a      	adds	r2, r7, #4
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	21ec      	movs	r1, #236	@ 0xec
 80017c0:	4885      	ldr	r0, [pc, #532]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 80017c2:	f002 fa05 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4983      	ldr	r1, [pc, #524]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fed0 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 80017d4:	1d3a      	adds	r2, r7, #4
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	21ec      	movs	r1, #236	@ 0xec
 80017e0:	487d      	ldr	r0, [pc, #500]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 80017e2:	f002 fb0d 	bl	8003e00 <HAL_I2C_Master_Receive>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	497c      	ldr	r1, [pc, #496]	@ (80019e0 <pressure_temp_calibrate+0x2a4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fec0 	bl	8001574 <i2c_check>
	prom.c1 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C1
 80017f4:	793b      	ldrb	r3, [r7, #4]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21b      	sxth	r3, r3
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b77      	ldr	r3, [pc, #476]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 8001808:	805a      	strh	r2, [r3, #2]

	buf[0] = 0xA4; //PROM read command c2
 800180a:	23a4      	movs	r3, #164	@ 0xa4
 800180c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 800180e:	1d3a      	adds	r2, r7, #4
 8001810:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	21ec      	movs	r1, #236	@ 0xec
 800181a:	486f      	ldr	r0, [pc, #444]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 800181c:	f002 f9d8 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	496d      	ldr	r1, [pc, #436]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fea3 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 800182e:	1d3a      	adds	r2, r7, #4
 8001830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2302      	movs	r3, #2
 8001838:	21ec      	movs	r1, #236	@ 0xec
 800183a:	4867      	ldr	r0, [pc, #412]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 800183c:	f002 fae0 	bl	8003e00 <HAL_I2C_Master_Receive>
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c2");
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4968      	ldr	r1, [pc, #416]	@ (80019e8 <pressure_temp_calibrate+0x2ac>)
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe93 	bl	8001574 <i2c_check>
	prom.c2 =   ((uint16_t)buf[0] << 8)  | buf[1];  //C2
 800184e:	793b      	ldrb	r3, [r7, #4]
 8001850:	b21b      	sxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	797b      	ldrb	r3, [r7, #5]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b60      	ldr	r3, [pc, #384]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 8001862:	809a      	strh	r2, [r3, #4]

	buf[0] = 0xA6; //PROM read command c3
 8001864:	23a6      	movs	r3, #166	@ 0xa6
 8001866:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001868:	1d3a      	adds	r2, r7, #4
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	21ec      	movs	r1, #236	@ 0xec
 8001874:	4858      	ldr	r0, [pc, #352]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 8001876:	f002 f9ab 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4956      	ldr	r1, [pc, #344]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe76 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001888:	1d3a      	adds	r2, r7, #4
 800188a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2302      	movs	r3, #2
 8001892:	21ec      	movs	r1, #236	@ 0xec
 8001894:	4850      	ldr	r0, [pc, #320]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 8001896:	f002 fab3 	bl	8003e00 <HAL_I2C_Master_Receive>
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c3");
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4952      	ldr	r1, [pc, #328]	@ (80019ec <pressure_temp_calibrate+0x2b0>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fe66 	bl	8001574 <i2c_check>
	prom.c3 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C3
 80018a8:	793b      	ldrb	r3, [r7, #4]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	797b      	ldrb	r3, [r7, #5]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 80018bc:	80da      	strh	r2, [r3, #6]

	buf[0] = 0xA8; //PROM read command c4
 80018be:	23a8      	movs	r3, #168	@ 0xa8
 80018c0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 80018c2:	1d3a      	adds	r2, r7, #4
 80018c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	21ec      	movs	r1, #236	@ 0xec
 80018ce:	4842      	ldr	r0, [pc, #264]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 80018d0:	f002 f97e 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4940      	ldr	r1, [pc, #256]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe49 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 80018e2:	1d3a      	adds	r2, r7, #4
 80018e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2302      	movs	r3, #2
 80018ec:	21ec      	movs	r1, #236	@ 0xec
 80018ee:	483a      	ldr	r0, [pc, #232]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 80018f0:	f002 fa86 	bl	8003e00 <HAL_I2C_Master_Receive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c4");
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	493d      	ldr	r1, [pc, #244]	@ (80019f0 <pressure_temp_calibrate+0x2b4>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe39 	bl	8001574 <i2c_check>
	prom.c4 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C4
 8001902:	793b      	ldrb	r3, [r7, #4]
 8001904:	b21b      	sxth	r3, r3
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	797b      	ldrb	r3, [r7, #5]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b33      	ldr	r3, [pc, #204]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 8001916:	811a      	strh	r2, [r3, #8]

	buf[0] = 0xAA; //PROM read command c5
 8001918:	23aa      	movs	r3, #170	@ 0xaa
 800191a:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 800191c:	1d3a      	adds	r2, r7, #4
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	21ec      	movs	r1, #236	@ 0xec
 8001928:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 800192a:	f002 f951 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4929      	ldr	r1, [pc, #164]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe1c 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 800193c:	1d3a      	adds	r2, r7, #4
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	21ec      	movs	r1, #236	@ 0xec
 8001948:	4823      	ldr	r0, [pc, #140]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 800194a:	f002 fa59 	bl	8003e00 <HAL_I2C_Master_Receive>
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c5");
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4927      	ldr	r1, [pc, #156]	@ (80019f4 <pressure_temp_calibrate+0x2b8>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe0c 	bl	8001574 <i2c_check>
	prom.c5 =    ((uint16_t)buf[0] << 8) | buf[1]; //C5
 800195c:	793b      	ldrb	r3, [r7, #4]
 800195e:	b21b      	sxth	r3, r3
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 8001970:	815a      	strh	r2, [r3, #10]

	buf[0] = 0xAC; //PROM read command c6
 8001972:	23ac      	movs	r3, #172	@ 0xac
 8001974:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001976:	1d3a      	adds	r2, r7, #4
 8001978:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	21ec      	movs	r1, #236	@ 0xec
 8001982:	4815      	ldr	r0, [pc, #84]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 8001984:	f002 f924 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4913      	ldr	r1, [pc, #76]	@ (80019dc <pressure_temp_calibrate+0x2a0>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fdef 	bl	8001574 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001996:	1d3a      	adds	r2, r7, #4
 8001998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2302      	movs	r3, #2
 80019a0:	21ec      	movs	r1, #236	@ 0xec
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <pressure_temp_calibrate+0x29c>)
 80019a4:	f002 fa2c 	bl	8003e00 <HAL_I2C_Master_Receive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c6");
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4912      	ldr	r1, [pc, #72]	@ (80019f8 <pressure_temp_calibrate+0x2bc>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fddf 	bl	8001574 <i2c_check>
	prom.c6 = ((uint16_t)buf[0] << 8) | buf[1]; //C6
 80019b6:	793b      	ldrb	r3, [r7, #4]
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21a      	sxth	r2, r3
 80019be:	797b      	ldrb	r3, [r7, #5]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <pressure_temp_calibrate+0x2a8>)
 80019ca:	819a      	strh	r2, [r3, #12]

}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800a4d0 	.word	0x0800a4d0
 80019d8:	20000340 	.word	0x20000340
 80019dc:	0800a4f0 	.word	0x0800a4f0
 80019e0:	0800a50c 	.word	0x0800a50c
 80019e4:	20000330 	.word	0x20000330
 80019e8:	0800a528 	.word	0x0800a528
 80019ec:	0800a544 	.word	0x0800a544
 80019f0:	0800a560 	.word	0x0800a560
 80019f4:	0800a57c 	.word	0x0800a57c
 80019f8:	0800a598 	.word	0x0800a598

080019fc <HAL_GPIO_EXTI_Callback>:
#define SRC_FLOWMETER_H_

extern uint16_t pulseCount;

//interrupt to count pulses
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_0){
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_EXTI_Callback+0x1c>
		pulseCount++;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_GPIO_EXTI_Callback+0x28>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_GPIO_EXTI_Callback+0x28>)
 8001a16:	801a      	strh	r2, [r3, #0]
	}
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	20000468 	.word	0x20000468

08001a28 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10f      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x32>
        // Your periodic code here
    	//gyro_test();
    	//get_pressure_temp(&pres_temp);
    	//printf("pressure: %f\r\n", pres_temp.pressure); //in units of millibar (mbar)
     	//printf("temperature: %f\r\n", pres_temp.temperature); //in degrees celcius
    	uint16_t gyroReading = gyroGetReading();
 8001a3a:	f7ff fd6d 	bl	8001518 <gyroGetReading>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]
    	uint32_t presTempReading = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
    	//presTempReading = get_pressure_temp_CAN(&pres_temp); // uncomment when working
    	transmit_sensor_packet(gyroReading, presTempReading, pulseCount);
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a48:	881a      	ldrh	r2, [r3, #0]
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb94 	bl	800117c <transmit_sensor_packet>
    	pulseCount = 0;
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
    }
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40001000 	.word	0x40001000
 8001a68:	20000468 	.word	0x20000468

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a72:	f000 fe7c 	bl	800276e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a76:	f000 f841 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7a:	f000 fa91 	bl	8001fa0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a7e:	f000 f931 	bl	8001ce4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a82:	f000 f9dd 	bl	8001e40 <MX_TIM2_Init>
  MX_CAN1_Init();
 8001a86:	f000 f88b 	bl	8001ba0 <MX_CAN1_Init>
  MX_LPUART1_UART_Init();
 8001a8a:	f000 f8ff 	bl	8001c8c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001a8e:	f000 f8bd 	bl	8001c0c <MX_I2C1_Init>
  MX_TIM6_Init();
 8001a92:	f000 fa4d 	bl	8001f30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //////// ---------------- THRUSTER INIT ------------------- ////////////
  //flash_thruster(0); DO NOT RUN
  //flash_thruster(1); DO NOT RUN
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a96:	2104      	movs	r1, #4
 8001a98:	4815      	ldr	r0, [pc, #84]	@ (8001af0 <main+0x84>)
 8001a9a:	f004 f883 	bl	8005ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a9e:	2108      	movs	r1, #8
 8001aa0:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <main+0x88>)
 8001aa2:	f004 f87f 	bl	8005ba4 <HAL_TIM_PWM_Start>
  init_thruster(0);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fa4c 	bl	8000f44 <init_thruster>
  init_thruster(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fa49 	bl	8000f44 <init_thruster>
  /////////////////////////////////////////////////////////////////////////

  ////// ------------------ CAN INIT --------------------------/////////////
  can_setup();
 8001ab2:	f7ff faf5 	bl	80010a0 <can_setup>
  //////////////////////////////////////////////////////////////////////////

  //////// -------------- PRESSURE SENSOR INIT ----------------- ////////////
  pressure_temp_Init();
 8001ab6:	f7ff fe11 	bl	80016dc <pressure_temp_Init>
  pressure_temp_calibrate();
 8001aba:	f7ff fe3f 	bl	800173c <pressure_temp_calibrate>
  ///////////////////////////////////////////////////////////////////////////////

  ////// ------------------ GYRO INIT ------------------------- ///////////
  gyro_init();
 8001abe:	f7ff fcf1 	bl	80014a4 <gyro_init>
  //////////////////////////////////////////////////////////////////////////

  ////////--------------TIM6 START ------------------------------/////////////
  HAL_TIM_Base_Start_IT(&htim6); // This must happen AFTER sensor initialization!!
 8001ac2:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <main+0x8c>)
 8001ac4:	f003 ffb8 	bl	8005a38 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t control =0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	control = read_control_from_CAN();
 8001acc:	f7ff fb3c 	bl	8001148 <read_control_from_CAN>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
	controlThrusterStateCAN(control);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbba 	bl	8001250 <controlThrusterStateCAN>
	controlThrusterSpeedCAN(control);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fbfc 	bl	80012dc <controlThrusterSpeedCAN>
	controlLinearActuatorCAN(control);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fc22 	bl	8001330 <controlLinearActuatorCAN>
	control = read_control_from_CAN();
 8001aec:	bf00      	nop
 8001aee:	e7ed      	b.n	8001acc <main+0x60>
 8001af0:	200001fc 	.word	0x200001fc
 8001af4:	20000248 	.word	0x20000248
 8001af8:	2000041c 	.word	0x2000041c

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	@ 0x58
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2244      	movs	r2, #68	@ 0x44
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f006 fc5e 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b22:	f002 fdbb 	bl	800469c <HAL_PWREx_ControlVoltageScaling>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b2c:	f000 fad2 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b30:	2310      	movs	r3, #16
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b3c:	2360      	movs	r3, #96	@ 0x60
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b40:	2302      	movs	r3, #2
 8001b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b50:	2307      	movs	r3, #7
 8001b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 fdf1 	bl	8004748 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b6c:	f000 fab2 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2303      	movs	r3, #3
 8001b76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 f9f1 	bl	8004f70 <HAL_RCC_ClockConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b94:	f000 fa9e 	bl	80020d4 <Error_Handler>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3758      	adds	r7, #88	@ 0x58
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <MX_CAN1_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 240;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bac:	22f0      	movs	r2, #240	@ 0xf0
 8001bae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bc2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bc6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bf2:	f000 fe55 	bl	80028a0 <HAL_CAN_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bfc:	f000 fa6a 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000294 	.word	0x20000294
 8001c08:	40006400 	.word	0x40006400

08001c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <MX_I2C1_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <MX_I2C1_Init+0x7c>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c46:	480e      	ldr	r0, [pc, #56]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c48:	f001 ff26 	bl	8003a98 <HAL_I2C_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c52:	f000 fa3f 	bl	80020d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c56:	2100      	movs	r1, #0
 8001c58:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c5a:	f002 fc79 	bl	8004550 <HAL_I2CEx_ConfigAnalogFilter>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c64:	f000 fa36 	bl	80020d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c6c:	f002 fcbb 	bl	80045e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 fa2d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000340 	.word	0x20000340
 8001c84:	40005400 	.word	0x40005400
 8001c88:	00b07cb4 	.word	0x00b07cb4

08001c8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001c92:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <MX_LPUART1_UART_Init+0x54>)
 8001c94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_LPUART1_UART_Init+0x50>)
 8001cca:	f005 f801 	bl	8006cd0 <HAL_UART_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001cd4:	f000 f9fe 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000394 	.word	0x20000394
 8001ce0:	40008000 	.word	0x40008000

08001ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09a      	sub	sp, #104	@ 0x68
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	222c      	movs	r2, #44	@ 0x2c
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f006 fb54 	bl	80083cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d24:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d26:	4a45      	ldr	r2, [pc, #276]	@ (8001e3c <MX_TIM1_Init+0x158>)
 8001d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 399;
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d2c:	f240 128f 	movw	r2, #399	@ 0x18f
 8001d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b41      	ldr	r3, [pc, #260]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 8001d38:	4b3f      	ldr	r3, [pc, #252]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d3a:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d46:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d52:	4839      	ldr	r0, [pc, #228]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d54:	f003 fe18 	bl	8005988 <HAL_TIM_Base_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d5e:	f000 f9b9 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d66:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4832      	ldr	r0, [pc, #200]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d70:	f004 fa12 	bl	8006198 <HAL_TIM_ConfigClockSource>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d7a:	f000 f9ab 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d7e:	482e      	ldr	r0, [pc, #184]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001d80:	f003 feae 	bl	8005ae0 <HAL_TIM_PWM_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d8a:	f000 f9a3 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4825      	ldr	r0, [pc, #148]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001da2:	f004 fe99 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001dac:	f000 f992 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db0:	2360      	movs	r3, #96	@ 0x60
 8001db2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001dd6:	f004 f8cb 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001de0:	f000 f978 	bl	80020d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001e1a:	f004 fec3 	bl	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001e24:	f000 f956 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <MX_TIM1_Init+0x154>)
 8001e2a:	f000 fae7 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8001e2e:	bf00      	nop
 8001e30:	3768      	adds	r7, #104	@ 0x68
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000248 	.word	0x20000248
 8001e3c:	40012c00 	.word	0x40012c00

08001e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	@ 0x38
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e60:	463b      	mov	r3, r7
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	615a      	str	r2, [r3, #20]
 8001e70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e72:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 399;
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e7c:	f240 128f 	movw	r2, #399	@ 0x18f
 8001e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1599;
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e8a:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e9c:	4823      	ldr	r0, [pc, #140]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001e9e:	f003 fd73 	bl	8005988 <HAL_TIM_Base_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001ea8:	f000 f914 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481c      	ldr	r0, [pc, #112]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001eba:	f004 f96d 	bl	8006198 <HAL_TIM_ConfigClockSource>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001ec4:	f000 f906 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ec8:	4818      	ldr	r0, [pc, #96]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001eca:	f003 fe09 	bl	8005ae0 <HAL_TIM_PWM_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001ed4:	f000 f8fe 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4811      	ldr	r0, [pc, #68]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001ee8:	f004 fdf6 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001ef2:	f000 f8ef 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef6:	2360      	movs	r3, #96	@ 0x60
 8001ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f06:	463b      	mov	r3, r7
 8001f08:	2204      	movs	r2, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001f0e:	f004 f82f 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001f18:	f000 f8dc 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f1c:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <MX_TIM2_Init+0xec>)
 8001f1e:	f000 fa6d 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8001f22:	bf00      	nop
 8001f24:	3738      	adds	r7, #56	@ 0x38
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001fc 	.word	0x200001fc

08001f30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f40:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f42:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <MX_TIM6_Init+0x6c>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f48:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001f4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1599;
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f56:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001f5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f62:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f64:	f003 fd10 	bl	8005988 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001f6e:	f000 f8b1 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_TIM6_Init+0x68>)
 8001f80:	f004 fdaa 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001f8a:	f000 f8a3 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000041c 	.word	0x2000041c
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	4a3b      	ldr	r2, [pc, #236]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc2:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	4b30      	ldr	r3, [pc, #192]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <MX_GPIO_Init+0x108>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002008:	f001 fd16 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2108      	movs	r1, #8
 8002010:	4826      	ldr	r0, [pc, #152]	@ (80020ac <MX_GPIO_Init+0x10c>)
 8002012:	f001 fd11 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002016:	2301      	movs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4820      	ldr	r0, [pc, #128]	@ (80020ac <MX_GPIO_Init+0x10c>)
 800202c:	f001 fb9a 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002030:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204c:	f001 fb8a 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002062:	2303      	movs	r3, #3
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002070:	f001 fb78 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002074:	2308      	movs	r3, #8
 8002076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4808      	ldr	r0, [pc, #32]	@ (80020ac <MX_GPIO_Init+0x10c>)
 800208c:	f001 fb6a 	bl	8003764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	2006      	movs	r0, #6
 8002096:	f001 fb2e 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800209a:	2006      	movs	r0, #6
 800209c:	f001 fb47 	bl	800372e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400

080020b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <__io_putchar+0x20>)
 80020c2:	f004 fe53 	bl	8006d6c <HAL_UART_Transmit>
  return ch;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000394 	.word	0x20000394

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <Error_Handler+0x8>

080020e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_MspInit+0x44>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <HAL_MspInit+0x44>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_MspInit+0x44>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_MspInit+0x44>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_MspInit+0x44>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	@ 0x58
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_MspInit+0x44>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <HAL_CAN_MspInit+0xd4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d153      	bne.n	80021f2 <HAL_CAN_MspInit+0xca>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800214a:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4a26      	ldr	r2, [pc, #152]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_CAN_MspInit+0xd8>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800217a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800218c:	2309      	movs	r3, #9
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800219a:	f001 fae3 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800219e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021b0:	2309      	movs	r3, #9
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f001 fad1 	bl	8003764 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2013      	movs	r0, #19
 80021c8:	f001 fa95 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80021cc:	2013      	movs	r0, #19
 80021ce:	f001 faae 	bl	800372e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2014      	movs	r0, #20
 80021d8:	f001 fa8d 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80021dc:	2014      	movs	r0, #20
 80021de:	f001 faa6 	bl	800372e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2015      	movs	r0, #21
 80021e8:	f001 fa85 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80021ec:	2015      	movs	r0, #21
 80021ee:	f001 fa9e 	bl	800372e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40006400 	.word	0x40006400
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b09e      	sub	sp, #120	@ 0x78
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2254      	movs	r2, #84	@ 0x54
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f006 f8d1 	bl	80083cc <memset>
  if(hi2c->Instance==I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_I2C_MspInit+0xa4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d135      	bne.n	80022a0 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002234:	2340      	movs	r3, #64	@ 0x40
 8002236:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f003 f8b9 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800224c:	f7ff ff42 	bl	80020d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	4a15      	ldr	r2, [pc, #84]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002268:	23c0      	movs	r3, #192	@ 0xc0
 800226a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002278:	2304      	movs	r3, #4
 800227a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002280:	4619      	mov	r1, r3
 8002282:	480b      	ldr	r0, [pc, #44]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 8002284:	f001 fa6e 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 800228e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002292:	6593      	str	r3, [r2, #88]	@ 0x58
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022a0:	bf00      	nop
 80022a2:	3778      	adds	r7, #120	@ 0x78
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40005400 	.word	0x40005400
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48000400 	.word	0x48000400

080022b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b09e      	sub	sp, #120	@ 0x78
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2254      	movs	r2, #84	@ 0x54
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 f879 	bl	80083cc <memset>
  if(huart->Instance==LPUART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_UART_MspInit+0xa8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d136      	bne.n	8002352 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022e4:	2320      	movs	r3, #32
 80022e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f861 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022fc:	f7ff feea 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_UART_MspInit+0xac>)
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	4a16      	ldr	r2, [pc, #88]	@ (8002360 <HAL_UART_MspInit+0xac>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <HAL_UART_MspInit+0xac>)
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_UART_MspInit+0xac>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <HAL_UART_MspInit+0xac>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_UART_MspInit+0xac>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002330:	230c      	movs	r3, #12
 8002332:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002340:	2308      	movs	r3, #8
 8002342:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002348:	4619      	mov	r1, r3
 800234a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234e:	f001 fa09 	bl	8003764 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002352:	bf00      	nop
 8002354:	3778      	adds	r7, #120	@ 0x78
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40008000 	.word	0x40008000
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1f      	ldr	r2, [pc, #124]	@ (80023f0 <HAL_TIM_Base_MspInit+0x8c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 800237c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002380:	6613      	str	r3, [r2, #96]	@ 0x60
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800238e:	e02a      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002398:	d10c      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a15      	ldr	r2, [pc, #84]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a6:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
}
 80023b2:	e018      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_TIM_Base_MspInit+0x94>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d113      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	4a0c      	ldr	r2, [pc, #48]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_TIM_Base_MspInit+0x90>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2036      	movs	r0, #54	@ 0x36
 80023dc:	f001 f98b 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e0:	2036      	movs	r0, #54	@ 0x36
 80023e2:	f001 f9a4 	bl	800372e <HAL_NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40001000 	.word	0x40001000

080023fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <HAL_TIM_MspPostInit+0xac>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11e      	bne.n	800245c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002456:	f001 f985 	bl	8003764 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800245a:	e021      	b.n	80024a0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002464:	d11c      	bne.n	80024a0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a10      	ldr	r2, [pc, #64]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_TIM_MspPostInit+0xb0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800247e:	2302      	movs	r3, #2
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800249c:	f001 f962 	bl	8003764 <HAL_GPIO_Init>
}
 80024a0:	bf00      	nop
 80024a2:	3728      	adds	r7, #40	@ 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40021000 	.word	0x40021000

080024b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <NMI_Handler+0x4>

080024b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <MemManage_Handler+0x4>

080024c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002506:	f000 f987 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}

0800250e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002512:	2001      	movs	r0, #1
 8002514:	f001 faa8 	bl	8003a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002520:	4802      	ldr	r0, [pc, #8]	@ (800252c <CAN1_TX_IRQHandler+0x10>)
 8002522:	f000 fdde 	bl	80030e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000294 	.word	0x20000294

08002530 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <CAN1_RX0_IRQHandler+0x10>)
 8002536:	f000 fdd4 	bl	80030e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000294 	.word	0x20000294

08002544 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002548:	4802      	ldr	r0, [pc, #8]	@ (8002554 <CAN1_RX1_IRQHandler+0x10>)
 800254a:	f000 fdca 	bl	80030e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000294 	.word	0x20000294

08002558 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <TIM6_DAC_IRQHandler+0x10>)
 800255e:	f003 fbff 	bl	8005d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000041c 	.word	0x2000041c

0800256c <_getpid>:
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
 8002570:	2301      	movs	r3, #1
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_kill>:
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	f005 ff73 	bl	8008470 <__errno>
 800258a:	4603      	mov	r3, r0
 800258c:	2216      	movs	r2, #22
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_exit>:
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffe7 	bl	800257c <_kill>
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <_exit+0x12>

080025b2 <_read>:
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e00a      	b.n	80025da <_read+0x28>
 80025c4:	f3af 8000 	nop.w
 80025c8:	4601      	mov	r1, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	60ba      	str	r2, [r7, #8]
 80025d0:	b2ca      	uxtb	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf0      	blt.n	80025c4 <_read+0x12>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_write>:
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e009      	b.n	8002612 <_write+0x26>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fd52 	bl	80020b0 <__io_putchar>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbf1      	blt.n	80025fe <_write+0x12>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_close>:
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_fstat>:
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_isatty>:
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	2301      	movs	r3, #1
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_lseek>:
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_sbrk>:
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
 80026bc:	f005 fed8 	bl	8008470 <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000c000 	.word	0x2000c000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	2000046c 	.word	0x2000046c
 80026f4:	200005c0 	.word	0x200005c0

080026f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <SystemInit+0x20>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <SystemInit+0x20>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <Reset_Handler>:
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002754 <LoopForever+0x2>
 8002720:	f7ff ffea 	bl	80026f8 <SystemInit>
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <LoopForever+0x6>)
 8002726:	490d      	ldr	r1, [pc, #52]	@ (800275c <LoopForever+0xa>)
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <LoopForever+0xe>)
 800272a:	2300      	movs	r3, #0
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:
 800272e:	58d4      	ldr	r4, [r2, r3]
 8002730:	50c4      	str	r4, [r0, r3]
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:
 8002734:	18c4      	adds	r4, r0, r3
 8002736:	428c      	cmp	r4, r1
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <LoopForever+0x12>)
 800273c:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <LoopForever+0x16>)
 800273e:	2300      	movs	r3, #0
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:
 8002746:	42a2      	cmp	r2, r4
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>
 800274a:	f005 fe97 	bl	800847c <__libc_init_array>
 800274e:	f7ff f98d 	bl	8001a6c <main>

08002752 <LoopForever>:
 8002752:	e7fe      	b.n	8002752 <LoopForever>
 8002754:	2000c000 	.word	0x2000c000
 8002758:	20000000 	.word	0x20000000
 800275c:	200001e0 	.word	0x200001e0
 8002760:	0800aa04 	.word	0x0800aa04
 8002764:	200001e0 	.word	0x200001e0
 8002768:	200005c0 	.word	0x200005c0

0800276c <ADC1_IRQHandler>:
 800276c:	e7fe      	b.n	800276c <ADC1_IRQHandler>

0800276e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f000 ffb1 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f80e 	bl	80027a0 <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	e001      	b.n	8002794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002790:	f7ff fca6 	bl	80020e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002794:	79fb      	ldrb	r3, [r7, #7]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027ac:	4b17      	ldr	r3, [pc, #92]	@ (800280c <HAL_InitTick+0x6c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027b4:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_InitTick+0x70>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <HAL_InitTick+0x6c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ffbd 	bl	800374a <HAL_SYSTICK_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d809      	bhi.n	80027f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027dc:	2200      	movs	r2, #0
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f000 ff87 	bl	80036f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <HAL_InitTick+0x74>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e007      	b.n	8002800 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e004      	b.n	8002800 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e001      	b.n	8002800 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000014 	.word	0x20000014
 8002810:	2000000c 	.word	0x2000000c
 8002814:	20000010 	.word	0x20000010

08002818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_IncTick+0x20>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_IncTick+0x24>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a04      	ldr	r2, [pc, #16]	@ (800283c <HAL_IncTick+0x24>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000014 	.word	0x20000014
 800283c:	20000470 	.word	0x20000470

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000470 	.word	0x20000470

08002858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff ffee 	bl	8002840 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d005      	beq.n	800287e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_Delay+0x44>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800287e:	bf00      	nop
 8002880:	f7ff ffde 	bl	8002840 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8f7      	bhi.n	8002880 <HAL_Delay+0x28>
  {
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000014 	.word	0x20000014

080028a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0ed      	b.n	8002a8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fc32 	bl	8002128 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d4:	f7ff ffb4 	bl	8002840 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028da:	e012      	b.n	8002902 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028dc:	f7ff ffb0 	bl	8002840 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b0a      	cmp	r3, #10
 80028e8:	d90b      	bls.n	8002902 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2205      	movs	r2, #5
 80028fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0c5      	b.n	8002a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0e5      	beq.n	80028dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0202 	bic.w	r2, r2, #2
 800291e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002920:	f7ff ff8e 	bl	8002840 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002926:	e012      	b.n	800294e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002928:	f7ff ff8a 	bl	8002840 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b0a      	cmp	r3, #10
 8002934:	d90b      	bls.n	800294e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2205      	movs	r2, #5
 8002946:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e09f      	b.n	8002a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e5      	bne.n	8002928 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7e1b      	ldrb	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d108      	bne.n	8002976 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e007      	b.n	8002986 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7e5b      	ldrb	r3, [r3, #25]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e007      	b.n	80029b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e9b      	ldrb	r3, [r3, #26]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d108      	bne.n	80029ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e007      	b.n	80029da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0220 	bic.w	r2, r2, #32
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7edb      	ldrb	r3, [r3, #27]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0210 	bic.w	r2, r2, #16
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e007      	b.n	8002a04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0210 	orr.w	r2, r2, #16
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7f1b      	ldrb	r3, [r3, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e007      	b.n	8002a2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0208 	bic.w	r2, r2, #8
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7f5b      	ldrb	r3, [r3, #29]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d108      	bne.n	8002a48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0204 	orr.w	r2, r2, #4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	ea42 0103 	orr.w	r1, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d003      	beq.n	8002abc <HAL_CAN_ConfigFilter+0x26>
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	f040 80aa 	bne.w	8002c10 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d123      	bne.n	8002b3e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	401a      	ands	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3248      	adds	r2, #72	@ 0x48
 8002b1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	3348      	adds	r3, #72	@ 0x48
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d122      	bne.n	8002b8c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3248      	adds	r2, #72	@ 0x48
 8002b6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	3348      	adds	r3, #72	@ 0x48
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ba6:	e007      	b.n	8002bb8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002bd2:	e007      	b.n	8002be4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c02:	f023 0201 	bic.w	r2, r3, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e006      	b.n	8002c1e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d12e      	bne.n	8002c9c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c56:	f7ff fdf3 	bl	8002840 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c5c:	e012      	b.n	8002c84 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c5e:	f7ff fdef 	bl	8002840 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b0a      	cmp	r3, #10
 8002c6a:	d90b      	bls.n	8002c84 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e012      	b.n	8002caa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e5      	bne.n	8002c5e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e006      	b.n	8002caa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b089      	sub	sp, #36	@ 0x24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cd0:	7ffb      	ldrb	r3, [r7, #31]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d003      	beq.n	8002cde <HAL_CAN_AddTxMessage+0x2c>
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f040 80ad 	bne.w	8002e38 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8095 	beq.w	8002e28 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	0e1b      	lsrs	r3, r3, #24
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	6809      	ldr	r1, [r1, #0]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e00f      	b.n	8002d56 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3318      	adds	r3, #24
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	440b      	add	r3, r1
 8002d54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3318      	adds	r3, #24
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	440b      	add	r3, r1
 8002d66:	3304      	adds	r3, #4
 8002d68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	7d1b      	ldrb	r3, [r3, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d111      	bne.n	8002d96 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3318      	adds	r3, #24
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6811      	ldr	r1, [r2, #0]
 8002d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	3304      	adds	r3, #4
 8002d94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3307      	adds	r3, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	061a      	lsls	r2, r3, #24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3306      	adds	r3, #6
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3305      	adds	r3, #5
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4313      	orrs	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	3204      	adds	r2, #4
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	4610      	mov	r0, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	6811      	ldr	r1, [r2, #0]
 8002dbe:	ea43 0200 	orr.w	r2, r3, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002dcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	061a      	lsls	r2, r3, #24
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4313      	orrs	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	4610      	mov	r0, r2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	6811      	ldr	r1, [r2, #0]
 8002df4:	ea43 0200 	orr.w	r2, r3, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002e02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	440b      	add	r3, r1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e00e      	b.n	8002e46 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e006      	b.n	8002e46 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d003      	beq.n	8002e76 <HAL_CAN_GetRxMessage+0x24>
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 8103 	bne.w	800307c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10e      	bne.n	8002e9a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0f7      	b.n	800308a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0e8      	b.n	800308a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	331b      	adds	r3, #27
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0204 	and.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	331b      	adds	r3, #27
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0d5b      	lsrs	r3, r3, #21
 8002ee6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	331b      	adds	r3, #27
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	4413      	add	r3, r2
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	331b      	adds	r3, #27
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4413      	add	r3, r2
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0202 	and.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	331b      	adds	r3, #27
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	e00b      	b.n	8002f56 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	331b      	adds	r3, #27
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	331b      	adds	r3, #27
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	331b      	adds	r3, #27
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0a1a      	lsrs	r2, r3, #8
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0c1a      	lsrs	r2, r3, #16
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0e1a      	lsrs	r2, r3, #24
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4413      	add	r3, r2
 800300c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0a1a      	lsrs	r2, r3, #8
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3305      	adds	r3, #5
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0c1a      	lsrs	r2, r3, #16
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	3306      	adds	r3, #6
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4413      	add	r3, r2
 8003040:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0e1a      	lsrs	r2, r3, #24
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3307      	adds	r3, #7
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	e007      	b.n	8003078 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e006      	b.n	800308a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d002      	beq.n	80030b4 <HAL_CAN_ActivateNotification+0x1e>
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d109      	bne.n	80030c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6959      	ldr	r1, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e006      	b.n	80030d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	@ 0x28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d07c      	beq.n	8003222 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d023      	beq.n	800317a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f983 	bl	8003450 <HAL_CAN_TxMailbox0CompleteCallback>
 800314a:	e016      	b.n	800317a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
 800315e:	e00c      	b.n	800317a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
 8003172:	e002      	b.n	800317a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f989 	bl	800348c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d024      	beq.n	80031ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800318c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f963 	bl	8003464 <HAL_CAN_TxMailbox1CompleteCallback>
 800319e:	e016      	b.n	80031ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b2:	e00c      	b.n	80031ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	e002      	b.n	80031ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f969 	bl	80034a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d024      	beq.n	8003222 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f943 	bl	8003478 <HAL_CAN_TxMailbox2CompleteCallback>
 80031f2:	e016      	b.n	8003222 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
 8003206:	e00c      	b.n	8003222 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	e002      	b.n	8003222 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f949 	bl	80034b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00c      	beq.n	8003246 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2210      	movs	r2, #16
 8003244:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2208      	movs	r2, #8
 8003260:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f930 	bl	80034c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fef1 	bl	8001068 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00c      	beq.n	80032aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2210      	movs	r2, #16
 80032a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2208      	movs	r2, #8
 80032c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f912 	bl	80034f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8f9 	bl	80034dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2210      	movs	r2, #16
 8003304:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8fc 	bl	8003504 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2208      	movs	r2, #8
 8003326:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8f5 	bl	8003518 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d07b      	beq.n	8003430 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d072      	beq.n	8003428 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339c:	2b00      	cmp	r3, #0
 800339e:	d043      	beq.n	8003428 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03e      	beq.n	8003428 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b0:	2b60      	cmp	r3, #96	@ 0x60
 80033b2:	d02b      	beq.n	800340c <HAL_CAN_IRQHandler+0x32a>
 80033b4:	2b60      	cmp	r3, #96	@ 0x60
 80033b6:	d82e      	bhi.n	8003416 <HAL_CAN_IRQHandler+0x334>
 80033b8:	2b50      	cmp	r3, #80	@ 0x50
 80033ba:	d022      	beq.n	8003402 <HAL_CAN_IRQHandler+0x320>
 80033bc:	2b50      	cmp	r3, #80	@ 0x50
 80033be:	d82a      	bhi.n	8003416 <HAL_CAN_IRQHandler+0x334>
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d019      	beq.n	80033f8 <HAL_CAN_IRQHandler+0x316>
 80033c4:	2b40      	cmp	r3, #64	@ 0x40
 80033c6:	d826      	bhi.n	8003416 <HAL_CAN_IRQHandler+0x334>
 80033c8:	2b30      	cmp	r3, #48	@ 0x30
 80033ca:	d010      	beq.n	80033ee <HAL_CAN_IRQHandler+0x30c>
 80033cc:	2b30      	cmp	r3, #48	@ 0x30
 80033ce:	d822      	bhi.n	8003416 <HAL_CAN_IRQHandler+0x334>
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d002      	beq.n	80033da <HAL_CAN_IRQHandler+0x2f8>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d005      	beq.n	80033e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033d8:	e01d      	b.n	8003416 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033e2:	e019      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033ec:	e014      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	f043 0320 	orr.w	r3, r3, #32
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033f6:	e00f      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003400:	e00a      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800340a:	e005      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003414:	e000      	b.n	8003418 <HAL_CAN_IRQHandler+0x336>
            break;
 8003416:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003426:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2204      	movs	r2, #4
 800342e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f872 	bl	800352c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	@ (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	@ (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <SysTick_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ba:	210f      	movs	r1, #15
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f7ff ff8e 	bl	80035e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <SysTick_Config+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <SysTick_Config+0x40>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff29 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003708:	f7ff ff3e 	bl	8003588 <__NVIC_GetPriorityGrouping>
 800370c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff8e 	bl	8003634 <NVIC_EncodePriority>
 8003718:	4602      	mov	r2, r0
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff5d 	bl	80035e0 <__NVIC_SetPriority>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff31 	bl	80035a4 <__NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ffa2 	bl	800369c <SysTick_Config>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003772:	e148      	b.n	8003a06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 813a 	beq.w	8003a00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d005      	beq.n	80037a4 <HAL_GPIO_Init+0x40>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d130      	bne.n	8003806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037da:	2201      	movs	r2, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0201 	and.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d017      	beq.n	8003842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d123      	bne.n	8003896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	08da      	lsrs	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3208      	adds	r2, #8
 8003856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	08da      	lsrs	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3208      	adds	r2, #8
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8094 	beq.w	8003a00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d8:	4b52      	ldr	r3, [pc, #328]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038dc:	4a51      	ldr	r2, [pc, #324]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a28 <HAL_GPIO_Init+0x2c4>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391a:	d00d      	beq.n	8003938 <HAL_GPIO_Init+0x1d4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a43      	ldr	r2, [pc, #268]	@ (8003a2c <HAL_GPIO_Init+0x2c8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x1d0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a42      	ldr	r2, [pc, #264]	@ (8003a30 <HAL_GPIO_Init+0x2cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_Init+0x1cc>
 800392c:	2302      	movs	r3, #2
 800392e:	e004      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003930:	2307      	movs	r3, #7
 8003932:	e002      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_GPIO_Init+0x1d6>
 8003938:	2300      	movs	r3, #0
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	f002 0203 	and.w	r2, r2, #3
 8003940:	0092      	lsls	r2, r2, #2
 8003942:	4093      	lsls	r3, r2
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800394a:	4937      	ldr	r1, [pc, #220]	@ (8003a28 <HAL_GPIO_Init+0x2c4>)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	3302      	adds	r3, #2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800397c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039a6:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3301      	adds	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f aeaf 	bne.w	8003774 <HAL_GPIO_Init+0x10>
  }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	48000400 	.word	0x48000400
 8003a30:	48000800 	.word	0x48000800
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd ffb8 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010400 	.word	0x40010400

08003a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e08d      	b.n	8003bc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fba0 	bl	8002204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	@ 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	e006      	b.n	8003b20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d108      	bne.n	8003b3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	e007      	b.n	8003b4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	817b      	strh	r3, [r7, #10]
 8003be0:	4613      	mov	r3, r2
 8003be2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	f040 80fd 	bne.w	8003dec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_Master_Transmit+0x30>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0f6      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c08:	f7fe fe1a 	bl	8002840 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	2319      	movs	r3, #25
 8003c14:	2201      	movs	r2, #1
 8003c16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa16 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0e1      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2221      	movs	r2, #33	@ 0x21
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2210      	movs	r2, #16
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	893a      	ldrh	r2, [r7, #8]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2bff      	cmp	r3, #255	@ 0xff
 8003c5a:	d906      	bls.n	8003c6a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	22ff      	movs	r2, #255	@ 0xff
 8003c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e007      	b.n	8003c7a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d024      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003df8 <HAL_I2C_Master_Transmit+0x228>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fc11 	bl	80044ec <I2C_TransferConfig>
 8003cca:	e066      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	8979      	ldrh	r1, [r7, #10]
 8003cd4:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <HAL_I2C_Master_Transmit+0x228>)
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fc06 	bl	80044ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ce0:	e05b      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa09 	bl	80040fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07b      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d034      	beq.n	8003d9a <HAL_I2C_Master_Transmit+0x1ca>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d130      	bne.n	8003d9a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2180      	movs	r1, #128	@ 0x80
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f982 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e04d      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2bff      	cmp	r3, #255	@ 0xff
 8003d5a:	d90e      	bls.n	8003d7a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	22ff      	movs	r2, #255	@ 0xff
 8003d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	8979      	ldrh	r1, [r7, #10]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fbba 	bl	80044ec <I2C_TransferConfig>
 8003d78:	e00f      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	8979      	ldrh	r1, [r7, #10]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fba9 	bl	80044ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d19e      	bne.n	8003ce2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	6a39      	ldr	r1, [r7, #32]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f9ef 	bl	800418c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e01a      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <HAL_I2C_Master_Transmit+0x22c>)
 8003dcc:	400b      	ands	r3, r1
 8003dce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	80002000 	.word	0x80002000
 8003dfc:	fe00e800 	.word	0xfe00e800

08003e00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	4613      	mov	r3, r2
 8003e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 80db 	bne.w	8003fd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2C_Master_Receive+0x30>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0d4      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e38:	f7fe fd02 	bl	8002840 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2319      	movs	r3, #25
 8003e44:	2201      	movs	r2, #1
 8003e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8fe 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0bf      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2222      	movs	r2, #34	@ 0x22
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2210      	movs	r2, #16
 8003e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	893a      	ldrh	r2, [r7, #8]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2bff      	cmp	r3, #255	@ 0xff
 8003e8a:	d90e      	bls.n	8003eaa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	4b52      	ldr	r3, [pc, #328]	@ (8003fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fb22 	bl	80044ec <I2C_TransferConfig>
 8003ea8:	e06d      	b.n	8003f86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fb11 	bl	80044ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003eca:	e05c      	b.n	8003f86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	6a39      	ldr	r1, [r7, #32]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f99f 	bl	8004214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e07c      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d034      	beq.n	8003f86 <HAL_I2C_Master_Receive+0x186>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d130      	bne.n	8003f86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f88c 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04d      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2bff      	cmp	r3, #255	@ 0xff
 8003f46:	d90e      	bls.n	8003f66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	22ff      	movs	r2, #255	@ 0xff
 8003f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	8979      	ldrh	r1, [r7, #10]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fac4 	bl	80044ec <I2C_TransferConfig>
 8003f64:	e00f      	b.n	8003f86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fab3 	bl	80044ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d19d      	bne.n	8003ecc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	6a39      	ldr	r1, [r7, #32]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f8f9 	bl	800418c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e01a      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <HAL_I2C_Master_Receive+0x1e8>)
 8003fb8:	400b      	ands	r3, r1
 8003fba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	80002400 	.word	0x80002400
 8003fe8:	fe00e800 	.word	0xfe00e800

08003fec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d103      	bne.n	8004022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d007      	beq.n	8004040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	619a      	str	r2, [r3, #24]
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405c:	e03b      	b.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f962 	bl	800432c <I2C_IsErrorOccurred>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d02d      	beq.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fe fbe1 	bl	8002840 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x44>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d122      	bne.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d113      	bne.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00f      	b.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d0b4      	beq.n	800405e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800410a:	e033      	b.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f90b 	bl	800432c <I2C_IsErrorOccurred>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e031      	b.n	8004184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d025      	beq.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fe fb8a 	bl	8002840 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11a      	bne.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d013      	beq.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d1c4      	bne.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004198:	e02f      	b.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f8c4 	bl	800432c <I2C_IsErrorOccurred>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e02d      	b.n	800420a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fb47 	bl	8002840 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11a      	bne.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d013      	beq.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d1c8      	bne.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004224:	e071      	b.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f87e 	bl	800432c <I2C_IsErrorOccurred>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b20      	cmp	r3, #32
 8004246:	d13b      	bne.n	80042c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d138      	bne.n	80042c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d105      	bne.n	8004268 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d121      	bne.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2204      	movs	r2, #4
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2220      	movs	r2, #32
 800428a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004298:	400b      	ands	r3, r1
 800429a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
 80042b8:	e002      	b.n	80042c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80042c0:	f7fe fabe 	bl	8002840 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00f      	beq.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d002      	beq.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d083      	beq.n	8004226 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	fe00e800 	.word	0xfe00e800

0800432c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d068      	beq.n	800442a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2210      	movs	r2, #16
 800435e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004360:	e049      	b.n	80043f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d045      	beq.n	80043f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe fa69 	bl	8002840 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <I2C_IsErrorOccurred+0x54>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d13a      	bne.n	80043f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800438a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004392:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a2:	d121      	bne.n	80043e8 <I2C_IsErrorOccurred+0xbc>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043aa:	d01d      	beq.n	80043e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d01a      	beq.n	80043e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043c2:	f7fe fa3d 	bl	8002840 <HAL_GetTick>
 80043c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c8:	e00e      	b.n	80043e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043ca:	f7fe fa39 	bl	8002840 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b19      	cmp	r3, #25
 80043d6:	d907      	bls.n	80043e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f043 0320 	orr.w	r3, r3, #32
 80043de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043e6:	e006      	b.n	80043f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d1e9      	bne.n	80043ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b20      	cmp	r3, #32
 8004402:	d003      	beq.n	800440c <I2C_IsErrorOccurred+0xe0>
 8004404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0aa      	beq.n	8004362 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800440c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2220      	movs	r2, #32
 800441a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800444c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800446e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f043 0302 	orr.w	r3, r3, #2
 8004486:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01c      	beq.n	80044da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff fdaf 	bl	8004004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <I2C_IsErrorOccurred+0x1bc>)
 80044b2:	400b      	ands	r3, r1
 80044b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	@ 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	fe00e800 	.word	0xfe00e800

080044ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	4613      	mov	r3, r2
 80044fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004504:	7a7b      	ldrb	r3, [r7, #9]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800450c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	4313      	orrs	r3, r2
 8004516:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800451a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	0d5b      	lsrs	r3, r3, #21
 8004526:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800452a:	4b08      	ldr	r3, [pc, #32]	@ (800454c <I2C_TransferConfig+0x60>)
 800452c:	430b      	orrs	r3, r1
 800452e:	43db      	mvns	r3, r3
 8004530:	ea02 0103 	and.w	r1, r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	03ff63ff 	.word	0x03ff63ff

08004550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	d138      	bne.n	80045d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004570:	2302      	movs	r3, #2
 8004572:	e032      	b.n	80045da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	@ 0x24
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d139      	bne.n	8004670 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004606:	2302      	movs	r3, #2
 8004608:	e033      	b.n	8004672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2224      	movs	r2, #36	@ 0x24
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004638:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004684:	4b04      	ldr	r3, [pc, #16]	@ (8004698 <HAL_PWREx_GetVoltageRange+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40007000 	.word	0x40007000

0800469c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046aa:	d130      	bne.n	800470e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b8:	d038      	beq.n	800472c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ba:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046c2:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2232      	movs	r2, #50	@ 0x32
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0c9b      	lsrs	r3, r3, #18
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e0:	e002      	b.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e8:	4b14      	ldr	r3, [pc, #80]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f4:	d102      	bne.n	80046fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f2      	bne.n	80046e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004708:	d110      	bne.n	800472c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e00f      	b.n	800472e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471a:	d007      	beq.n	800472c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004724:	4a05      	ldr	r2, [pc, #20]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800472a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40007000 	.word	0x40007000
 8004740:	2000000c 	.word	0x2000000c
 8004744:	431bde83 	.word	0x431bde83

08004748 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f000 bc02 	b.w	8004f60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475c:	4b96      	ldr	r3, [pc, #600]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004766:	4b94      	ldr	r3, [pc, #592]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80e4 	beq.w	8004946 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_RCC_OscConfig+0x4c>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	f040 808b 	bne.w	80048a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b01      	cmp	r3, #1
 8004790:	f040 8087 	bne.w	80048a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004794:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_OscConfig+0x64>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e3d9      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	4b81      	ldr	r3, [pc, #516]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_OscConfig+0x7e>
 80047bc:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c4:	e005      	b.n	80047d2 <HAL_RCC_OscConfig+0x8a>
 80047c6:	4b7c      	ldr	r3, [pc, #496]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d223      	bcs.n	800481e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fd8c 	bl	80052f8 <RCC_SetFlashLatencyFromMSIRange>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e3ba      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ea:	4b73      	ldr	r3, [pc, #460]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a72      	ldr	r2, [pc, #456]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047f0:	f043 0308 	orr.w	r3, r3, #8
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	496d      	ldr	r1, [pc, #436]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004808:	4b6b      	ldr	r3, [pc, #428]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	4968      	ldr	r1, [pc, #416]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	e025      	b.n	800486a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481e:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4960      	ldr	r1, [pc, #384]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483c:	4b5e      	ldr	r3, [pc, #376]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	495b      	ldr	r1, [pc, #364]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fd4c 	bl	80052f8 <RCC_SetFlashLatencyFromMSIRange>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e37a      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800486a:	f000 fc81 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800486e:	4602      	mov	r2, r0
 8004870:	4b51      	ldr	r3, [pc, #324]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4950      	ldr	r1, [pc, #320]	@ (80049bc <HAL_RCC_OscConfig+0x274>)
 800487c:	5ccb      	ldrb	r3, [r1, r3]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	fa22 f303 	lsr.w	r3, r2, r3
 8004886:	4a4e      	ldr	r2, [pc, #312]	@ (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004888:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800488a:	4b4e      	ldr	r3, [pc, #312]	@ (80049c4 <HAL_RCC_OscConfig+0x27c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd ff86 	bl	80027a0 <HAL_InitTick>
 8004894:	4603      	mov	r3, r0
 8004896:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d052      	beq.n	8004944 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	e35e      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d032      	beq.n	8004910 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048aa:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a42      	ldr	r2, [pc, #264]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048b6:	f7fd ffc3 	bl	8002840 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048be:	f7fd ffbf 	bl	8002840 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e347      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048dc:	4b36      	ldr	r3, [pc, #216]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048e2:	f043 0308 	orr.w	r3, r3, #8
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4930      	ldr	r1, [pc, #192]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048fa:	4b2f      	ldr	r3, [pc, #188]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	492b      	ldr	r1, [pc, #172]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
 800490e:	e01a      	b.n	8004946 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004910:	4b29      	ldr	r3, [pc, #164]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a28      	ldr	r2, [pc, #160]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800491c:	f7fd ff90 	bl	8002840 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004924:	f7fd ff8c 	bl	8002840 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e314      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004936:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x1dc>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d073      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d005      	beq.n	8004964 <HAL_RCC_OscConfig+0x21c>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d10e      	bne.n	800497c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d10b      	bne.n	800497c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d063      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2f0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d15f      	bne.n	8004a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e2f1      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x24c>
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a0b      	ldr	r2, [pc, #44]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e025      	b.n	80049e0 <HAL_RCC_OscConfig+0x298>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800499c:	d114      	bne.n	80049c8 <HAL_RCC_OscConfig+0x280>
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a05      	ldr	r2, [pc, #20]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80049a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b03      	ldr	r3, [pc, #12]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a02      	ldr	r2, [pc, #8]	@ (80049b8 <HAL_RCC_OscConfig+0x270>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e013      	b.n	80049e0 <HAL_RCC_OscConfig+0x298>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	0800a634 	.word	0x0800a634
 80049c0:	2000000c 	.word	0x2000000c
 80049c4:	20000010 	.word	0x20000010
 80049c8:	4ba0      	ldr	r3, [pc, #640]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b9d      	ldr	r3, [pc, #628]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a9c      	ldr	r2, [pc, #624]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd ff2a 	bl	8002840 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd ff26 	bl	8002840 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e2ae      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a02:	4b92      	ldr	r3, [pc, #584]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2a8>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd ff16 	bl	8002840 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fd ff12 	bl	8002840 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e29a      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2a:	4b88      	ldr	r3, [pc, #544]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x2d0>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d060      	beq.n	8004b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x310>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d116      	bne.n	8004a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a58:	4b7c      	ldr	r3, [pc, #496]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_OscConfig+0x328>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e277      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b76      	ldr	r3, [pc, #472]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	4973      	ldr	r1, [pc, #460]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a84:	e040      	b.n	8004b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d023      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6e      	ldr	r2, [pc, #440]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fed1 	bl	8002840 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fd fecd 	bl	8002840 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e255      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab4:	4b65      	ldr	r3, [pc, #404]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b62      	ldr	r3, [pc, #392]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	495f      	ldr	r1, [pc, #380]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
 8004ad4:	e018      	b.n	8004b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a5c      	ldr	r2, [pc, #368]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fd fead 	bl	8002840 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fd fea9 	bl	8002840 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e231      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afc:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d03c      	beq.n	8004b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b22:	4a4a      	ldr	r2, [pc, #296]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd fe88 	bl	8002840 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fd fe84 	bl	8002840 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e20c      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b46:	4b41      	ldr	r3, [pc, #260]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0ef      	beq.n	8004b34 <HAL_RCC_OscConfig+0x3ec>
 8004b54:	e01b      	b.n	8004b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b56:	4b3d      	ldr	r3, [pc, #244]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b66:	f7fd fe6b 	bl	8002840 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fd fe67 	bl	8002840 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1ef      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b80:	4b32      	ldr	r3, [pc, #200]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ef      	bne.n	8004b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a6 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10d      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	4a26      	ldr	r2, [pc, #152]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb8:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc8:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <HAL_RCC_OscConfig+0x508>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d118      	bne.n	8004c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c50 <HAL_RCC_OscConfig+0x508>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_RCC_OscConfig+0x508>)
 8004bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be0:	f7fd fe2e 	bl	8002840 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fd fe2a 	bl	8002840 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1b2      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_RCC_OscConfig+0x508>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d108      	bne.n	8004c20 <HAL_RCC_OscConfig+0x4d8>
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	4a0d      	ldr	r2, [pc, #52]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c1e:	e029      	b.n	8004c74 <HAL_RCC_OscConfig+0x52c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d115      	bne.n	8004c54 <HAL_RCC_OscConfig+0x50c>
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a07      	ldr	r2, [pc, #28]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c38:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3e:	4a03      	ldr	r2, [pc, #12]	@ (8004c4c <HAL_RCC_OscConfig+0x504>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c48:	e014      	b.n	8004c74 <HAL_RCC_OscConfig+0x52c>
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	4b9a      	ldr	r3, [pc, #616]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	4a99      	ldr	r2, [pc, #612]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c64:	4b96      	ldr	r3, [pc, #600]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	4a95      	ldr	r2, [pc, #596]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d016      	beq.n	8004caa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd fde0 	bl	8002840 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fd fddc 	bl	8002840 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e162      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9a:	4b89      	ldr	r3, [pc, #548]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ed      	beq.n	8004c84 <HAL_RCC_OscConfig+0x53c>
 8004ca8:	e015      	b.n	8004cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fd fdc9 	bl	8002840 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fd fdc5 	bl	8002840 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e14b      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ed      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd6:	7ffb      	ldrb	r3, [r7, #31]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cdc:	4b78      	ldr	r3, [pc, #480]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	4a77      	ldr	r2, [pc, #476]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d03c      	beq.n	8004d6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01c      	beq.n	8004d36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cfc:	4b70      	ldr	r3, [pc, #448]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d02:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd fd98 	bl	8002840 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d14:	f7fd fd94 	bl	8002840 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e11c      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d26:	4b66      	ldr	r3, [pc, #408]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <HAL_RCC_OscConfig+0x5cc>
 8004d34:	e01b      	b.n	8004d6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d36:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d3c:	4a60      	ldr	r2, [pc, #384]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fd fd7b 	bl	8002840 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d4e:	f7fd fd77 	bl	8002840 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0ff      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d60:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ef      	bne.n	8004d4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80f3 	beq.w	8004f5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f040 80c9 	bne.w	8004f14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d82:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 0203 	and.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d12c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	3b01      	subs	r3, #1
 8004da2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d123      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d11b      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d113      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d109      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	3b01      	subs	r3, #1
 8004dea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d06b      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d062      	beq.n	8004ebc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004df6:	4b32      	ldr	r3, [pc, #200]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e0ac      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e06:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e12:	f7fd fd15 	bl	8002840 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fd11 	bl	8002840 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e099      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <HAL_RCC_OscConfig+0x77c>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e52:	0212      	lsls	r2, r2, #8
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e5a:	0852      	lsrs	r2, r2, #1
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0552      	lsls	r2, r2, #21
 8004e60:	4311      	orrs	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e66:	0852      	lsrs	r2, r2, #1
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	0652      	lsls	r2, r2, #25
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e72:	06d2      	lsls	r2, r2, #27
 8004e74:	430a      	orrs	r2, r1
 8004e76:	4912      	ldr	r1, [pc, #72]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e88:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e94:	f7fd fcd4 	bl	8002840 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd fcd0 	bl	8002840 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e058      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eba:	e050      	b.n	8004f5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e04f      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec8:	4b27      	ldr	r3, [pc, #156]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d144      	bne.n	8004f5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a23      	ldr	r2, [pc, #140]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee0:	4b21      	ldr	r3, [pc, #132]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eec:	f7fd fca8 	bl	8002840 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fca4 	bl	8002840 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e02c      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	4b18      	ldr	r3, [pc, #96]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x7ac>
 8004f12:	e024      	b.n	8004f5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	d01f      	beq.n	8004f5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a12      	ldr	r2, [pc, #72]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fd fc8b 	bl	8002840 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fd fc87 	bl	8002840 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e00f      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4905      	ldr	r1, [pc, #20]	@ (8004f68 <HAL_RCC_OscConfig+0x820>)
 8004f52:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <HAL_RCC_OscConfig+0x824>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	60cb      	str	r3, [r1, #12]
 8004f58:	e001      	b.n	8004f5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	feeefffc 	.word	0xfeeefffc

08004f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0e7      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b75      	ldr	r3, [pc, #468]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b72      	ldr	r3, [pc, #456]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	4970      	ldr	r1, [pc, #448]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0cf      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d010      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4b66      	ldr	r3, [pc, #408]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d908      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b63      	ldr	r3, [pc, #396]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4960      	ldr	r1, [pc, #384]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04c      	beq.n	8005088 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d121      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0a6      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	4b54      	ldr	r3, [pc, #336]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d115      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e09a      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005026:	4b4e      	ldr	r3, [pc, #312]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e08e      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005036:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e086      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b46      	ldr	r3, [pc, #280]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4943      	ldr	r1, [pc, #268]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fbf2 	bl	8002840 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd fbee 	bl	8002840 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e06e      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b3a      	ldr	r3, [pc, #232]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d010      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d208      	bcs.n	80050b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	492b      	ldr	r1, [pc, #172]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050b6:	4b29      	ldr	r3, [pc, #164]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d210      	bcs.n	80050e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c4:	4b25      	ldr	r3, [pc, #148]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 0207 	bic.w	r2, r3, #7
 80050cc:	4923      	ldr	r1, [pc, #140]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d4:	4b21      	ldr	r3, [pc, #132]	@ (800515c <HAL_RCC_ClockConfig+0x1ec>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e036      	b.n	8005154 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4918      	ldr	r1, [pc, #96]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005110:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4910      	ldr	r1, [pc, #64]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005124:	f000 f824 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	490b      	ldr	r1, [pc, #44]	@ (8005164 <HAL_RCC_ClockConfig+0x1f4>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	4a09      	ldr	r2, [pc, #36]	@ (8005168 <HAL_RCC_ClockConfig+0x1f8>)
 8005142:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_ClockConfig+0x1fc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fd fb29 	bl	80027a0 <HAL_InitTick>
 800514e:	4603      	mov	r3, r0
 8005150:	72fb      	strb	r3, [r7, #11]

  return status;
 8005152:	7afb      	ldrb	r3, [r7, #11]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40022000 	.word	0x40022000
 8005160:	40021000 	.word	0x40021000
 8005164:	0800a634 	.word	0x0800a634
 8005168:	2000000c 	.word	0x2000000c
 800516c:	20000010 	.word	0x20000010

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	@ 0x24
 8005174:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517e:	4b3e      	ldr	r3, [pc, #248]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005188:	4b3b      	ldr	r3, [pc, #236]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d121      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d11e      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051a4:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051b0:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e005      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051cc:	4a2b      	ldr	r2, [pc, #172]	@ (800527c <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d102      	bne.n	80051ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051e8:	4b25      	ldr	r3, [pc, #148]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x110>)
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e004      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051f4:	4b23      	ldr	r3, [pc, #140]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x114>)
 80051f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b0c      	cmp	r3, #12
 80051fc:	d134      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d003      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0xa6>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d003      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0xac>
 8005214:	e005      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005216:	4b1a      	ldr	r3, [pc, #104]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x110>)
 8005218:	617b      	str	r3, [r7, #20]
      break;
 800521a:	e005      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800521c:	4b19      	ldr	r3, [pc, #100]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x114>)
 800521e:	617b      	str	r3, [r7, #20]
      break;
 8005220:	e002      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	617b      	str	r3, [r7, #20]
      break;
 8005226:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005228:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005236:	4b10      	ldr	r3, [pc, #64]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	fb03 f202 	mul.w	r2, r3, r2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800524e:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x108>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	0e5b      	lsrs	r3, r3, #25
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	3301      	adds	r3, #1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005268:	69bb      	ldr	r3, [r7, #24]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	@ 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	0800a64c 	.word	0x0800a64c
 8005280:	00f42400 	.word	0x00f42400
 8005284:	007a1200 	.word	0x007a1200

08005288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <HAL_RCC_GetHCLKFreq+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c

080052a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052a4:	f7ff fff0 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b06      	ldr	r3, [pc, #24]	@ (80052c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4904      	ldr	r1, [pc, #16]	@ (80052c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	0800a644 	.word	0x0800a644

080052cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052d0:	f7ff ffda 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0adb      	lsrs	r3, r3, #11
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4904      	ldr	r1, [pc, #16]	@ (80052f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800a644 	.word	0x0800a644

080052f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005304:	4b2a      	ldr	r3, [pc, #168]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005310:	f7ff f9b6 	bl	8004680 <HAL_PWREx_GetVoltageRange>
 8005314:	6178      	str	r0, [r7, #20]
 8005316:	e014      	b.n	8005342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005318:	4b25      	ldr	r3, [pc, #148]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	4a24      	ldr	r2, [pc, #144]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005322:	6593      	str	r3, [r2, #88]	@ 0x58
 8005324:	4b22      	ldr	r3, [pc, #136]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005330:	f7ff f9a6 	bl	8004680 <HAL_PWREx_GetVoltageRange>
 8005334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005336:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005340:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005348:	d10b      	bne.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b80      	cmp	r3, #128	@ 0x80
 800534e:	d919      	bls.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2ba0      	cmp	r3, #160	@ 0xa0
 8005354:	d902      	bls.n	800535c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005356:	2302      	movs	r3, #2
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e013      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800535c:	2301      	movs	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e010      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b80      	cmp	r3, #128	@ 0x80
 8005366:	d902      	bls.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005368:	2303      	movs	r3, #3
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e00a      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b80      	cmp	r3, #128	@ 0x80
 8005372:	d102      	bne.n	800537a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005374:	2302      	movs	r3, #2
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e004      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b70      	cmp	r3, #112	@ 0x70
 800537e:	d101      	bne.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005380:	2301      	movs	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0207 	bic.w	r2, r3, #7
 800538c:	4909      	ldr	r1, [pc, #36]	@ (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005394:	4b07      	ldr	r3, [pc, #28]	@ (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d001      	beq.n	80053a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40022000 	.word	0x40022000

080053b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c0:	2300      	movs	r3, #0
 80053c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053c4:	2300      	movs	r3, #0
 80053c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d031      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053dc:	d01a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80053de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053e2:	d814      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ec:	d10f      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80053ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053fa:	e00c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f9ce 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800540c:	e003      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	74fb      	strb	r3, [r7, #19]
      break;
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800541c:	4b51      	ldr	r3, [pc, #324]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	494e      	ldr	r1, [pc, #312]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005432:	e001      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 809e 	beq.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800544a:	4b46      	ldr	r3, [pc, #280]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005460:	4b40      	ldr	r3, [pc, #256]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005464:	4a3f      	ldr	r2, [pc, #252]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546a:	6593      	str	r3, [r2, #88]	@ 0x58
 800546c:	4b3d      	ldr	r3, [pc, #244]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005478:	2301      	movs	r3, #1
 800547a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800547c:	4b3a      	ldr	r3, [pc, #232]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a39      	ldr	r2, [pc, #228]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005488:	f7fd f9da 	bl	8002840 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800548e:	e009      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005490:	f7fd f9d6 	bl	8002840 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d902      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	74fb      	strb	r3, [r7, #19]
        break;
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054a4:	4b30      	ldr	r3, [pc, #192]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ef      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d15a      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01e      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d019      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054de:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054fe:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fd f996 	bl	8002840 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	e00b      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005518:	f7fd f992 	bl	8002840 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005526:	4293      	cmp	r3, r2
 8005528:	d902      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	74fb      	strb	r3, [r7, #19]
            break;
 800552e:	e006      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ec      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005552:	4904      	ldr	r1, [pc, #16]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800555a:	e009      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	74bb      	strb	r3, [r7, #18]
 8005560:	e006      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000
 8005568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005570:	7c7b      	ldrb	r3, [r7, #17]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005576:	4b8a      	ldr	r3, [pc, #552]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557a:	4a89      	ldr	r2, [pc, #548]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800557c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005580:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800558e:	4b84      	ldr	r3, [pc, #528]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f023 0203 	bic.w	r2, r3, #3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	4980      	ldr	r1, [pc, #512]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b0:	4b7b      	ldr	r3, [pc, #492]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	f023 020c 	bic.w	r2, r3, #12
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	4978      	ldr	r1, [pc, #480]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d2:	4b73      	ldr	r3, [pc, #460]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	496f      	ldr	r1, [pc, #444]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f4:	4b6a      	ldr	r3, [pc, #424]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	4967      	ldr	r1, [pc, #412]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005616:	4b62      	ldr	r3, [pc, #392]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	495e      	ldr	r1, [pc, #376]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005638:	4b59      	ldr	r3, [pc, #356]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	4956      	ldr	r1, [pc, #344]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565a:	4b51      	ldr	r3, [pc, #324]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	494d      	ldr	r1, [pc, #308]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d028      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567c:	4b48      	ldr	r3, [pc, #288]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	4945      	ldr	r1, [pc, #276]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800569a:	d106      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569c:	4b40      	ldr	r3, [pc, #256]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a3f      	ldr	r2, [pc, #252]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a6:	60d3      	str	r3, [r2, #12]
 80056a8:	e011      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056b2:	d10c      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f872 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d028      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056da:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e8:	492d      	ldr	r1, [pc, #180]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056f8:	d106      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fa:	4b29      	ldr	r3, [pc, #164]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	4a28      	ldr	r2, [pc, #160]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005700:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005704:	60d3      	str	r3, [r2, #12]
 8005706:	e011      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005710:	d10c      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f843 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005722:	7cfb      	ldrb	r3, [r7, #19]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005738:	4b19      	ldr	r3, [pc, #100]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	4916      	ldr	r1, [pc, #88]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005756:	d10c      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f820 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800577e:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578c:	4904      	ldr	r1, [pc, #16]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005794:	7cbb      	ldrb	r3, [r7, #18]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000

080057a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b2:	4b74      	ldr	r3, [pc, #464]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057be:	4b71      	ldr	r3, [pc, #452]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0203 	and.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10d      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
       ||
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057d6:	4b6b      	ldr	r3, [pc, #428]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	091b      	lsrs	r3, r3, #4
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
       ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d047      	beq.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	e044      	b.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d018      	beq.n	800582a <RCCEx_PLLSAI1_Config+0x86>
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d825      	bhi.n	8005848 <RCCEx_PLLSAI1_Config+0xa4>
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d002      	beq.n	8005806 <RCCEx_PLLSAI1_Config+0x62>
 8005800:	2b02      	cmp	r3, #2
 8005802:	d009      	beq.n	8005818 <RCCEx_PLLSAI1_Config+0x74>
 8005804:	e020      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005806:	4b5f      	ldr	r3, [pc, #380]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11d      	bne.n	800584e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005816:	e01a      	b.n	800584e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005818:	4b5a      	ldr	r3, [pc, #360]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005828:	e013      	b.n	8005852 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800582a:	4b56      	ldr	r3, [pc, #344]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005836:	4b53      	ldr	r3, [pc, #332]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005846:	e006      	b.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
      break;
 800584c:	e004      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005856:	bf00      	nop
    }

    if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800585e:	4b49      	ldr	r3, [pc, #292]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	430b      	orrs	r3, r1
 8005874:	4943      	ldr	r1, [pc, #268]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005876:	4313      	orrs	r3, r2
 8005878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d17c      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005880:	4b40      	ldr	r3, [pc, #256]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3f      	ldr	r2, [pc, #252]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005886:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800588a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fc ffd8 	bl	8002840 <HAL_GetTick>
 8005890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005892:	e009      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005894:	f7fc ffd4 	bl	8002840 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
        break;
 80058a6:	e005      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058a8:	4b36      	ldr	r3, [pc, #216]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ef      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d15f      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d110      	bne.n	80058e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c0:	4b30      	ldr	r3, [pc, #192]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80058c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
 80058d0:	0211      	lsls	r1, r2, #8
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	06d2      	lsls	r2, r2, #27
 80058d8:	430a      	orrs	r2, r1
 80058da:	492a      	ldr	r1, [pc, #168]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	610b      	str	r3, [r1, #16]
 80058e0:	e027      	b.n	8005932 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d112      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058e8:	4b26      	ldr	r3, [pc, #152]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80058f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	0211      	lsls	r1, r2, #8
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6912      	ldr	r2, [r2, #16]
 80058fe:	0852      	lsrs	r2, r2, #1
 8005900:	3a01      	subs	r2, #1
 8005902:	0552      	lsls	r2, r2, #21
 8005904:	430a      	orrs	r2, r1
 8005906:	491f      	ldr	r1, [pc, #124]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]
 800590c:	e011      	b.n	8005932 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800590e:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005916:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6892      	ldr	r2, [r2, #8]
 800591e:	0211      	lsls	r1, r2, #8
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6952      	ldr	r2, [r2, #20]
 8005924:	0852      	lsrs	r2, r2, #1
 8005926:	3a01      	subs	r2, #1
 8005928:	0652      	lsls	r2, r2, #25
 800592a:	430a      	orrs	r2, r1
 800592c:	4915      	ldr	r1, [pc, #84]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a13      	ldr	r2, [pc, #76]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800593c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fc ff7f 	bl	8002840 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005944:	e009      	b.n	800595a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005946:	f7fc ff7b 	bl	8002840 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d902      	bls.n	800595a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	73fb      	strb	r3, [r7, #15]
          break;
 8005958:	e005      	b.n	8005966 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800595a:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ef      	beq.n	8005946 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	4903      	ldr	r1, [pc, #12]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40021000 	.word	0x40021000

08005988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e049      	b.n	8005a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc fcd8 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fcd8 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e03b      	b.n	8005ac8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0x4e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0x4e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	@ (8005ad8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d115      	bne.n	8005ab2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <HAL_TIM_Base_Start_IT+0xa4>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d015      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x8c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a9e:	d011      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	e008      	b.n	8005ac4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	00010007 	.word	0x00010007

08005ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e049      	b.n	8005b86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f841 	bl	8005b8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f000 fc2c 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x24>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e03c      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x3e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e02f      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e022      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x72>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e015      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x8c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e008      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07e      	b.n	8005d48 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xb6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c58:	e023      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0xc6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c68:	e01b      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Start+0xd6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c78:	e013      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_PWM_Start+0xe6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c88:	e00b      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xf6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c98:	e003      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 feee 	bl	8006a8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a26      	ldr	r2, [pc, #152]	@ (8005d50 <HAL_TIM_PWM_Start+0x1ac>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_TIM_PWM_Start+0x12a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a25      	ldr	r2, [pc, #148]	@ (8005d54 <HAL_TIM_PWM_Start+0x1b0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_TIM_PWM_Start+0x12a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <HAL_TIM_PWM_Start+0x1b4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0x12e>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <HAL_TIM_PWM_Start+0x130>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <HAL_TIM_PWM_Start+0x1ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x162>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x162>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a14      	ldr	r2, [pc, #80]	@ (8005d54 <HAL_TIM_PWM_Start+0x1b0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d115      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	4b13      	ldr	r3, [pc, #76]	@ (8005d5c <HAL_TIM_PWM_Start+0x1b8>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d015      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x1a0>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1e:	d011      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	e008      	b.n	8005d44 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e000      	b.n	8005d46 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	00010007 	.word	0x00010007

08005d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0202 	mvn.w	r2, #2
 8005d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fac7 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fab9 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 faca 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0204 	mvn.w	r2, #4
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 faa1 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa93 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 faa4 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0208 	mvn.w	r2, #8
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2204      	movs	r2, #4
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa7b 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa6d 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa7e 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d020      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa55 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa47 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa58 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0201 	mvn.w	r2, #1
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fdae 	bl	8001a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fed7 	bl	8006ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fecf 	bl	8006cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00c      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa12 	bl	8006366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0220 	mvn.w	r2, #32
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fe97 	bl	8006c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0ff      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b14      	cmp	r3, #20
 8005f9a:	f200 80f0 	bhi.w	800617e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	0800617f 	.word	0x0800617f
 8005fac:	0800617f 	.word	0x0800617f
 8005fb0:	0800617f 	.word	0x0800617f
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	0800617f 	.word	0x0800617f
 8005fbc:	0800617f 	.word	0x0800617f
 8005fc0:	0800617f 	.word	0x0800617f
 8005fc4:	0800607b 	.word	0x0800607b
 8005fc8:	0800617f 	.word	0x0800617f
 8005fcc:	0800617f 	.word	0x0800617f
 8005fd0:	0800617f 	.word	0x0800617f
 8005fd4:	080060bb 	.word	0x080060bb
 8005fd8:	0800617f 	.word	0x0800617f
 8005fdc:	0800617f 	.word	0x0800617f
 8005fe0:	0800617f 	.word	0x0800617f
 8005fe4:	080060fd 	.word	0x080060fd
 8005fe8:	0800617f 	.word	0x0800617f
 8005fec:	0800617f 	.word	0x0800617f
 8005ff0:	0800617f 	.word	0x0800617f
 8005ff4:	0800613d 	.word	0x0800613d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fa2c 	bl	800645c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0208 	orr.w	r2, r2, #8
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0204 	bic.w	r2, r2, #4
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
      break;
 8006036:	e0a5      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa88 	bl	8006554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	619a      	str	r2, [r3, #24]
      break;
 8006078:	e084      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fae1 	bl	8006648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0208 	orr.w	r2, r2, #8
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0204 	bic.w	r2, r2, #4
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	61da      	str	r2, [r3, #28]
      break;
 80060b8:	e064      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb39 	bl	8006738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	021a      	lsls	r2, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	61da      	str	r2, [r3, #28]
      break;
 80060fa:	e043      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb76 	bl	80067f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800613a:	e023      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fbae 	bl	80068a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006166:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800617c:	e002      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
      break;
 8006182:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e0b6      	b.n	8006322 <HAL_TIM_ConfigClockSource+0x18a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f0:	d03e      	beq.n	8006270 <HAL_TIM_ConfigClockSource+0xd8>
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	f200 8087 	bhi.w	8006308 <HAL_TIM_ConfigClockSource+0x170>
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fe:	f000 8086 	beq.w	800630e <HAL_TIM_ConfigClockSource+0x176>
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006206:	d87f      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006208:	2b70      	cmp	r3, #112	@ 0x70
 800620a:	d01a      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0xaa>
 800620c:	2b70      	cmp	r3, #112	@ 0x70
 800620e:	d87b      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006210:	2b60      	cmp	r3, #96	@ 0x60
 8006212:	d050      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x11e>
 8006214:	2b60      	cmp	r3, #96	@ 0x60
 8006216:	d877      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006218:	2b50      	cmp	r3, #80	@ 0x50
 800621a:	d03c      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0xfe>
 800621c:	2b50      	cmp	r3, #80	@ 0x50
 800621e:	d873      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	d058      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x13e>
 8006224:	2b40      	cmp	r3, #64	@ 0x40
 8006226:	d86f      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006228:	2b30      	cmp	r3, #48	@ 0x30
 800622a:	d064      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x15e>
 800622c:	2b30      	cmp	r3, #48	@ 0x30
 800622e:	d86b      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d060      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x15e>
 8006234:	2b20      	cmp	r3, #32
 8006236:	d867      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d05c      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x15e>
 800623c:	2b10      	cmp	r3, #16
 800623e:	d05a      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x15e>
 8006240:	e062      	b.n	8006308 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006252:	f000 fbfb 	bl	8006a4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	609a      	str	r2, [r3, #8]
      break;
 800626e:	e04f      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006280:	f000 fbe4 	bl	8006a4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006292:	609a      	str	r2, [r3, #8]
      break;
 8006294:	e03c      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a2:	461a      	mov	r2, r3
 80062a4:	f000 fb58 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2150      	movs	r1, #80	@ 0x50
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fbb1 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 80062b4:	e02c      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c2:	461a      	mov	r2, r3
 80062c4:	f000 fb77 	bl	80069b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2160      	movs	r1, #96	@ 0x60
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fba1 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 80062d4:	e01c      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 fb38 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2140      	movs	r1, #64	@ 0x40
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fb91 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 80062f4:	e00c      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f000 fb88 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 8006306:	e003      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
      break;
 800630c:	e000      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800630e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a30      	ldr	r2, [pc, #192]	@ (8006450 <TIM_Base_SetConfig+0xd4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_Base_SetConfig+0x20>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d108      	bne.n	80063ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a27      	ldr	r2, [pc, #156]	@ (8006450 <TIM_Base_SetConfig+0xd4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_Base_SetConfig+0x52>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063bc:	d007      	beq.n	80063ce <TIM_Base_SetConfig+0x52>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a24      	ldr	r2, [pc, #144]	@ (8006454 <TIM_Base_SetConfig+0xd8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_Base_SetConfig+0x52>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a23      	ldr	r2, [pc, #140]	@ (8006458 <TIM_Base_SetConfig+0xdc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d108      	bne.n	80063e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a12      	ldr	r2, [pc, #72]	@ (8006450 <TIM_Base_SetConfig+0xd4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0xa0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a11      	ldr	r2, [pc, #68]	@ (8006454 <TIM_Base_SetConfig+0xd8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0xa0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a10      	ldr	r2, [pc, #64]	@ (8006458 <TIM_Base_SetConfig+0xdc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]
  }
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400

0800645c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f023 0201 	bic.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0302 	bic.w	r3, r3, #2
 80064a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a24      	ldr	r2, [pc, #144]	@ (8006548 <TIM_OC1_SetConfig+0xec>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_OC1_SetConfig+0x70>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a23      	ldr	r2, [pc, #140]	@ (800654c <TIM_OC1_SetConfig+0xf0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC1_SetConfig+0x70>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a22      	ldr	r2, [pc, #136]	@ (8006550 <TIM_OC1_SetConfig+0xf4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10c      	bne.n	80064e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0308 	bic.w	r3, r3, #8
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f023 0304 	bic.w	r3, r3, #4
 80064e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a17      	ldr	r2, [pc, #92]	@ (8006548 <TIM_OC1_SetConfig+0xec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC1_SetConfig+0xa2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <TIM_OC1_SetConfig+0xf0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0xa2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <TIM_OC1_SetConfig+0xf4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400

08006554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f023 0210 	bic.w	r2, r3, #16
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a22      	ldr	r2, [pc, #136]	@ (800663c <TIM_OC2_SetConfig+0xe8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a19      	ldr	r2, [pc, #100]	@ (800663c <TIM_OC2_SetConfig+0xe8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_OC2_SetConfig+0x98>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a18      	ldr	r2, [pc, #96]	@ (8006640 <TIM_OC2_SetConfig+0xec>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC2_SetConfig+0x98>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <TIM_OC2_SetConfig+0xf0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d113      	bne.n	8006614 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400

08006648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a21      	ldr	r2, [pc, #132]	@ (800672c <TIM_OC3_SetConfig+0xe4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a18      	ldr	r2, [pc, #96]	@ (800672c <TIM_OC3_SetConfig+0xe4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC3_SetConfig+0x96>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <TIM_OC3_SetConfig+0xe8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC3_SetConfig+0x96>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <TIM_OC3_SetConfig+0xec>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d113      	bne.n	8006706 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	621a      	str	r2, [r3, #32]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400

08006738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a14      	ldr	r2, [pc, #80]	@ (80067e8 <TIM_OC4_SetConfig+0xb0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_OC4_SetConfig+0x74>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a13      	ldr	r2, [pc, #76]	@ (80067ec <TIM_OC4_SetConfig+0xb4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_OC4_SetConfig+0x74>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a12      	ldr	r2, [pc, #72]	@ (80067f0 <TIM_OC4_SetConfig+0xb8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d109      	bne.n	80067c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	019b      	lsls	r3, r3, #6
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400

080067f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a13      	ldr	r2, [pc, #76]	@ (8006898 <TIM_OC5_SetConfig+0xa4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_OC5_SetConfig+0x6a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a12      	ldr	r2, [pc, #72]	@ (800689c <TIM_OC5_SetConfig+0xa8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_OC5_SetConfig+0x6a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a11      	ldr	r2, [pc, #68]	@ (80068a0 <TIM_OC5_SetConfig+0xac>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d109      	bne.n	8006872 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400

080068a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	051b      	lsls	r3, r3, #20
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a14      	ldr	r2, [pc, #80]	@ (800694c <TIM_OC6_SetConfig+0xa8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d007      	beq.n	8006910 <TIM_OC6_SetConfig+0x6c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a13      	ldr	r2, [pc, #76]	@ (8006950 <TIM_OC6_SetConfig+0xac>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d003      	beq.n	8006910 <TIM_OC6_SetConfig+0x6c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a12      	ldr	r2, [pc, #72]	@ (8006954 <TIM_OC6_SetConfig+0xb0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d109      	bne.n	8006924 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400

08006958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 030a 	bic.w	r3, r3, #10
 8006994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b087      	sub	sp, #28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f023 0210 	bic.w	r2, r3, #16
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	031b      	lsls	r3, r3, #12
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f043 0307 	orr.w	r3, r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	609a      	str	r2, [r3, #8]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	021a      	lsls	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	609a      	str	r2, [r3, #8]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e04f      	b.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a21      	ldr	r2, [pc, #132]	@ (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a14      	ldr	r2, [pc, #80]	@ (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b58:	d004      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d10c      	bne.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40014000 	.word	0x40014000

08006ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e060      	b.n	8006c82 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a14      	ldr	r2, [pc, #80]	@ (8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d115      	bne.n	8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	051b      	lsls	r3, r3, #20
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40012c00 	.word	0x40012c00

08006c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e040      	b.n	8006d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fb fade 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2224      	movs	r2, #36	@ 0x24
 8006cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fade 	bl	80072d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f8af 	bl	8006e80 <UART_SetConfig>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e01b      	b.n	8006d64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb5d 	bl	800741c <UART_CheckIdleState>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d177      	bne.n	8006e74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Transmit+0x24>
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e070      	b.n	8006e76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2221      	movs	r2, #33	@ 0x21
 8006da0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da2:	f7fb fd4d 	bl	8002840 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc0:	d108      	bne.n	8006dd4 <HAL_UART_Transmit+0x68>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e003      	b.n	8006ddc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ddc:	e02f      	b.n	8006e3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2180      	movs	r1, #128	@ 0x80
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fbbf 	bl	800756c <UART_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e03b      	b.n	8006e76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e10:	b292      	uxth	r2, r2
 8006e12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	3302      	adds	r3, #2
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e007      	b.n	8006e2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1c9      	bne.n	8006dde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2140      	movs	r1, #64	@ 0x40
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fb89 	bl	800756c <UART_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e005      	b.n	8006e76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e000      	b.n	8006e76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e84:	b08a      	sub	sp, #40	@ 0x28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4bb4      	ldr	r3, [pc, #720]	@ (8007180 <UART_SetConfig+0x300>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4aa9      	ldr	r2, [pc, #676]	@ (8007184 <UART_SetConfig+0x304>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efc:	430a      	orrs	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4aa0      	ldr	r2, [pc, #640]	@ (8007188 <UART_SetConfig+0x308>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d126      	bne.n	8006f58 <UART_SetConfig+0xd8>
 8006f0a:	4ba0      	ldr	r3, [pc, #640]	@ (800718c <UART_SetConfig+0x30c>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d81b      	bhi.n	8006f50 <UART_SetConfig+0xd0>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <UART_SetConfig+0xa0>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f31 	.word	0x08006f31
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f36:	e080      	b.n	800703a <UART_SetConfig+0x1ba>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3e:	e07c      	b.n	800703a <UART_SetConfig+0x1ba>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f46:	e078      	b.n	800703a <UART_SetConfig+0x1ba>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4e:	e074      	b.n	800703a <UART_SetConfig+0x1ba>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e070      	b.n	800703a <UART_SetConfig+0x1ba>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a8c      	ldr	r2, [pc, #560]	@ (8007190 <UART_SetConfig+0x310>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d138      	bne.n	8006fd4 <UART_SetConfig+0x154>
 8006f62:	4b8a      	ldr	r3, [pc, #552]	@ (800718c <UART_SetConfig+0x30c>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	d82d      	bhi.n	8006fcc <UART_SetConfig+0x14c>
 8006f70:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0xf8>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006fad 	.word	0x08006fad
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006fcd 	.word	0x08006fcd
 8006f84:	08006fcd 	.word	0x08006fcd
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fcd 	.word	0x08006fcd
 8006f94:	08006fcd 	.word	0x08006fcd
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb2:	e042      	b.n	800703a <UART_SetConfig+0x1ba>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fba:	e03e      	b.n	800703a <UART_SetConfig+0x1ba>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc2:	e03a      	b.n	800703a <UART_SetConfig+0x1ba>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e036      	b.n	800703a <UART_SetConfig+0x1ba>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e032      	b.n	800703a <UART_SetConfig+0x1ba>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8007184 <UART_SetConfig+0x304>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d12a      	bne.n	8007034 <UART_SetConfig+0x1b4>
 8006fde:	4b6b      	ldr	r3, [pc, #428]	@ (800718c <UART_SetConfig+0x30c>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fec:	d01a      	beq.n	8007024 <UART_SetConfig+0x1a4>
 8006fee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ff2:	d81b      	bhi.n	800702c <UART_SetConfig+0x1ac>
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff8:	d00c      	beq.n	8007014 <UART_SetConfig+0x194>
 8006ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ffe:	d815      	bhi.n	800702c <UART_SetConfig+0x1ac>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <UART_SetConfig+0x18c>
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007008:	d008      	beq.n	800701c <UART_SetConfig+0x19c>
 800700a:	e00f      	b.n	800702c <UART_SetConfig+0x1ac>
 800700c:	2300      	movs	r3, #0
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e012      	b.n	800703a <UART_SetConfig+0x1ba>
 8007014:	2302      	movs	r3, #2
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e00e      	b.n	800703a <UART_SetConfig+0x1ba>
 800701c:	2304      	movs	r3, #4
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e00a      	b.n	800703a <UART_SetConfig+0x1ba>
 8007024:	2308      	movs	r3, #8
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e006      	b.n	800703a <UART_SetConfig+0x1ba>
 800702c:	2310      	movs	r3, #16
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007032:	e002      	b.n	800703a <UART_SetConfig+0x1ba>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a51      	ldr	r2, [pc, #324]	@ (8007184 <UART_SetConfig+0x304>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d17a      	bne.n	800713a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007048:	2b08      	cmp	r3, #8
 800704a:	d824      	bhi.n	8007096 <UART_SetConfig+0x216>
 800704c:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <UART_SetConfig+0x1d4>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007079 	.word	0x08007079
 8007058:	08007097 	.word	0x08007097
 800705c:	08007081 	.word	0x08007081
 8007060:	08007097 	.word	0x08007097
 8007064:	08007087 	.word	0x08007087
 8007068:	08007097 	.word	0x08007097
 800706c:	08007097 	.word	0x08007097
 8007070:	08007097 	.word	0x08007097
 8007074:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe f912 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 800707c:	61f8      	str	r0, [r7, #28]
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b44      	ldr	r3, [pc, #272]	@ (8007194 <UART_SetConfig+0x314>)
 8007082:	61fb      	str	r3, [r7, #28]
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe f873 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800708a:	61f8      	str	r0, [r7, #28]
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007092:	61fb      	str	r3, [r7, #28]
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8107 	beq.w	80072b8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d305      	bcc.n	80070c6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d903      	bls.n	80070ce <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070cc:	e0f4      	b.n	80072b8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	461c      	mov	r4, r3
 80070d4:	4615      	mov	r5, r2
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	022b      	lsls	r3, r5, #8
 80070e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070e4:	0222      	lsls	r2, r4, #8
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	6849      	ldr	r1, [r1, #4]
 80070ea:	0849      	lsrs	r1, r1, #1
 80070ec:	2000      	movs	r0, #0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4681      	mov	r9, r0
 80070f2:	eb12 0a08 	adds.w	sl, r2, r8
 80070f6:	eb43 0b09 	adc.w	fp, r3, r9
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007108:	4650      	mov	r0, sl
 800710a:	4659      	mov	r1, fp
 800710c:	f7f9 fd4c 	bl	8000ba8 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800711e:	d308      	bcc.n	8007132 <UART_SetConfig+0x2b2>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007126:	d204      	bcs.n	8007132 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	e0c2      	b.n	80072b8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007138:	e0be      	b.n	80072b8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007142:	d16a      	bne.n	800721a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007144:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007148:	2b08      	cmp	r3, #8
 800714a:	d834      	bhi.n	80071b6 <UART_SetConfig+0x336>
 800714c:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <UART_SetConfig+0x2d4>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007179 	.word	0x08007179
 8007158:	08007199 	.word	0x08007199
 800715c:	080071a1 	.word	0x080071a1
 8007160:	080071b7 	.word	0x080071b7
 8007164:	080071a7 	.word	0x080071a7
 8007168:	080071b7 	.word	0x080071b7
 800716c:	080071b7 	.word	0x080071b7
 8007170:	080071b7 	.word	0x080071b7
 8007174:	080071af 	.word	0x080071af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fe f892 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 800717c:	61f8      	str	r0, [r7, #28]
        break;
 800717e:	e020      	b.n	80071c2 <UART_SetConfig+0x342>
 8007180:	efff69f3 	.word	0xefff69f3
 8007184:	40008000 	.word	0x40008000
 8007188:	40013800 	.word	0x40013800
 800718c:	40021000 	.word	0x40021000
 8007190:	40004400 	.word	0x40004400
 8007194:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007198:	f7fe f898 	bl	80052cc <HAL_RCC_GetPCLK2Freq>
 800719c:	61f8      	str	r0, [r7, #28]
        break;
 800719e:	e010      	b.n	80071c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a0:	4b4c      	ldr	r3, [pc, #304]	@ (80072d4 <UART_SetConfig+0x454>)
 80071a2:	61fb      	str	r3, [r7, #28]
        break;
 80071a4:	e00d      	b.n	80071c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a6:	f7fd ffe3 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 80071aa:	61f8      	str	r0, [r7, #28]
        break;
 80071ac:	e009      	b.n	80071c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071b2:	61fb      	str	r3, [r7, #28]
        break;
 80071b4:	e005      	b.n	80071c2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d077      	beq.n	80072b8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	005a      	lsls	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b0f      	cmp	r3, #15
 80071e2:	d916      	bls.n	8007212 <UART_SetConfig+0x392>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ea:	d212      	bcs.n	8007212 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f023 030f 	bic.w	r3, r3, #15
 80071f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	b29a      	uxth	r2, r3
 8007202:	8afb      	ldrh	r3, [r7, #22]
 8007204:	4313      	orrs	r3, r2
 8007206:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	8afa      	ldrh	r2, [r7, #22]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e052      	b.n	80072b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007218:	e04e      	b.n	80072b8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800721e:	2b08      	cmp	r3, #8
 8007220:	d827      	bhi.n	8007272 <UART_SetConfig+0x3f2>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0x3a8>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800724d 	.word	0x0800724d
 800722c:	08007255 	.word	0x08007255
 8007230:	0800725d 	.word	0x0800725d
 8007234:	08007273 	.word	0x08007273
 8007238:	08007263 	.word	0x08007263
 800723c:	08007273 	.word	0x08007273
 8007240:	08007273 	.word	0x08007273
 8007244:	08007273 	.word	0x08007273
 8007248:	0800726b 	.word	0x0800726b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fe f828 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8007250:	61f8      	str	r0, [r7, #28]
        break;
 8007252:	e014      	b.n	800727e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007254:	f7fe f83a 	bl	80052cc <HAL_RCC_GetPCLK2Freq>
 8007258:	61f8      	str	r0, [r7, #28]
        break;
 800725a:	e010      	b.n	800727e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800725c:	4b1d      	ldr	r3, [pc, #116]	@ (80072d4 <UART_SetConfig+0x454>)
 800725e:	61fb      	str	r3, [r7, #28]
        break;
 8007260:	e00d      	b.n	800727e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007262:	f7fd ff85 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8007266:	61f8      	str	r0, [r7, #28]
        break;
 8007268:	e009      	b.n	800727e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726e:	61fb      	str	r3, [r7, #28]
        break;
 8007270:	e005      	b.n	800727e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800727c:	bf00      	nop
    }

    if (pclk != 0U)
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d019      	beq.n	80072b8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085a      	lsrs	r2, r3, #1
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	441a      	add	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d909      	bls.n	80072b2 <UART_SetConfig+0x432>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a4:	d205      	bcs.n	80072b2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	e002      	b.n	80072b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	@ 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d2:	bf00      	nop
 80072d4:	00f42400 	.word	0x00f42400

080072d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01a      	beq.n	80073ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d6:	d10a      	bne.n	80073ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	605a      	str	r2, [r3, #4]
  }
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b098      	sub	sp, #96	@ 0x60
 8007420:	af02      	add	r7, sp, #8
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800742c:	f7fb fa08 	bl	8002840 <HAL_GetTick>
 8007430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d12e      	bne.n	800749e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f88c 	bl	800756c <UART_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d021      	beq.n	800749e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800746e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007478:	647b      	str	r3, [r7, #68]	@ 0x44
 800747a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800747e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e062      	b.n	8007564 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d149      	bne.n	8007540 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b4:	2200      	movs	r2, #0
 80074b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f856 	bl	800756c <UART_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d03c      	beq.n	8007540 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	623b      	str	r3, [r7, #32]
   return(result);
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60fb      	str	r3, [r7, #12]
   return(result);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3308      	adds	r3, #8
 8007516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007518:	61fa      	str	r2, [r7, #28]
 800751a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	69b9      	ldr	r1, [r7, #24]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	617b      	str	r3, [r7, #20]
   return(result);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e011      	b.n	8007564 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3758      	adds	r7, #88	@ 0x58
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800757c:	e04f      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d04b      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007586:	f7fb f95b 	bl	8002840 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	429a      	cmp	r2, r3
 8007594:	d302      	bcc.n	800759c <UART_WaitOnFlagUntilTimeout+0x30>
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e04e      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d037      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b80      	cmp	r3, #128	@ 0x80
 80075b2:	d034      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b40      	cmp	r3, #64	@ 0x40
 80075b8:	d031      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d110      	bne.n	80075ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2208      	movs	r2, #8
 80075ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f838 	bl	8007646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2208      	movs	r2, #8
 80075da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e029      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f8:	d111      	bne.n	800761e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f81e 	bl	8007646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e00f      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	bf0c      	ite	eq
 800762e:	2301      	moveq	r3, #1
 8007630:	2300      	movne	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	429a      	cmp	r2, r3
 800763a:	d0a0      	beq.n	800757e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007646:	b480      	push	{r7}
 8007648:	b095      	sub	sp, #84	@ 0x54
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800766c:	643b      	str	r3, [r7, #64]	@ 0x40
 800766e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e6      	bne.n	800764e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f023 0301 	bic.w	r3, r3, #1
 8007696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3308      	adds	r3, #8
 800769e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e5      	bne.n	8007680 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d118      	bne.n	80076ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f023 0310 	bic.w	r3, r3, #16
 80076d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007702:	bf00      	nop
 8007704:	3754      	adds	r7, #84	@ 0x54
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <__cvt>:
 800770e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007712:	ec57 6b10 	vmov	r6, r7, d0
 8007716:	2f00      	cmp	r7, #0
 8007718:	460c      	mov	r4, r1
 800771a:	4619      	mov	r1, r3
 800771c:	463b      	mov	r3, r7
 800771e:	bfbb      	ittet	lt
 8007720:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007724:	461f      	movlt	r7, r3
 8007726:	2300      	movge	r3, #0
 8007728:	232d      	movlt	r3, #45	@ 0x2d
 800772a:	700b      	strb	r3, [r1, #0]
 800772c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800772e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007732:	4691      	mov	r9, r2
 8007734:	f023 0820 	bic.w	r8, r3, #32
 8007738:	bfbc      	itt	lt
 800773a:	4632      	movlt	r2, r6
 800773c:	4616      	movlt	r6, r2
 800773e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007742:	d005      	beq.n	8007750 <__cvt+0x42>
 8007744:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007748:	d100      	bne.n	800774c <__cvt+0x3e>
 800774a:	3401      	adds	r4, #1
 800774c:	2102      	movs	r1, #2
 800774e:	e000      	b.n	8007752 <__cvt+0x44>
 8007750:	2103      	movs	r1, #3
 8007752:	ab03      	add	r3, sp, #12
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	ab02      	add	r3, sp, #8
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	ec47 6b10 	vmov	d0, r6, r7
 800775e:	4653      	mov	r3, sl
 8007760:	4622      	mov	r2, r4
 8007762:	f000 ff3d 	bl	80085e0 <_dtoa_r>
 8007766:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800776a:	4605      	mov	r5, r0
 800776c:	d119      	bne.n	80077a2 <__cvt+0x94>
 800776e:	f019 0f01 	tst.w	r9, #1
 8007772:	d00e      	beq.n	8007792 <__cvt+0x84>
 8007774:	eb00 0904 	add.w	r9, r0, r4
 8007778:	2200      	movs	r2, #0
 800777a:	2300      	movs	r3, #0
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f9 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007784:	b108      	cbz	r0, 800778a <__cvt+0x7c>
 8007786:	f8cd 900c 	str.w	r9, [sp, #12]
 800778a:	2230      	movs	r2, #48	@ 0x30
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	454b      	cmp	r3, r9
 8007790:	d31e      	bcc.n	80077d0 <__cvt+0xc2>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007796:	1b5b      	subs	r3, r3, r5
 8007798:	4628      	mov	r0, r5
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	b004      	add	sp, #16
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077a6:	eb00 0904 	add.w	r9, r0, r4
 80077aa:	d1e5      	bne.n	8007778 <__cvt+0x6a>
 80077ac:	7803      	ldrb	r3, [r0, #0]
 80077ae:	2b30      	cmp	r3, #48	@ 0x30
 80077b0:	d10a      	bne.n	80077c8 <__cvt+0xba>
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80077be:	b918      	cbnz	r0, 80077c8 <__cvt+0xba>
 80077c0:	f1c4 0401 	rsb	r4, r4, #1
 80077c4:	f8ca 4000 	str.w	r4, [sl]
 80077c8:	f8da 3000 	ldr.w	r3, [sl]
 80077cc:	4499      	add	r9, r3
 80077ce:	e7d3      	b.n	8007778 <__cvt+0x6a>
 80077d0:	1c59      	adds	r1, r3, #1
 80077d2:	9103      	str	r1, [sp, #12]
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	e7d9      	b.n	800778c <__cvt+0x7e>

080077d8 <__exponent>:
 80077d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077da:	2900      	cmp	r1, #0
 80077dc:	bfba      	itte	lt
 80077de:	4249      	neglt	r1, r1
 80077e0:	232d      	movlt	r3, #45	@ 0x2d
 80077e2:	232b      	movge	r3, #43	@ 0x2b
 80077e4:	2909      	cmp	r1, #9
 80077e6:	7002      	strb	r2, [r0, #0]
 80077e8:	7043      	strb	r3, [r0, #1]
 80077ea:	dd29      	ble.n	8007840 <__exponent+0x68>
 80077ec:	f10d 0307 	add.w	r3, sp, #7
 80077f0:	461d      	mov	r5, r3
 80077f2:	270a      	movs	r7, #10
 80077f4:	461a      	mov	r2, r3
 80077f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80077fa:	fb07 1416 	mls	r4, r7, r6, r1
 80077fe:	3430      	adds	r4, #48	@ 0x30
 8007800:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007804:	460c      	mov	r4, r1
 8007806:	2c63      	cmp	r4, #99	@ 0x63
 8007808:	f103 33ff 	add.w	r3, r3, #4294967295
 800780c:	4631      	mov	r1, r6
 800780e:	dcf1      	bgt.n	80077f4 <__exponent+0x1c>
 8007810:	3130      	adds	r1, #48	@ 0x30
 8007812:	1e94      	subs	r4, r2, #2
 8007814:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007818:	1c41      	adds	r1, r0, #1
 800781a:	4623      	mov	r3, r4
 800781c:	42ab      	cmp	r3, r5
 800781e:	d30a      	bcc.n	8007836 <__exponent+0x5e>
 8007820:	f10d 0309 	add.w	r3, sp, #9
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	42ac      	cmp	r4, r5
 8007828:	bf88      	it	hi
 800782a:	2300      	movhi	r3, #0
 800782c:	3302      	adds	r3, #2
 800782e:	4403      	add	r3, r0
 8007830:	1a18      	subs	r0, r3, r0
 8007832:	b003      	add	sp, #12
 8007834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007836:	f813 6b01 	ldrb.w	r6, [r3], #1
 800783a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800783e:	e7ed      	b.n	800781c <__exponent+0x44>
 8007840:	2330      	movs	r3, #48	@ 0x30
 8007842:	3130      	adds	r1, #48	@ 0x30
 8007844:	7083      	strb	r3, [r0, #2]
 8007846:	70c1      	strb	r1, [r0, #3]
 8007848:	1d03      	adds	r3, r0, #4
 800784a:	e7f1      	b.n	8007830 <__exponent+0x58>

0800784c <_printf_float>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	b08d      	sub	sp, #52	@ 0x34
 8007852:	460c      	mov	r4, r1
 8007854:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007858:	4616      	mov	r6, r2
 800785a:	461f      	mov	r7, r3
 800785c:	4605      	mov	r5, r0
 800785e:	f000 fdbd 	bl	80083dc <_localeconv_r>
 8007862:	6803      	ldr	r3, [r0, #0]
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	4618      	mov	r0, r3
 8007868:	f7f8 fd02 	bl	8000270 <strlen>
 800786c:	2300      	movs	r3, #0
 800786e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007870:	f8d8 3000 	ldr.w	r3, [r8]
 8007874:	9005      	str	r0, [sp, #20]
 8007876:	3307      	adds	r3, #7
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	f103 0208 	add.w	r2, r3, #8
 8007880:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007884:	f8d4 b000 	ldr.w	fp, [r4]
 8007888:	f8c8 2000 	str.w	r2, [r8]
 800788c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007890:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007894:	9307      	str	r3, [sp, #28]
 8007896:	f8cd 8018 	str.w	r8, [sp, #24]
 800789a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800789e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078a2:	4b9c      	ldr	r3, [pc, #624]	@ (8007b14 <_printf_float+0x2c8>)
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	f7f9 f940 	bl	8000b2c <__aeabi_dcmpun>
 80078ac:	bb70      	cbnz	r0, 800790c <_printf_float+0xc0>
 80078ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078b2:	4b98      	ldr	r3, [pc, #608]	@ (8007b14 <_printf_float+0x2c8>)
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	f7f9 f91a 	bl	8000af0 <__aeabi_dcmple>
 80078bc:	bb30      	cbnz	r0, 800790c <_printf_float+0xc0>
 80078be:	2200      	movs	r2, #0
 80078c0:	2300      	movs	r3, #0
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f9 f909 	bl	8000adc <__aeabi_dcmplt>
 80078ca:	b110      	cbz	r0, 80078d2 <_printf_float+0x86>
 80078cc:	232d      	movs	r3, #45	@ 0x2d
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d2:	4a91      	ldr	r2, [pc, #580]	@ (8007b18 <_printf_float+0x2cc>)
 80078d4:	4b91      	ldr	r3, [pc, #580]	@ (8007b1c <_printf_float+0x2d0>)
 80078d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078da:	bf8c      	ite	hi
 80078dc:	4690      	movhi	r8, r2
 80078de:	4698      	movls	r8, r3
 80078e0:	2303      	movs	r3, #3
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	f02b 0304 	bic.w	r3, fp, #4
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	f04f 0900 	mov.w	r9, #0
 80078ee:	9700      	str	r7, [sp, #0]
 80078f0:	4633      	mov	r3, r6
 80078f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078f4:	4621      	mov	r1, r4
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 f9d2 	bl	8007ca0 <_printf_common>
 80078fc:	3001      	adds	r0, #1
 80078fe:	f040 808d 	bne.w	8007a1c <_printf_float+0x1d0>
 8007902:	f04f 30ff 	mov.w	r0, #4294967295
 8007906:	b00d      	add	sp, #52	@ 0x34
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	4640      	mov	r0, r8
 8007912:	4649      	mov	r1, r9
 8007914:	f7f9 f90a 	bl	8000b2c <__aeabi_dcmpun>
 8007918:	b140      	cbz	r0, 800792c <_printf_float+0xe0>
 800791a:	464b      	mov	r3, r9
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfbc      	itt	lt
 8007920:	232d      	movlt	r3, #45	@ 0x2d
 8007922:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007926:	4a7e      	ldr	r2, [pc, #504]	@ (8007b20 <_printf_float+0x2d4>)
 8007928:	4b7e      	ldr	r3, [pc, #504]	@ (8007b24 <_printf_float+0x2d8>)
 800792a:	e7d4      	b.n	80078d6 <_printf_float+0x8a>
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007932:	9206      	str	r2, [sp, #24]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	d13b      	bne.n	80079b0 <_printf_float+0x164>
 8007938:	2306      	movs	r3, #6
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007940:	2300      	movs	r3, #0
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	ab0a      	add	r3, sp, #40	@ 0x28
 8007948:	e9cd a301 	strd	sl, r3, [sp, #4]
 800794c:	ab09      	add	r3, sp, #36	@ 0x24
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6861      	ldr	r1, [r4, #4]
 8007952:	ec49 8b10 	vmov	d0, r8, r9
 8007956:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800795a:	4628      	mov	r0, r5
 800795c:	f7ff fed7 	bl	800770e <__cvt>
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007964:	2b47      	cmp	r3, #71	@ 0x47
 8007966:	4680      	mov	r8, r0
 8007968:	d129      	bne.n	80079be <_printf_float+0x172>
 800796a:	1cc8      	adds	r0, r1, #3
 800796c:	db02      	blt.n	8007974 <_printf_float+0x128>
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	4299      	cmp	r1, r3
 8007972:	dd41      	ble.n	80079f8 <_printf_float+0x1ac>
 8007974:	f1aa 0a02 	sub.w	sl, sl, #2
 8007978:	fa5f fa8a 	uxtb.w	sl, sl
 800797c:	3901      	subs	r1, #1
 800797e:	4652      	mov	r2, sl
 8007980:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007984:	9109      	str	r1, [sp, #36]	@ 0x24
 8007986:	f7ff ff27 	bl	80077d8 <__exponent>
 800798a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800798c:	1813      	adds	r3, r2, r0
 800798e:	2a01      	cmp	r2, #1
 8007990:	4681      	mov	r9, r0
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	dc02      	bgt.n	800799c <_printf_float+0x150>
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	07d2      	lsls	r2, r2, #31
 800799a:	d501      	bpl.n	80079a0 <_printf_float+0x154>
 800799c:	3301      	adds	r3, #1
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0a2      	beq.n	80078ee <_printf_float+0xa2>
 80079a8:	232d      	movs	r3, #45	@ 0x2d
 80079aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ae:	e79e      	b.n	80078ee <_printf_float+0xa2>
 80079b0:	9a06      	ldr	r2, [sp, #24]
 80079b2:	2a47      	cmp	r2, #71	@ 0x47
 80079b4:	d1c2      	bne.n	800793c <_printf_float+0xf0>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1c0      	bne.n	800793c <_printf_float+0xf0>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e7bd      	b.n	800793a <_printf_float+0xee>
 80079be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079c2:	d9db      	bls.n	800797c <_printf_float+0x130>
 80079c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079c8:	d118      	bne.n	80079fc <_printf_float+0x1b0>
 80079ca:	2900      	cmp	r1, #0
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	dd0b      	ble.n	80079e8 <_printf_float+0x19c>
 80079d0:	6121      	str	r1, [r4, #16]
 80079d2:	b913      	cbnz	r3, 80079da <_printf_float+0x18e>
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	07d0      	lsls	r0, r2, #31
 80079d8:	d502      	bpl.n	80079e0 <_printf_float+0x194>
 80079da:	3301      	adds	r3, #1
 80079dc:	440b      	add	r3, r1
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079e2:	f04f 0900 	mov.w	r9, #0
 80079e6:	e7db      	b.n	80079a0 <_printf_float+0x154>
 80079e8:	b913      	cbnz	r3, 80079f0 <_printf_float+0x1a4>
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	07d2      	lsls	r2, r2, #31
 80079ee:	d501      	bpl.n	80079f4 <_printf_float+0x1a8>
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7f4      	b.n	80079de <_printf_float+0x192>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e7f2      	b.n	80079de <_printf_float+0x192>
 80079f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fe:	4299      	cmp	r1, r3
 8007a00:	db05      	blt.n	8007a0e <_printf_float+0x1c2>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	6121      	str	r1, [r4, #16]
 8007a06:	07d8      	lsls	r0, r3, #31
 8007a08:	d5ea      	bpl.n	80079e0 <_printf_float+0x194>
 8007a0a:	1c4b      	adds	r3, r1, #1
 8007a0c:	e7e7      	b.n	80079de <_printf_float+0x192>
 8007a0e:	2900      	cmp	r1, #0
 8007a10:	bfd4      	ite	le
 8007a12:	f1c1 0202 	rsble	r2, r1, #2
 8007a16:	2201      	movgt	r2, #1
 8007a18:	4413      	add	r3, r2
 8007a1a:	e7e0      	b.n	80079de <_printf_float+0x192>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	055a      	lsls	r2, r3, #21
 8007a20:	d407      	bmi.n	8007a32 <_printf_float+0x1e6>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	4642      	mov	r2, r8
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d12b      	bne.n	8007a88 <_printf_float+0x23c>
 8007a30:	e767      	b.n	8007902 <_printf_float+0xb6>
 8007a32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a36:	f240 80dd 	bls.w	8007bf4 <_printf_float+0x3a8>
 8007a3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	f7f9 f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d033      	beq.n	8007ab2 <_printf_float+0x266>
 8007a4a:	4a37      	ldr	r2, [pc, #220]	@ (8007b28 <_printf_float+0x2dc>)
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f af54 	beq.w	8007902 <_printf_float+0xb6>
 8007a5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a5e:	4543      	cmp	r3, r8
 8007a60:	db02      	blt.n	8007a68 <_printf_float+0x21c>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	07d8      	lsls	r0, r3, #31
 8007a66:	d50f      	bpl.n	8007a88 <_printf_float+0x23c>
 8007a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f af45 	beq.w	8007902 <_printf_float+0xb6>
 8007a78:	f04f 0900 	mov.w	r9, #0
 8007a7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a80:	f104 0a1a 	add.w	sl, r4, #26
 8007a84:	45c8      	cmp	r8, r9
 8007a86:	dc09      	bgt.n	8007a9c <_printf_float+0x250>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	079b      	lsls	r3, r3, #30
 8007a8c:	f100 8103 	bmi.w	8007c96 <_printf_float+0x44a>
 8007a90:	68e0      	ldr	r0, [r4, #12]
 8007a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a94:	4298      	cmp	r0, r3
 8007a96:	bfb8      	it	lt
 8007a98:	4618      	movlt	r0, r3
 8007a9a:	e734      	b.n	8007906 <_printf_float+0xba>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4652      	mov	r2, sl
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f af2b 	beq.w	8007902 <_printf_float+0xb6>
 8007aac:	f109 0901 	add.w	r9, r9, #1
 8007ab0:	e7e8      	b.n	8007a84 <_printf_float+0x238>
 8007ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dc39      	bgt.n	8007b2c <_printf_float+0x2e0>
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <_printf_float+0x2dc>)
 8007aba:	2301      	movs	r3, #1
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f af1d 	beq.w	8007902 <_printf_float+0xb6>
 8007ac8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007acc:	ea59 0303 	orrs.w	r3, r9, r3
 8007ad0:	d102      	bne.n	8007ad8 <_printf_float+0x28c>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	07d9      	lsls	r1, r3, #31
 8007ad6:	d5d7      	bpl.n	8007a88 <_printf_float+0x23c>
 8007ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007adc:	4631      	mov	r1, r6
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b8      	blx	r7
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f43f af0d 	beq.w	8007902 <_printf_float+0xb6>
 8007ae8:	f04f 0a00 	mov.w	sl, #0
 8007aec:	f104 0b1a 	add.w	fp, r4, #26
 8007af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af2:	425b      	negs	r3, r3
 8007af4:	4553      	cmp	r3, sl
 8007af6:	dc01      	bgt.n	8007afc <_printf_float+0x2b0>
 8007af8:	464b      	mov	r3, r9
 8007afa:	e793      	b.n	8007a24 <_printf_float+0x1d8>
 8007afc:	2301      	movs	r3, #1
 8007afe:	465a      	mov	r2, fp
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f aefb 	beq.w	8007902 <_printf_float+0xb6>
 8007b0c:	f10a 0a01 	add.w	sl, sl, #1
 8007b10:	e7ee      	b.n	8007af0 <_printf_float+0x2a4>
 8007b12:	bf00      	nop
 8007b14:	7fefffff 	.word	0x7fefffff
 8007b18:	0800a680 	.word	0x0800a680
 8007b1c:	0800a67c 	.word	0x0800a67c
 8007b20:	0800a688 	.word	0x0800a688
 8007b24:	0800a684 	.word	0x0800a684
 8007b28:	0800a68c 	.word	0x0800a68c
 8007b2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b32:	4553      	cmp	r3, sl
 8007b34:	bfa8      	it	ge
 8007b36:	4653      	movge	r3, sl
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	dc36      	bgt.n	8007bac <_printf_float+0x360>
 8007b3e:	f04f 0b00 	mov.w	fp, #0
 8007b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b46:	f104 021a 	add.w	r2, r4, #26
 8007b4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b4c:	9306      	str	r3, [sp, #24]
 8007b4e:	eba3 0309 	sub.w	r3, r3, r9
 8007b52:	455b      	cmp	r3, fp
 8007b54:	dc31      	bgt.n	8007bba <_printf_float+0x36e>
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	459a      	cmp	sl, r3
 8007b5a:	dc3a      	bgt.n	8007bd2 <_printf_float+0x386>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	07da      	lsls	r2, r3, #31
 8007b60:	d437      	bmi.n	8007bd2 <_printf_float+0x386>
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	ebaa 0903 	sub.w	r9, sl, r3
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b6e:	4599      	cmp	r9, r3
 8007b70:	bfa8      	it	ge
 8007b72:	4699      	movge	r9, r3
 8007b74:	f1b9 0f00 	cmp.w	r9, #0
 8007b78:	dc33      	bgt.n	8007be2 <_printf_float+0x396>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b82:	f104 0b1a 	add.w	fp, r4, #26
 8007b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b88:	ebaa 0303 	sub.w	r3, sl, r3
 8007b8c:	eba3 0309 	sub.w	r3, r3, r9
 8007b90:	4543      	cmp	r3, r8
 8007b92:	f77f af79 	ble.w	8007a88 <_printf_float+0x23c>
 8007b96:	2301      	movs	r3, #1
 8007b98:	465a      	mov	r2, fp
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f43f aeae 	beq.w	8007902 <_printf_float+0xb6>
 8007ba6:	f108 0801 	add.w	r8, r8, #1
 8007baa:	e7ec      	b.n	8007b86 <_printf_float+0x33a>
 8007bac:	4642      	mov	r2, r8
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1c2      	bne.n	8007b3e <_printf_float+0x2f2>
 8007bb8:	e6a3      	b.n	8007902 <_printf_float+0xb6>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	9206      	str	r2, [sp, #24]
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f ae9c 	beq.w	8007902 <_printf_float+0xb6>
 8007bca:	9a06      	ldr	r2, [sp, #24]
 8007bcc:	f10b 0b01 	add.w	fp, fp, #1
 8007bd0:	e7bb      	b.n	8007b4a <_printf_float+0x2fe>
 8007bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d1c0      	bne.n	8007b62 <_printf_float+0x316>
 8007be0:	e68f      	b.n	8007902 <_printf_float+0xb6>
 8007be2:	9a06      	ldr	r2, [sp, #24]
 8007be4:	464b      	mov	r3, r9
 8007be6:	4442      	add	r2, r8
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d1c3      	bne.n	8007b7a <_printf_float+0x32e>
 8007bf2:	e686      	b.n	8007902 <_printf_float+0xb6>
 8007bf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bf8:	f1ba 0f01 	cmp.w	sl, #1
 8007bfc:	dc01      	bgt.n	8007c02 <_printf_float+0x3b6>
 8007bfe:	07db      	lsls	r3, r3, #31
 8007c00:	d536      	bpl.n	8007c70 <_printf_float+0x424>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4642      	mov	r2, r8
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae78 	beq.w	8007902 <_printf_float+0xb6>
 8007c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f ae70 	beq.w	8007902 <_printf_float+0xb6>
 8007c22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c26:	2200      	movs	r2, #0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c2e:	f7f8 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c32:	b9c0      	cbnz	r0, 8007c66 <_printf_float+0x41a>
 8007c34:	4653      	mov	r3, sl
 8007c36:	f108 0201 	add.w	r2, r8, #1
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d10c      	bne.n	8007c5e <_printf_float+0x412>
 8007c44:	e65d      	b.n	8007902 <_printf_float+0xb6>
 8007c46:	2301      	movs	r3, #1
 8007c48:	465a      	mov	r2, fp
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae56 	beq.w	8007902 <_printf_float+0xb6>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	45d0      	cmp	r8, sl
 8007c5c:	dbf3      	blt.n	8007c46 <_printf_float+0x3fa>
 8007c5e:	464b      	mov	r3, r9
 8007c60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c64:	e6df      	b.n	8007a26 <_printf_float+0x1da>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	f104 0b1a 	add.w	fp, r4, #26
 8007c6e:	e7f4      	b.n	8007c5a <_printf_float+0x40e>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4642      	mov	r2, r8
 8007c74:	e7e1      	b.n	8007c3a <_printf_float+0x3ee>
 8007c76:	2301      	movs	r3, #1
 8007c78:	464a      	mov	r2, r9
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae3e 	beq.w	8007902 <_printf_float+0xb6>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	4543      	cmp	r3, r8
 8007c92:	dcf0      	bgt.n	8007c76 <_printf_float+0x42a>
 8007c94:	e6fc      	b.n	8007a90 <_printf_float+0x244>
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	f104 0919 	add.w	r9, r4, #25
 8007c9e:	e7f4      	b.n	8007c8a <_printf_float+0x43e>

08007ca0 <_printf_common>:
 8007ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	4698      	mov	r8, r3
 8007ca8:	688a      	ldr	r2, [r1, #8]
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bfb8      	it	lt
 8007cb4:	4613      	movlt	r3, r2
 8007cb6:	6033      	str	r3, [r6, #0]
 8007cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	b10a      	cbz	r2, 8007cc6 <_printf_common+0x26>
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	0699      	lsls	r1, r3, #26
 8007cca:	bf42      	ittt	mi
 8007ccc:	6833      	ldrmi	r3, [r6, #0]
 8007cce:	3302      	addmi	r3, #2
 8007cd0:	6033      	strmi	r3, [r6, #0]
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	f015 0506 	ands.w	r5, r5, #6
 8007cd8:	d106      	bne.n	8007ce8 <_printf_common+0x48>
 8007cda:	f104 0a19 	add.w	sl, r4, #25
 8007cde:	68e3      	ldr	r3, [r4, #12]
 8007ce0:	6832      	ldr	r2, [r6, #0]
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc26      	bgt.n	8007d36 <_printf_common+0x96>
 8007ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cec:	6822      	ldr	r2, [r4, #0]
 8007cee:	3b00      	subs	r3, #0
 8007cf0:	bf18      	it	ne
 8007cf2:	2301      	movne	r3, #1
 8007cf4:	0692      	lsls	r2, r2, #26
 8007cf6:	d42b      	bmi.n	8007d50 <_printf_common+0xb0>
 8007cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	4638      	mov	r0, r7
 8007d00:	47c8      	blx	r9
 8007d02:	3001      	adds	r0, #1
 8007d04:	d01e      	beq.n	8007d44 <_printf_common+0xa4>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	6922      	ldr	r2, [r4, #16]
 8007d0a:	f003 0306 	and.w	r3, r3, #6
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	bf02      	ittt	eq
 8007d12:	68e5      	ldreq	r5, [r4, #12]
 8007d14:	6833      	ldreq	r3, [r6, #0]
 8007d16:	1aed      	subeq	r5, r5, r3
 8007d18:	68a3      	ldr	r3, [r4, #8]
 8007d1a:	bf0c      	ite	eq
 8007d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d20:	2500      	movne	r5, #0
 8007d22:	4293      	cmp	r3, r2
 8007d24:	bfc4      	itt	gt
 8007d26:	1a9b      	subgt	r3, r3, r2
 8007d28:	18ed      	addgt	r5, r5, r3
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	341a      	adds	r4, #26
 8007d2e:	42b5      	cmp	r5, r6
 8007d30:	d11a      	bne.n	8007d68 <_printf_common+0xc8>
 8007d32:	2000      	movs	r0, #0
 8007d34:	e008      	b.n	8007d48 <_printf_common+0xa8>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4652      	mov	r2, sl
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	47c8      	blx	r9
 8007d40:	3001      	adds	r0, #1
 8007d42:	d103      	bne.n	8007d4c <_printf_common+0xac>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	e7c6      	b.n	8007cde <_printf_common+0x3e>
 8007d50:	18e1      	adds	r1, r4, r3
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	2030      	movs	r0, #48	@ 0x30
 8007d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d5a:	4422      	add	r2, r4
 8007d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d64:	3302      	adds	r3, #2
 8007d66:	e7c7      	b.n	8007cf8 <_printf_common+0x58>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	4638      	mov	r0, r7
 8007d70:	47c8      	blx	r9
 8007d72:	3001      	adds	r0, #1
 8007d74:	d0e6      	beq.n	8007d44 <_printf_common+0xa4>
 8007d76:	3601      	adds	r6, #1
 8007d78:	e7d9      	b.n	8007d2e <_printf_common+0x8e>
	...

08007d7c <_printf_i>:
 8007d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	7e0f      	ldrb	r7, [r1, #24]
 8007d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d84:	2f78      	cmp	r7, #120	@ 0x78
 8007d86:	4691      	mov	r9, r2
 8007d88:	4680      	mov	r8, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d92:	d807      	bhi.n	8007da4 <_printf_i+0x28>
 8007d94:	2f62      	cmp	r7, #98	@ 0x62
 8007d96:	d80a      	bhi.n	8007dae <_printf_i+0x32>
 8007d98:	2f00      	cmp	r7, #0
 8007d9a:	f000 80d1 	beq.w	8007f40 <_printf_i+0x1c4>
 8007d9e:	2f58      	cmp	r7, #88	@ 0x58
 8007da0:	f000 80b8 	beq.w	8007f14 <_printf_i+0x198>
 8007da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dac:	e03a      	b.n	8007e24 <_printf_i+0xa8>
 8007dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007db2:	2b15      	cmp	r3, #21
 8007db4:	d8f6      	bhi.n	8007da4 <_printf_i+0x28>
 8007db6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dbc <_printf_i+0x40>)
 8007db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007da5 	.word	0x08007da5
 8007dc8:	08007da5 	.word	0x08007da5
 8007dcc:	08007da5 	.word	0x08007da5
 8007dd0:	08007da5 	.word	0x08007da5
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007da5 	.word	0x08007da5
 8007ddc:	08007da5 	.word	0x08007da5
 8007de0:	08007da5 	.word	0x08007da5
 8007de4:	08007da5 	.word	0x08007da5
 8007de8:	08007f27 	.word	0x08007f27
 8007dec:	08007e53 	.word	0x08007e53
 8007df0:	08007ee1 	.word	0x08007ee1
 8007df4:	08007da5 	.word	0x08007da5
 8007df8:	08007da5 	.word	0x08007da5
 8007dfc:	08007f49 	.word	0x08007f49
 8007e00:	08007da5 	.word	0x08007da5
 8007e04:	08007e53 	.word	0x08007e53
 8007e08:	08007da5 	.word	0x08007da5
 8007e0c:	08007da5 	.word	0x08007da5
 8007e10:	08007ee9 	.word	0x08007ee9
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6032      	str	r2, [r6, #0]
 8007e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e24:	2301      	movs	r3, #1
 8007e26:	e09c      	b.n	8007f62 <_printf_i+0x1e6>
 8007e28:	6833      	ldr	r3, [r6, #0]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	1d19      	adds	r1, r3, #4
 8007e2e:	6031      	str	r1, [r6, #0]
 8007e30:	0606      	lsls	r6, r0, #24
 8007e32:	d501      	bpl.n	8007e38 <_printf_i+0xbc>
 8007e34:	681d      	ldr	r5, [r3, #0]
 8007e36:	e003      	b.n	8007e40 <_printf_i+0xc4>
 8007e38:	0645      	lsls	r5, r0, #25
 8007e3a:	d5fb      	bpl.n	8007e34 <_printf_i+0xb8>
 8007e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	da03      	bge.n	8007e4c <_printf_i+0xd0>
 8007e44:	232d      	movs	r3, #45	@ 0x2d
 8007e46:	426d      	negs	r5, r5
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e4c:	4858      	ldr	r0, [pc, #352]	@ (8007fb0 <_printf_i+0x234>)
 8007e4e:	230a      	movs	r3, #10
 8007e50:	e011      	b.n	8007e76 <_printf_i+0xfa>
 8007e52:	6821      	ldr	r1, [r4, #0]
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	0608      	lsls	r0, r1, #24
 8007e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e5c:	d402      	bmi.n	8007e64 <_printf_i+0xe8>
 8007e5e:	0649      	lsls	r1, r1, #25
 8007e60:	bf48      	it	mi
 8007e62:	b2ad      	uxthmi	r5, r5
 8007e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e66:	4852      	ldr	r0, [pc, #328]	@ (8007fb0 <_printf_i+0x234>)
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	bf14      	ite	ne
 8007e6c:	230a      	movne	r3, #10
 8007e6e:	2308      	moveq	r3, #8
 8007e70:	2100      	movs	r1, #0
 8007e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e76:	6866      	ldr	r6, [r4, #4]
 8007e78:	60a6      	str	r6, [r4, #8]
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	db05      	blt.n	8007e8a <_printf_i+0x10e>
 8007e7e:	6821      	ldr	r1, [r4, #0]
 8007e80:	432e      	orrs	r6, r5
 8007e82:	f021 0104 	bic.w	r1, r1, #4
 8007e86:	6021      	str	r1, [r4, #0]
 8007e88:	d04b      	beq.n	8007f22 <_printf_i+0x1a6>
 8007e8a:	4616      	mov	r6, r2
 8007e8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e90:	fb03 5711 	mls	r7, r3, r1, r5
 8007e94:	5dc7      	ldrb	r7, [r0, r7]
 8007e96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e9a:	462f      	mov	r7, r5
 8007e9c:	42bb      	cmp	r3, r7
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	d9f4      	bls.n	8007e8c <_printf_i+0x110>
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d10b      	bne.n	8007ebe <_printf_i+0x142>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	07df      	lsls	r7, r3, #31
 8007eaa:	d508      	bpl.n	8007ebe <_printf_i+0x142>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	6861      	ldr	r1, [r4, #4]
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	bfde      	ittt	le
 8007eb4:	2330      	movle	r3, #48	@ 0x30
 8007eb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ebe:	1b92      	subs	r2, r2, r6
 8007ec0:	6122      	str	r2, [r4, #16]
 8007ec2:	f8cd a000 	str.w	sl, [sp]
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	aa03      	add	r2, sp, #12
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4640      	mov	r0, r8
 8007ece:	f7ff fee7 	bl	8007ca0 <_printf_common>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d14a      	bne.n	8007f6c <_printf_i+0x1f0>
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	b004      	add	sp, #16
 8007edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	f043 0320 	orr.w	r3, r3, #32
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	4832      	ldr	r0, [pc, #200]	@ (8007fb4 <_printf_i+0x238>)
 8007eea:	2778      	movs	r7, #120	@ 0x78
 8007eec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	6831      	ldr	r1, [r6, #0]
 8007ef4:	061f      	lsls	r7, r3, #24
 8007ef6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007efa:	d402      	bmi.n	8007f02 <_printf_i+0x186>
 8007efc:	065f      	lsls	r7, r3, #25
 8007efe:	bf48      	it	mi
 8007f00:	b2ad      	uxthmi	r5, r5
 8007f02:	6031      	str	r1, [r6, #0]
 8007f04:	07d9      	lsls	r1, r3, #31
 8007f06:	bf44      	itt	mi
 8007f08:	f043 0320 	orrmi.w	r3, r3, #32
 8007f0c:	6023      	strmi	r3, [r4, #0]
 8007f0e:	b11d      	cbz	r5, 8007f18 <_printf_i+0x19c>
 8007f10:	2310      	movs	r3, #16
 8007f12:	e7ad      	b.n	8007e70 <_printf_i+0xf4>
 8007f14:	4826      	ldr	r0, [pc, #152]	@ (8007fb0 <_printf_i+0x234>)
 8007f16:	e7e9      	b.n	8007eec <_printf_i+0x170>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	f023 0320 	bic.w	r3, r3, #32
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	e7f6      	b.n	8007f10 <_printf_i+0x194>
 8007f22:	4616      	mov	r6, r2
 8007f24:	e7bd      	b.n	8007ea2 <_printf_i+0x126>
 8007f26:	6833      	ldr	r3, [r6, #0]
 8007f28:	6825      	ldr	r5, [r4, #0]
 8007f2a:	6961      	ldr	r1, [r4, #20]
 8007f2c:	1d18      	adds	r0, r3, #4
 8007f2e:	6030      	str	r0, [r6, #0]
 8007f30:	062e      	lsls	r6, r5, #24
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	d501      	bpl.n	8007f3a <_printf_i+0x1be>
 8007f36:	6019      	str	r1, [r3, #0]
 8007f38:	e002      	b.n	8007f40 <_printf_i+0x1c4>
 8007f3a:	0668      	lsls	r0, r5, #25
 8007f3c:	d5fb      	bpl.n	8007f36 <_printf_i+0x1ba>
 8007f3e:	8019      	strh	r1, [r3, #0]
 8007f40:	2300      	movs	r3, #0
 8007f42:	6123      	str	r3, [r4, #16]
 8007f44:	4616      	mov	r6, r2
 8007f46:	e7bc      	b.n	8007ec2 <_printf_i+0x146>
 8007f48:	6833      	ldr	r3, [r6, #0]
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	6032      	str	r2, [r6, #0]
 8007f4e:	681e      	ldr	r6, [r3, #0]
 8007f50:	6862      	ldr	r2, [r4, #4]
 8007f52:	2100      	movs	r1, #0
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7f8 f93b 	bl	80001d0 <memchr>
 8007f5a:	b108      	cbz	r0, 8007f60 <_printf_i+0x1e4>
 8007f5c:	1b80      	subs	r0, r0, r6
 8007f5e:	6060      	str	r0, [r4, #4]
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	2300      	movs	r3, #0
 8007f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f6a:	e7aa      	b.n	8007ec2 <_printf_i+0x146>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4649      	mov	r1, r9
 8007f72:	4640      	mov	r0, r8
 8007f74:	47d0      	blx	sl
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0ad      	beq.n	8007ed6 <_printf_i+0x15a>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	079b      	lsls	r3, r3, #30
 8007f7e:	d413      	bmi.n	8007fa8 <_printf_i+0x22c>
 8007f80:	68e0      	ldr	r0, [r4, #12]
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	4298      	cmp	r0, r3
 8007f86:	bfb8      	it	lt
 8007f88:	4618      	movlt	r0, r3
 8007f8a:	e7a6      	b.n	8007eda <_printf_i+0x15e>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4632      	mov	r2, r6
 8007f90:	4649      	mov	r1, r9
 8007f92:	4640      	mov	r0, r8
 8007f94:	47d0      	blx	sl
 8007f96:	3001      	adds	r0, #1
 8007f98:	d09d      	beq.n	8007ed6 <_printf_i+0x15a>
 8007f9a:	3501      	adds	r5, #1
 8007f9c:	68e3      	ldr	r3, [r4, #12]
 8007f9e:	9903      	ldr	r1, [sp, #12]
 8007fa0:	1a5b      	subs	r3, r3, r1
 8007fa2:	42ab      	cmp	r3, r5
 8007fa4:	dcf2      	bgt.n	8007f8c <_printf_i+0x210>
 8007fa6:	e7eb      	b.n	8007f80 <_printf_i+0x204>
 8007fa8:	2500      	movs	r5, #0
 8007faa:	f104 0619 	add.w	r6, r4, #25
 8007fae:	e7f5      	b.n	8007f9c <_printf_i+0x220>
 8007fb0:	0800a68e 	.word	0x0800a68e
 8007fb4:	0800a69f 	.word	0x0800a69f

08007fb8 <std>:
 8007fb8:	2300      	movs	r3, #0
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc6:	6083      	str	r3, [r0, #8]
 8007fc8:	8181      	strh	r1, [r0, #12]
 8007fca:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fcc:	81c2      	strh	r2, [r0, #14]
 8007fce:	6183      	str	r3, [r0, #24]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	305c      	adds	r0, #92	@ 0x5c
 8007fd6:	f000 f9f9 	bl	80083cc <memset>
 8007fda:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <std+0x58>)
 8007fdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <std+0x5c>)
 8007fe0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <std+0x60>)
 8007fe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <std+0x64>)
 8007fe8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fea:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <std+0x68>)
 8007fec:	6224      	str	r4, [r4, #32]
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d006      	beq.n	8008000 <std+0x48>
 8007ff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ff6:	4294      	cmp	r4, r2
 8007ff8:	d002      	beq.n	8008000 <std+0x48>
 8007ffa:	33d0      	adds	r3, #208	@ 0xd0
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	d105      	bne.n	800800c <std+0x54>
 8008000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008008:	f000 ba5c 	b.w	80084c4 <__retarget_lock_init_recursive>
 800800c:	bd10      	pop	{r4, pc}
 800800e:	bf00      	nop
 8008010:	0800821d 	.word	0x0800821d
 8008014:	0800823f 	.word	0x0800823f
 8008018:	08008277 	.word	0x08008277
 800801c:	0800829b 	.word	0x0800829b
 8008020:	20000474 	.word	0x20000474

08008024 <stdio_exit_handler>:
 8008024:	4a02      	ldr	r2, [pc, #8]	@ (8008030 <stdio_exit_handler+0xc>)
 8008026:	4903      	ldr	r1, [pc, #12]	@ (8008034 <stdio_exit_handler+0x10>)
 8008028:	4803      	ldr	r0, [pc, #12]	@ (8008038 <stdio_exit_handler+0x14>)
 800802a:	f000 b869 	b.w	8008100 <_fwalk_sglue>
 800802e:	bf00      	nop
 8008030:	20000018 	.word	0x20000018
 8008034:	08009e01 	.word	0x08009e01
 8008038:	20000028 	.word	0x20000028

0800803c <cleanup_stdio>:
 800803c:	6841      	ldr	r1, [r0, #4]
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <cleanup_stdio+0x34>)
 8008040:	4299      	cmp	r1, r3
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	d001      	beq.n	800804c <cleanup_stdio+0x10>
 8008048:	f001 feda 	bl	8009e00 <_fflush_r>
 800804c:	68a1      	ldr	r1, [r4, #8]
 800804e:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <cleanup_stdio+0x38>)
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <cleanup_stdio+0x1e>
 8008054:	4620      	mov	r0, r4
 8008056:	f001 fed3 	bl	8009e00 <_fflush_r>
 800805a:	68e1      	ldr	r1, [r4, #12]
 800805c:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <cleanup_stdio+0x3c>)
 800805e:	4299      	cmp	r1, r3
 8008060:	d004      	beq.n	800806c <cleanup_stdio+0x30>
 8008062:	4620      	mov	r0, r4
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f001 beca 	b.w	8009e00 <_fflush_r>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	bf00      	nop
 8008070:	20000474 	.word	0x20000474
 8008074:	200004dc 	.word	0x200004dc
 8008078:	20000544 	.word	0x20000544

0800807c <global_stdio_init.part.0>:
 800807c:	b510      	push	{r4, lr}
 800807e:	4b0b      	ldr	r3, [pc, #44]	@ (80080ac <global_stdio_init.part.0+0x30>)
 8008080:	4c0b      	ldr	r4, [pc, #44]	@ (80080b0 <global_stdio_init.part.0+0x34>)
 8008082:	4a0c      	ldr	r2, [pc, #48]	@ (80080b4 <global_stdio_init.part.0+0x38>)
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	4620      	mov	r0, r4
 8008088:	2200      	movs	r2, #0
 800808a:	2104      	movs	r1, #4
 800808c:	f7ff ff94 	bl	8007fb8 <std>
 8008090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008094:	2201      	movs	r2, #1
 8008096:	2109      	movs	r1, #9
 8008098:	f7ff ff8e 	bl	8007fb8 <std>
 800809c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080a0:	2202      	movs	r2, #2
 80080a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a6:	2112      	movs	r1, #18
 80080a8:	f7ff bf86 	b.w	8007fb8 <std>
 80080ac:	200005ac 	.word	0x200005ac
 80080b0:	20000474 	.word	0x20000474
 80080b4:	08008025 	.word	0x08008025

080080b8 <__sfp_lock_acquire>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__sfp_lock_acquire+0x8>)
 80080ba:	f000 ba04 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 80080be:	bf00      	nop
 80080c0:	200005b5 	.word	0x200005b5

080080c4 <__sfp_lock_release>:
 80080c4:	4801      	ldr	r0, [pc, #4]	@ (80080cc <__sfp_lock_release+0x8>)
 80080c6:	f000 b9ff 	b.w	80084c8 <__retarget_lock_release_recursive>
 80080ca:	bf00      	nop
 80080cc:	200005b5 	.word	0x200005b5

080080d0 <__sinit>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4604      	mov	r4, r0
 80080d4:	f7ff fff0 	bl	80080b8 <__sfp_lock_acquire>
 80080d8:	6a23      	ldr	r3, [r4, #32]
 80080da:	b11b      	cbz	r3, 80080e4 <__sinit+0x14>
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	f7ff bff0 	b.w	80080c4 <__sfp_lock_release>
 80080e4:	4b04      	ldr	r3, [pc, #16]	@ (80080f8 <__sinit+0x28>)
 80080e6:	6223      	str	r3, [r4, #32]
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <__sinit+0x2c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f5      	bne.n	80080dc <__sinit+0xc>
 80080f0:	f7ff ffc4 	bl	800807c <global_stdio_init.part.0>
 80080f4:	e7f2      	b.n	80080dc <__sinit+0xc>
 80080f6:	bf00      	nop
 80080f8:	0800803d 	.word	0x0800803d
 80080fc:	200005ac 	.word	0x200005ac

08008100 <_fwalk_sglue>:
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4607      	mov	r7, r0
 8008106:	4688      	mov	r8, r1
 8008108:	4614      	mov	r4, r2
 800810a:	2600      	movs	r6, #0
 800810c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008110:	f1b9 0901 	subs.w	r9, r9, #1
 8008114:	d505      	bpl.n	8008122 <_fwalk_sglue+0x22>
 8008116:	6824      	ldr	r4, [r4, #0]
 8008118:	2c00      	cmp	r4, #0
 800811a:	d1f7      	bne.n	800810c <_fwalk_sglue+0xc>
 800811c:	4630      	mov	r0, r6
 800811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d907      	bls.n	8008138 <_fwalk_sglue+0x38>
 8008128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812c:	3301      	adds	r3, #1
 800812e:	d003      	beq.n	8008138 <_fwalk_sglue+0x38>
 8008130:	4629      	mov	r1, r5
 8008132:	4638      	mov	r0, r7
 8008134:	47c0      	blx	r8
 8008136:	4306      	orrs	r6, r0
 8008138:	3568      	adds	r5, #104	@ 0x68
 800813a:	e7e9      	b.n	8008110 <_fwalk_sglue+0x10>

0800813c <iprintf>:
 800813c:	b40f      	push	{r0, r1, r2, r3}
 800813e:	b507      	push	{r0, r1, r2, lr}
 8008140:	4906      	ldr	r1, [pc, #24]	@ (800815c <iprintf+0x20>)
 8008142:	ab04      	add	r3, sp, #16
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	6881      	ldr	r1, [r0, #8]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f001 fcbb 	bl	8009ac8 <_vfiprintf_r>
 8008152:	b003      	add	sp, #12
 8008154:	f85d eb04 	ldr.w	lr, [sp], #4
 8008158:	b004      	add	sp, #16
 800815a:	4770      	bx	lr
 800815c:	20000024 	.word	0x20000024

08008160 <_puts_r>:
 8008160:	6a03      	ldr	r3, [r0, #32]
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	6884      	ldr	r4, [r0, #8]
 8008166:	4605      	mov	r5, r0
 8008168:	460e      	mov	r6, r1
 800816a:	b90b      	cbnz	r3, 8008170 <_puts_r+0x10>
 800816c:	f7ff ffb0 	bl	80080d0 <__sinit>
 8008170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d405      	bmi.n	8008182 <_puts_r+0x22>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	0598      	lsls	r0, r3, #22
 800817a:	d402      	bmi.n	8008182 <_puts_r+0x22>
 800817c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817e:	f000 f9a2 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	0719      	lsls	r1, r3, #28
 8008186:	d502      	bpl.n	800818e <_puts_r+0x2e>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d135      	bne.n	80081fa <_puts_r+0x9a>
 800818e:	4621      	mov	r1, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 f8c5 	bl	8008320 <__swsetup_r>
 8008196:	b380      	cbz	r0, 80081fa <_puts_r+0x9a>
 8008198:	f04f 35ff 	mov.w	r5, #4294967295
 800819c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800819e:	07da      	lsls	r2, r3, #31
 80081a0:	d405      	bmi.n	80081ae <_puts_r+0x4e>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	059b      	lsls	r3, r3, #22
 80081a6:	d402      	bmi.n	80081ae <_puts_r+0x4e>
 80081a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081aa:	f000 f98d 	bl	80084c8 <__retarget_lock_release_recursive>
 80081ae:	4628      	mov	r0, r5
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	da04      	bge.n	80081c0 <_puts_r+0x60>
 80081b6:	69a2      	ldr	r2, [r4, #24]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	dc17      	bgt.n	80081ec <_puts_r+0x8c>
 80081bc:	290a      	cmp	r1, #10
 80081be:	d015      	beq.n	80081ec <_puts_r+0x8c>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	6022      	str	r2, [r4, #0]
 80081c6:	7019      	strb	r1, [r3, #0]
 80081c8:	68a3      	ldr	r3, [r4, #8]
 80081ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081ce:	3b01      	subs	r3, #1
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d1ed      	bne.n	80081b2 <_puts_r+0x52>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da11      	bge.n	80081fe <_puts_r+0x9e>
 80081da:	4622      	mov	r2, r4
 80081dc:	210a      	movs	r1, #10
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 f85f 	bl	80082a2 <__swbuf_r>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d0d7      	beq.n	8008198 <_puts_r+0x38>
 80081e8:	250a      	movs	r5, #10
 80081ea:	e7d7      	b.n	800819c <_puts_r+0x3c>
 80081ec:	4622      	mov	r2, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f857 	bl	80082a2 <__swbuf_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	d1e7      	bne.n	80081c8 <_puts_r+0x68>
 80081f8:	e7ce      	b.n	8008198 <_puts_r+0x38>
 80081fa:	3e01      	subs	r6, #1
 80081fc:	e7e4      	b.n	80081c8 <_puts_r+0x68>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	220a      	movs	r2, #10
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	e7ee      	b.n	80081e8 <_puts_r+0x88>
	...

0800820c <puts>:
 800820c:	4b02      	ldr	r3, [pc, #8]	@ (8008218 <puts+0xc>)
 800820e:	4601      	mov	r1, r0
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	f7ff bfa5 	b.w	8008160 <_puts_r>
 8008216:	bf00      	nop
 8008218:	20000024 	.word	0x20000024

0800821c <__sread>:
 800821c:	b510      	push	{r4, lr}
 800821e:	460c      	mov	r4, r1
 8008220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008224:	f000 f900 	bl	8008428 <_read_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	bfab      	itete	ge
 800822c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800822e:	89a3      	ldrhlt	r3, [r4, #12]
 8008230:	181b      	addge	r3, r3, r0
 8008232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008236:	bfac      	ite	ge
 8008238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800823a:	81a3      	strhlt	r3, [r4, #12]
 800823c:	bd10      	pop	{r4, pc}

0800823e <__swrite>:
 800823e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008242:	461f      	mov	r7, r3
 8008244:	898b      	ldrh	r3, [r1, #12]
 8008246:	05db      	lsls	r3, r3, #23
 8008248:	4605      	mov	r5, r0
 800824a:	460c      	mov	r4, r1
 800824c:	4616      	mov	r6, r2
 800824e:	d505      	bpl.n	800825c <__swrite+0x1e>
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	2302      	movs	r3, #2
 8008256:	2200      	movs	r2, #0
 8008258:	f000 f8d4 	bl	8008404 <_lseek_r>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	4632      	mov	r2, r6
 800826a:	463b      	mov	r3, r7
 800826c:	4628      	mov	r0, r5
 800826e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	f000 b8eb 	b.w	800844c <_write_r>

08008276 <__sseek>:
 8008276:	b510      	push	{r4, lr}
 8008278:	460c      	mov	r4, r1
 800827a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827e:	f000 f8c1 	bl	8008404 <_lseek_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	bf15      	itete	ne
 8008288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800828a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800828e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008292:	81a3      	strheq	r3, [r4, #12]
 8008294:	bf18      	it	ne
 8008296:	81a3      	strhne	r3, [r4, #12]
 8008298:	bd10      	pop	{r4, pc}

0800829a <__sclose>:
 800829a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829e:	f000 b8a1 	b.w	80083e4 <_close_r>

080082a2 <__swbuf_r>:
 80082a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a4:	460e      	mov	r6, r1
 80082a6:	4614      	mov	r4, r2
 80082a8:	4605      	mov	r5, r0
 80082aa:	b118      	cbz	r0, 80082b4 <__swbuf_r+0x12>
 80082ac:	6a03      	ldr	r3, [r0, #32]
 80082ae:	b90b      	cbnz	r3, 80082b4 <__swbuf_r+0x12>
 80082b0:	f7ff ff0e 	bl	80080d0 <__sinit>
 80082b4:	69a3      	ldr	r3, [r4, #24]
 80082b6:	60a3      	str	r3, [r4, #8]
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	071a      	lsls	r2, r3, #28
 80082bc:	d501      	bpl.n	80082c2 <__swbuf_r+0x20>
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	b943      	cbnz	r3, 80082d4 <__swbuf_r+0x32>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 f82b 	bl	8008320 <__swsetup_r>
 80082ca:	b118      	cbz	r0, 80082d4 <__swbuf_r+0x32>
 80082cc:	f04f 37ff 	mov.w	r7, #4294967295
 80082d0:	4638      	mov	r0, r7
 80082d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	1a98      	subs	r0, r3, r2
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	b2f6      	uxtb	r6, r6
 80082de:	4283      	cmp	r3, r0
 80082e0:	4637      	mov	r7, r6
 80082e2:	dc05      	bgt.n	80082f0 <__swbuf_r+0x4e>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f001 fd8a 	bl	8009e00 <_fflush_r>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d1ed      	bne.n	80082cc <__swbuf_r+0x2a>
 80082f0:	68a3      	ldr	r3, [r4, #8]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	701e      	strb	r6, [r3, #0]
 80082fe:	6962      	ldr	r2, [r4, #20]
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	429a      	cmp	r2, r3
 8008304:	d004      	beq.n	8008310 <__swbuf_r+0x6e>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	07db      	lsls	r3, r3, #31
 800830a:	d5e1      	bpl.n	80082d0 <__swbuf_r+0x2e>
 800830c:	2e0a      	cmp	r6, #10
 800830e:	d1df      	bne.n	80082d0 <__swbuf_r+0x2e>
 8008310:	4621      	mov	r1, r4
 8008312:	4628      	mov	r0, r5
 8008314:	f001 fd74 	bl	8009e00 <_fflush_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	d0d9      	beq.n	80082d0 <__swbuf_r+0x2e>
 800831c:	e7d6      	b.n	80082cc <__swbuf_r+0x2a>
	...

08008320 <__swsetup_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4b29      	ldr	r3, [pc, #164]	@ (80083c8 <__swsetup_r+0xa8>)
 8008324:	4605      	mov	r5, r0
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	460c      	mov	r4, r1
 800832a:	b118      	cbz	r0, 8008334 <__swsetup_r+0x14>
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b90b      	cbnz	r3, 8008334 <__swsetup_r+0x14>
 8008330:	f7ff fece 	bl	80080d0 <__sinit>
 8008334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008338:	0719      	lsls	r1, r3, #28
 800833a:	d422      	bmi.n	8008382 <__swsetup_r+0x62>
 800833c:	06da      	lsls	r2, r3, #27
 800833e:	d407      	bmi.n	8008350 <__swsetup_r+0x30>
 8008340:	2209      	movs	r2, #9
 8008342:	602a      	str	r2, [r5, #0]
 8008344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e033      	b.n	80083b8 <__swsetup_r+0x98>
 8008350:	0758      	lsls	r0, r3, #29
 8008352:	d512      	bpl.n	800837a <__swsetup_r+0x5a>
 8008354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008356:	b141      	cbz	r1, 800836a <__swsetup_r+0x4a>
 8008358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__swsetup_r+0x46>
 8008360:	4628      	mov	r0, r5
 8008362:	f000 ff0d 	bl	8009180 <_free_r>
 8008366:	2300      	movs	r3, #0
 8008368:	6363      	str	r3, [r4, #52]	@ 0x34
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	2300      	movs	r3, #0
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f043 0308 	orr.w	r3, r3, #8
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	b94b      	cbnz	r3, 800839a <__swsetup_r+0x7a>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800838c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008390:	d003      	beq.n	800839a <__swsetup_r+0x7a>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f001 fd81 	bl	8009e9c <__smakebuf_r>
 800839a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839e:	f013 0201 	ands.w	r2, r3, #1
 80083a2:	d00a      	beq.n	80083ba <__swsetup_r+0x9a>
 80083a4:	2200      	movs	r2, #0
 80083a6:	60a2      	str	r2, [r4, #8]
 80083a8:	6962      	ldr	r2, [r4, #20]
 80083aa:	4252      	negs	r2, r2
 80083ac:	61a2      	str	r2, [r4, #24]
 80083ae:	6922      	ldr	r2, [r4, #16]
 80083b0:	b942      	cbnz	r2, 80083c4 <__swsetup_r+0xa4>
 80083b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083b6:	d1c5      	bne.n	8008344 <__swsetup_r+0x24>
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
 80083ba:	0799      	lsls	r1, r3, #30
 80083bc:	bf58      	it	pl
 80083be:	6962      	ldrpl	r2, [r4, #20]
 80083c0:	60a2      	str	r2, [r4, #8]
 80083c2:	e7f4      	b.n	80083ae <__swsetup_r+0x8e>
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7f7      	b.n	80083b8 <__swsetup_r+0x98>
 80083c8:	20000024 	.word	0x20000024

080083cc <memset>:
 80083cc:	4402      	add	r2, r0
 80083ce:	4603      	mov	r3, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <_localeconv_r>:
 80083dc:	4800      	ldr	r0, [pc, #0]	@ (80083e0 <_localeconv_r+0x4>)
 80083de:	4770      	bx	lr
 80083e0:	20000164 	.word	0x20000164

080083e4 <_close_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_close_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7fa f918 	bl	8002624 <_close>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_close_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_close_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	200005b0 	.word	0x200005b0

08008404 <_lseek_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	@ (8008424 <_lseek_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7fa f92d 	bl	8002672 <_lseek>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_lseek_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_lseek_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	200005b0 	.word	0x200005b0

08008428 <_read_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	@ (8008448 <_read_r+0x20>)
 800842c:	4604      	mov	r4, r0
 800842e:	4608      	mov	r0, r1
 8008430:	4611      	mov	r1, r2
 8008432:	2200      	movs	r2, #0
 8008434:	602a      	str	r2, [r5, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f7fa f8bb 	bl	80025b2 <_read>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_read_r+0x1e>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_read_r+0x1e>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	200005b0 	.word	0x200005b0

0800844c <_write_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	@ (800846c <_write_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7fa f8c6 	bl	80025ec <_write>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_write_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_write_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	200005b0 	.word	0x200005b0

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	@ (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000024 	.word	0x20000024

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	@ (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	@ (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	@ (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	@ (80084c0 <__libc_init_array+0x44>)
 8008490:	f001 fe30 	bl	800a0f4 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	0800a9fc 	.word	0x0800a9fc
 80084b8:	0800a9fc 	.word	0x0800a9fc
 80084bc:	0800a9fc 	.word	0x0800a9fc
 80084c0:	0800aa00 	.word	0x0800aa00

080084c4 <__retarget_lock_init_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_acquire_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_release_recursive>:
 80084c8:	4770      	bx	lr

080084ca <quorem>:
 80084ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ce:	6903      	ldr	r3, [r0, #16]
 80084d0:	690c      	ldr	r4, [r1, #16]
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	4607      	mov	r7, r0
 80084d6:	db7e      	blt.n	80085d6 <quorem+0x10c>
 80084d8:	3c01      	subs	r4, #1
 80084da:	f101 0814 	add.w	r8, r1, #20
 80084de:	00a3      	lsls	r3, r4, #2
 80084e0:	f100 0514 	add.w	r5, r0, #20
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084f4:	3301      	adds	r3, #1
 80084f6:	429a      	cmp	r2, r3
 80084f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008500:	d32e      	bcc.n	8008560 <quorem+0x96>
 8008502:	f04f 0a00 	mov.w	sl, #0
 8008506:	46c4      	mov	ip, r8
 8008508:	46ae      	mov	lr, r5
 800850a:	46d3      	mov	fp, sl
 800850c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008510:	b298      	uxth	r0, r3
 8008512:	fb06 a000 	mla	r0, r6, r0, sl
 8008516:	0c02      	lsrs	r2, r0, #16
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	fb06 2303 	mla	r3, r6, r3, r2
 800851e:	f8de 2000 	ldr.w	r2, [lr]
 8008522:	b280      	uxth	r0, r0
 8008524:	b292      	uxth	r2, r2
 8008526:	1a12      	subs	r2, r2, r0
 8008528:	445a      	add	r2, fp
 800852a:	f8de 0000 	ldr.w	r0, [lr]
 800852e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008532:	b29b      	uxth	r3, r3
 8008534:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008538:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800853c:	b292      	uxth	r2, r2
 800853e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008542:	45e1      	cmp	r9, ip
 8008544:	f84e 2b04 	str.w	r2, [lr], #4
 8008548:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800854c:	d2de      	bcs.n	800850c <quorem+0x42>
 800854e:	9b00      	ldr	r3, [sp, #0]
 8008550:	58eb      	ldr	r3, [r5, r3]
 8008552:	b92b      	cbnz	r3, 8008560 <quorem+0x96>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	3b04      	subs	r3, #4
 8008558:	429d      	cmp	r5, r3
 800855a:	461a      	mov	r2, r3
 800855c:	d32f      	bcc.n	80085be <quorem+0xf4>
 800855e:	613c      	str	r4, [r7, #16]
 8008560:	4638      	mov	r0, r7
 8008562:	f001 f97f 	bl	8009864 <__mcmp>
 8008566:	2800      	cmp	r0, #0
 8008568:	db25      	blt.n	80085b6 <quorem+0xec>
 800856a:	4629      	mov	r1, r5
 800856c:	2000      	movs	r0, #0
 800856e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008572:	f8d1 c000 	ldr.w	ip, [r1]
 8008576:	fa1f fe82 	uxth.w	lr, r2
 800857a:	fa1f f38c 	uxth.w	r3, ip
 800857e:	eba3 030e 	sub.w	r3, r3, lr
 8008582:	4403      	add	r3, r0
 8008584:	0c12      	lsrs	r2, r2, #16
 8008586:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800858a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800858e:	b29b      	uxth	r3, r3
 8008590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008594:	45c1      	cmp	r9, r8
 8008596:	f841 3b04 	str.w	r3, [r1], #4
 800859a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800859e:	d2e6      	bcs.n	800856e <quorem+0xa4>
 80085a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085a8:	b922      	cbnz	r2, 80085b4 <quorem+0xea>
 80085aa:	3b04      	subs	r3, #4
 80085ac:	429d      	cmp	r5, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	d30b      	bcc.n	80085ca <quorem+0x100>
 80085b2:	613c      	str	r4, [r7, #16]
 80085b4:	3601      	adds	r6, #1
 80085b6:	4630      	mov	r0, r6
 80085b8:	b003      	add	sp, #12
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	6812      	ldr	r2, [r2, #0]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	d1cb      	bne.n	800855e <quorem+0x94>
 80085c6:	3c01      	subs	r4, #1
 80085c8:	e7c6      	b.n	8008558 <quorem+0x8e>
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	d1ef      	bne.n	80085b2 <quorem+0xe8>
 80085d2:	3c01      	subs	r4, #1
 80085d4:	e7ea      	b.n	80085ac <quorem+0xe2>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e7ee      	b.n	80085b8 <quorem+0xee>
 80085da:	0000      	movs	r0, r0
 80085dc:	0000      	movs	r0, r0
	...

080085e0 <_dtoa_r>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	69c7      	ldr	r7, [r0, #28]
 80085e6:	b097      	sub	sp, #92	@ 0x5c
 80085e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80085ec:	ec55 4b10 	vmov	r4, r5, d0
 80085f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80085f2:	9107      	str	r1, [sp, #28]
 80085f4:	4681      	mov	r9, r0
 80085f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80085f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80085fa:	b97f      	cbnz	r7, 800861c <_dtoa_r+0x3c>
 80085fc:	2010      	movs	r0, #16
 80085fe:	f000 fe09 	bl	8009214 <malloc>
 8008602:	4602      	mov	r2, r0
 8008604:	f8c9 001c 	str.w	r0, [r9, #28]
 8008608:	b920      	cbnz	r0, 8008614 <_dtoa_r+0x34>
 800860a:	4ba9      	ldr	r3, [pc, #676]	@ (80088b0 <_dtoa_r+0x2d0>)
 800860c:	21ef      	movs	r1, #239	@ 0xef
 800860e:	48a9      	ldr	r0, [pc, #676]	@ (80088b4 <_dtoa_r+0x2d4>)
 8008610:	f001 fcc0 	bl	8009f94 <__assert_func>
 8008614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008618:	6007      	str	r7, [r0, #0]
 800861a:	60c7      	str	r7, [r0, #12]
 800861c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	b159      	cbz	r1, 800863c <_dtoa_r+0x5c>
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	604a      	str	r2, [r1, #4]
 8008628:	2301      	movs	r3, #1
 800862a:	4093      	lsls	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
 800862e:	4648      	mov	r0, r9
 8008630:	f000 fee6 	bl	8009400 <_Bfree>
 8008634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	1e2b      	subs	r3, r5, #0
 800863e:	bfb9      	ittee	lt
 8008640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008644:	9305      	strlt	r3, [sp, #20]
 8008646:	2300      	movge	r3, #0
 8008648:	6033      	strge	r3, [r6, #0]
 800864a:	9f05      	ldr	r7, [sp, #20]
 800864c:	4b9a      	ldr	r3, [pc, #616]	@ (80088b8 <_dtoa_r+0x2d8>)
 800864e:	bfbc      	itt	lt
 8008650:	2201      	movlt	r2, #1
 8008652:	6032      	strlt	r2, [r6, #0]
 8008654:	43bb      	bics	r3, r7
 8008656:	d112      	bne.n	800867e <_dtoa_r+0x9e>
 8008658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800865a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008664:	4323      	orrs	r3, r4
 8008666:	f000 855a 	beq.w	800911e <_dtoa_r+0xb3e>
 800866a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800866c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80088cc <_dtoa_r+0x2ec>
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 855c 	beq.w	800912e <_dtoa_r+0xb4e>
 8008676:	f10a 0303 	add.w	r3, sl, #3
 800867a:	f000 bd56 	b.w	800912a <_dtoa_r+0xb4a>
 800867e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008682:	2200      	movs	r2, #0
 8008684:	ec51 0b17 	vmov	r0, r1, d7
 8008688:	2300      	movs	r3, #0
 800868a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800868e:	f7f8 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008692:	4680      	mov	r8, r0
 8008694:	b158      	cbz	r0, 80086ae <_dtoa_r+0xce>
 8008696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008698:	2301      	movs	r3, #1
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800869e:	b113      	cbz	r3, 80086a6 <_dtoa_r+0xc6>
 80086a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086a2:	4b86      	ldr	r3, [pc, #536]	@ (80088bc <_dtoa_r+0x2dc>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80088d0 <_dtoa_r+0x2f0>
 80086aa:	f000 bd40 	b.w	800912e <_dtoa_r+0xb4e>
 80086ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80086b2:	aa14      	add	r2, sp, #80	@ 0x50
 80086b4:	a915      	add	r1, sp, #84	@ 0x54
 80086b6:	4648      	mov	r0, r9
 80086b8:	f001 f984 	bl	80099c4 <__d2b>
 80086bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086c0:	9002      	str	r0, [sp, #8]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	d078      	beq.n	80087b8 <_dtoa_r+0x1d8>
 80086c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80086cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086e0:	4619      	mov	r1, r3
 80086e2:	2200      	movs	r2, #0
 80086e4:	4b76      	ldr	r3, [pc, #472]	@ (80088c0 <_dtoa_r+0x2e0>)
 80086e6:	f7f7 fdcf 	bl	8000288 <__aeabi_dsub>
 80086ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8008898 <_dtoa_r+0x2b8>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 ff82 	bl	80005f8 <__aeabi_dmul>
 80086f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80088a0 <_dtoa_r+0x2c0>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdc7 	bl	800028c <__adddf3>
 80086fe:	4604      	mov	r4, r0
 8008700:	4630      	mov	r0, r6
 8008702:	460d      	mov	r5, r1
 8008704:	f7f7 ff0e 	bl	8000524 <__aeabi_i2d>
 8008708:	a367      	add	r3, pc, #412	@ (adr r3, 80088a8 <_dtoa_r+0x2c8>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	4604      	mov	r4, r0
 8008720:	460d      	mov	r5, r1
 8008722:	f7f8 fa19 	bl	8000b58 <__aeabi_d2iz>
 8008726:	2200      	movs	r2, #0
 8008728:	4607      	mov	r7, r0
 800872a:	2300      	movs	r3, #0
 800872c:	4620      	mov	r0, r4
 800872e:	4629      	mov	r1, r5
 8008730:	f7f8 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8008734:	b140      	cbz	r0, 8008748 <_dtoa_r+0x168>
 8008736:	4638      	mov	r0, r7
 8008738:	f7f7 fef4 	bl	8000524 <__aeabi_i2d>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f8 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008744:	b900      	cbnz	r0, 8008748 <_dtoa_r+0x168>
 8008746:	3f01      	subs	r7, #1
 8008748:	2f16      	cmp	r7, #22
 800874a:	d852      	bhi.n	80087f2 <_dtoa_r+0x212>
 800874c:	4b5d      	ldr	r3, [pc, #372]	@ (80088c4 <_dtoa_r+0x2e4>)
 800874e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800875a:	f7f8 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	d049      	beq.n	80087f6 <_dtoa_r+0x216>
 8008762:	3f01      	subs	r7, #1
 8008764:	2300      	movs	r3, #0
 8008766:	9310      	str	r3, [sp, #64]	@ 0x40
 8008768:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800876a:	1b9b      	subs	r3, r3, r6
 800876c:	1e5a      	subs	r2, r3, #1
 800876e:	bf45      	ittet	mi
 8008770:	f1c3 0301 	rsbmi	r3, r3, #1
 8008774:	9300      	strmi	r3, [sp, #0]
 8008776:	2300      	movpl	r3, #0
 8008778:	2300      	movmi	r3, #0
 800877a:	9206      	str	r2, [sp, #24]
 800877c:	bf54      	ite	pl
 800877e:	9300      	strpl	r3, [sp, #0]
 8008780:	9306      	strmi	r3, [sp, #24]
 8008782:	2f00      	cmp	r7, #0
 8008784:	db39      	blt.n	80087fa <_dtoa_r+0x21a>
 8008786:	9b06      	ldr	r3, [sp, #24]
 8008788:	970d      	str	r7, [sp, #52]	@ 0x34
 800878a:	443b      	add	r3, r7
 800878c:	9306      	str	r3, [sp, #24]
 800878e:	2300      	movs	r3, #0
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	2b09      	cmp	r3, #9
 8008796:	d863      	bhi.n	8008860 <_dtoa_r+0x280>
 8008798:	2b05      	cmp	r3, #5
 800879a:	bfc4      	itt	gt
 800879c:	3b04      	subgt	r3, #4
 800879e:	9307      	strgt	r3, [sp, #28]
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	f1a3 0302 	sub.w	r3, r3, #2
 80087a6:	bfcc      	ite	gt
 80087a8:	2400      	movgt	r4, #0
 80087aa:	2401      	movle	r4, #1
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d863      	bhi.n	8008878 <_dtoa_r+0x298>
 80087b0:	e8df f003 	tbb	[pc, r3]
 80087b4:	2b375452 	.word	0x2b375452
 80087b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80087bc:	441e      	add	r6, r3
 80087be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	bfc1      	itttt	gt
 80087c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087ca:	409f      	lslgt	r7, r3
 80087cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087d4:	bfd6      	itet	le
 80087d6:	f1c3 0320 	rsble	r3, r3, #32
 80087da:	ea47 0003 	orrgt.w	r0, r7, r3
 80087de:	fa04 f003 	lslle.w	r0, r4, r3
 80087e2:	f7f7 fe8f 	bl	8000504 <__aeabi_ui2d>
 80087e6:	2201      	movs	r2, #1
 80087e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087ec:	3e01      	subs	r6, #1
 80087ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80087f0:	e776      	b.n	80086e0 <_dtoa_r+0x100>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e7b7      	b.n	8008766 <_dtoa_r+0x186>
 80087f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80087f8:	e7b6      	b.n	8008768 <_dtoa_r+0x188>
 80087fa:	9b00      	ldr	r3, [sp, #0]
 80087fc:	1bdb      	subs	r3, r3, r7
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	427b      	negs	r3, r7
 8008802:	9308      	str	r3, [sp, #32]
 8008804:	2300      	movs	r3, #0
 8008806:	930d      	str	r3, [sp, #52]	@ 0x34
 8008808:	e7c3      	b.n	8008792 <_dtoa_r+0x1b2>
 800880a:	2301      	movs	r3, #1
 800880c:	9309      	str	r3, [sp, #36]	@ 0x24
 800880e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008810:	eb07 0b03 	add.w	fp, r7, r3
 8008814:	f10b 0301 	add.w	r3, fp, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	bfb8      	it	lt
 800881e:	2301      	movlt	r3, #1
 8008820:	e006      	b.n	8008830 <_dtoa_r+0x250>
 8008822:	2301      	movs	r3, #1
 8008824:	9309      	str	r3, [sp, #36]	@ 0x24
 8008826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	dd28      	ble.n	800887e <_dtoa_r+0x29e>
 800882c:	469b      	mov	fp, r3
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008834:	2100      	movs	r1, #0
 8008836:	2204      	movs	r2, #4
 8008838:	f102 0514 	add.w	r5, r2, #20
 800883c:	429d      	cmp	r5, r3
 800883e:	d926      	bls.n	800888e <_dtoa_r+0x2ae>
 8008840:	6041      	str	r1, [r0, #4]
 8008842:	4648      	mov	r0, r9
 8008844:	f000 fd9c 	bl	8009380 <_Balloc>
 8008848:	4682      	mov	sl, r0
 800884a:	2800      	cmp	r0, #0
 800884c:	d142      	bne.n	80088d4 <_dtoa_r+0x2f4>
 800884e:	4b1e      	ldr	r3, [pc, #120]	@ (80088c8 <_dtoa_r+0x2e8>)
 8008850:	4602      	mov	r2, r0
 8008852:	f240 11af 	movw	r1, #431	@ 0x1af
 8008856:	e6da      	b.n	800860e <_dtoa_r+0x2e>
 8008858:	2300      	movs	r3, #0
 800885a:	e7e3      	b.n	8008824 <_dtoa_r+0x244>
 800885c:	2300      	movs	r3, #0
 800885e:	e7d5      	b.n	800880c <_dtoa_r+0x22c>
 8008860:	2401      	movs	r4, #1
 8008862:	2300      	movs	r3, #0
 8008864:	9307      	str	r3, [sp, #28]
 8008866:	9409      	str	r4, [sp, #36]	@ 0x24
 8008868:	f04f 3bff 	mov.w	fp, #4294967295
 800886c:	2200      	movs	r2, #0
 800886e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008872:	2312      	movs	r3, #18
 8008874:	920c      	str	r2, [sp, #48]	@ 0x30
 8008876:	e7db      	b.n	8008830 <_dtoa_r+0x250>
 8008878:	2301      	movs	r3, #1
 800887a:	9309      	str	r3, [sp, #36]	@ 0x24
 800887c:	e7f4      	b.n	8008868 <_dtoa_r+0x288>
 800887e:	f04f 0b01 	mov.w	fp, #1
 8008882:	f8cd b00c 	str.w	fp, [sp, #12]
 8008886:	465b      	mov	r3, fp
 8008888:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800888c:	e7d0      	b.n	8008830 <_dtoa_r+0x250>
 800888e:	3101      	adds	r1, #1
 8008890:	0052      	lsls	r2, r2, #1
 8008892:	e7d1      	b.n	8008838 <_dtoa_r+0x258>
 8008894:	f3af 8000 	nop.w
 8008898:	636f4361 	.word	0x636f4361
 800889c:	3fd287a7 	.word	0x3fd287a7
 80088a0:	8b60c8b3 	.word	0x8b60c8b3
 80088a4:	3fc68a28 	.word	0x3fc68a28
 80088a8:	509f79fb 	.word	0x509f79fb
 80088ac:	3fd34413 	.word	0x3fd34413
 80088b0:	0800a6bd 	.word	0x0800a6bd
 80088b4:	0800a6d4 	.word	0x0800a6d4
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	0800a68d 	.word	0x0800a68d
 80088c0:	3ff80000 	.word	0x3ff80000
 80088c4:	0800a828 	.word	0x0800a828
 80088c8:	0800a72c 	.word	0x0800a72c
 80088cc:	0800a6b9 	.word	0x0800a6b9
 80088d0:	0800a68c 	.word	0x0800a68c
 80088d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80088d8:	6018      	str	r0, [r3, #0]
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	2b0e      	cmp	r3, #14
 80088de:	f200 80a1 	bhi.w	8008a24 <_dtoa_r+0x444>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	f000 809e 	beq.w	8008a24 <_dtoa_r+0x444>
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	dd33      	ble.n	8008954 <_dtoa_r+0x374>
 80088ec:	4b9c      	ldr	r3, [pc, #624]	@ (8008b60 <_dtoa_r+0x580>)
 80088ee:	f007 020f 	and.w	r2, r7, #15
 80088f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f6:	ed93 7b00 	vldr	d7, [r3]
 80088fa:	05f8      	lsls	r0, r7, #23
 80088fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008904:	d516      	bpl.n	8008934 <_dtoa_r+0x354>
 8008906:	4b97      	ldr	r3, [pc, #604]	@ (8008b64 <_dtoa_r+0x584>)
 8008908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800890c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008910:	f7f7 ff9c 	bl	800084c <__aeabi_ddiv>
 8008914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008918:	f004 040f 	and.w	r4, r4, #15
 800891c:	2603      	movs	r6, #3
 800891e:	4d91      	ldr	r5, [pc, #580]	@ (8008b64 <_dtoa_r+0x584>)
 8008920:	b954      	cbnz	r4, 8008938 <_dtoa_r+0x358>
 8008922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800892a:	f7f7 ff8f 	bl	800084c <__aeabi_ddiv>
 800892e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008932:	e028      	b.n	8008986 <_dtoa_r+0x3a6>
 8008934:	2602      	movs	r6, #2
 8008936:	e7f2      	b.n	800891e <_dtoa_r+0x33e>
 8008938:	07e1      	lsls	r1, r4, #31
 800893a:	d508      	bpl.n	800894e <_dtoa_r+0x36e>
 800893c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800894c:	3601      	adds	r6, #1
 800894e:	1064      	asrs	r4, r4, #1
 8008950:	3508      	adds	r5, #8
 8008952:	e7e5      	b.n	8008920 <_dtoa_r+0x340>
 8008954:	f000 80af 	beq.w	8008ab6 <_dtoa_r+0x4d6>
 8008958:	427c      	negs	r4, r7
 800895a:	4b81      	ldr	r3, [pc, #516]	@ (8008b60 <_dtoa_r+0x580>)
 800895c:	4d81      	ldr	r5, [pc, #516]	@ (8008b64 <_dtoa_r+0x584>)
 800895e:	f004 020f 	and.w	r2, r4, #15
 8008962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008976:	1124      	asrs	r4, r4, #4
 8008978:	2300      	movs	r3, #0
 800897a:	2602      	movs	r6, #2
 800897c:	2c00      	cmp	r4, #0
 800897e:	f040 808f 	bne.w	8008aa0 <_dtoa_r+0x4c0>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1d3      	bne.n	800892e <_dtoa_r+0x34e>
 8008986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008988:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8094 	beq.w	8008aba <_dtoa_r+0x4da>
 8008992:	4b75      	ldr	r3, [pc, #468]	@ (8008b68 <_dtoa_r+0x588>)
 8008994:	2200      	movs	r2, #0
 8008996:	4620      	mov	r0, r4
 8008998:	4629      	mov	r1, r5
 800899a:	f7f8 f89f 	bl	8000adc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	f000 808b 	beq.w	8008aba <_dtoa_r+0x4da>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8087 	beq.w	8008aba <_dtoa_r+0x4da>
 80089ac:	f1bb 0f00 	cmp.w	fp, #0
 80089b0:	dd34      	ble.n	8008a1c <_dtoa_r+0x43c>
 80089b2:	4620      	mov	r0, r4
 80089b4:	4b6d      	ldr	r3, [pc, #436]	@ (8008b6c <_dtoa_r+0x58c>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80089c6:	3601      	adds	r6, #1
 80089c8:	465c      	mov	r4, fp
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7f7 fdaa 	bl	8000524 <__aeabi_i2d>
 80089d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d4:	f7f7 fe10 	bl	80005f8 <__aeabi_dmul>
 80089d8:	4b65      	ldr	r3, [pc, #404]	@ (8008b70 <_dtoa_r+0x590>)
 80089da:	2200      	movs	r2, #0
 80089dc:	f7f7 fc56 	bl	800028c <__adddf3>
 80089e0:	4605      	mov	r5, r0
 80089e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089e6:	2c00      	cmp	r4, #0
 80089e8:	d16a      	bne.n	8008ac0 <_dtoa_r+0x4e0>
 80089ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ee:	4b61      	ldr	r3, [pc, #388]	@ (8008b74 <_dtoa_r+0x594>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	f7f7 fc49 	bl	8000288 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089fe:	462a      	mov	r2, r5
 8008a00:	4633      	mov	r3, r6
 8008a02:	f7f8 f889 	bl	8000b18 <__aeabi_dcmpgt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 8298 	bne.w	8008f3c <_dtoa_r+0x95c>
 8008a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a10:	462a      	mov	r2, r5
 8008a12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a16:	f7f8 f861 	bl	8000adc <__aeabi_dcmplt>
 8008a1a:	bb38      	cbnz	r0, 8008a6c <_dtoa_r+0x48c>
 8008a1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f2c0 8157 	blt.w	8008cda <_dtoa_r+0x6fa>
 8008a2c:	2f0e      	cmp	r7, #14
 8008a2e:	f300 8154 	bgt.w	8008cda <_dtoa_r+0x6fa>
 8008a32:	4b4b      	ldr	r3, [pc, #300]	@ (8008b60 <_dtoa_r+0x580>)
 8008a34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a38:	ed93 7b00 	vldr	d7, [r3]
 8008a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	ed8d 7b00 	vstr	d7, [sp]
 8008a44:	f280 80e5 	bge.w	8008c12 <_dtoa_r+0x632>
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f300 80e1 	bgt.w	8008c12 <_dtoa_r+0x632>
 8008a50:	d10c      	bne.n	8008a6c <_dtoa_r+0x48c>
 8008a52:	4b48      	ldr	r3, [pc, #288]	@ (8008b74 <_dtoa_r+0x594>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	ec51 0b17 	vmov	r0, r1, d7
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a62:	f7f8 f84f 	bl	8000b04 <__aeabi_dcmpge>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f000 8266 	beq.w	8008f38 <_dtoa_r+0x958>
 8008a6c:	2400      	movs	r4, #0
 8008a6e:	4625      	mov	r5, r4
 8008a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a72:	4656      	mov	r6, sl
 8008a74:	ea6f 0803 	mvn.w	r8, r3
 8008a78:	2700      	movs	r7, #0
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4648      	mov	r0, r9
 8008a7e:	f000 fcbf 	bl	8009400 <_Bfree>
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	f000 80bd 	beq.w	8008c02 <_dtoa_r+0x622>
 8008a88:	b12f      	cbz	r7, 8008a96 <_dtoa_r+0x4b6>
 8008a8a:	42af      	cmp	r7, r5
 8008a8c:	d003      	beq.n	8008a96 <_dtoa_r+0x4b6>
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4648      	mov	r0, r9
 8008a92:	f000 fcb5 	bl	8009400 <_Bfree>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4648      	mov	r0, r9
 8008a9a:	f000 fcb1 	bl	8009400 <_Bfree>
 8008a9e:	e0b0      	b.n	8008c02 <_dtoa_r+0x622>
 8008aa0:	07e2      	lsls	r2, r4, #31
 8008aa2:	d505      	bpl.n	8008ab0 <_dtoa_r+0x4d0>
 8008aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	3601      	adds	r6, #1
 8008aae:	2301      	movs	r3, #1
 8008ab0:	1064      	asrs	r4, r4, #1
 8008ab2:	3508      	adds	r5, #8
 8008ab4:	e762      	b.n	800897c <_dtoa_r+0x39c>
 8008ab6:	2602      	movs	r6, #2
 8008ab8:	e765      	b.n	8008986 <_dtoa_r+0x3a6>
 8008aba:	9c03      	ldr	r4, [sp, #12]
 8008abc:	46b8      	mov	r8, r7
 8008abe:	e784      	b.n	80089ca <_dtoa_r+0x3ea>
 8008ac0:	4b27      	ldr	r3, [pc, #156]	@ (8008b60 <_dtoa_r+0x580>)
 8008ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008acc:	4454      	add	r4, sl
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	d054      	beq.n	8008b7c <_dtoa_r+0x59c>
 8008ad2:	4929      	ldr	r1, [pc, #164]	@ (8008b78 <_dtoa_r+0x598>)
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7f7 feb9 	bl	800084c <__aeabi_ddiv>
 8008ada:	4633      	mov	r3, r6
 8008adc:	462a      	mov	r2, r5
 8008ade:	f7f7 fbd3 	bl	8000288 <__aeabi_dsub>
 8008ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ae6:	4656      	mov	r6, sl
 8008ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aec:	f7f8 f834 	bl	8000b58 <__aeabi_d2iz>
 8008af0:	4605      	mov	r5, r0
 8008af2:	f7f7 fd17 	bl	8000524 <__aeabi_i2d>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008afe:	f7f7 fbc3 	bl	8000288 <__aeabi_dsub>
 8008b02:	3530      	adds	r5, #48	@ 0x30
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b0c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b14:	f7f7 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d172      	bne.n	8008c02 <_dtoa_r+0x622>
 8008b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b20:	4911      	ldr	r1, [pc, #68]	@ (8008b68 <_dtoa_r+0x588>)
 8008b22:	2000      	movs	r0, #0
 8008b24:	f7f7 fbb0 	bl	8000288 <__aeabi_dsub>
 8008b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b2c:	f7f7 ffd6 	bl	8000adc <__aeabi_dcmplt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f040 80b4 	bne.w	8008c9e <_dtoa_r+0x6be>
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	f43f af70 	beq.w	8008a1c <_dtoa_r+0x43c>
 8008b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b40:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <_dtoa_r+0x58c>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	f7f7 fd58 	bl	80005f8 <__aeabi_dmul>
 8008b48:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <_dtoa_r+0x58c>)
 8008b4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b54:	f7f7 fd50 	bl	80005f8 <__aeabi_dmul>
 8008b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b5c:	e7c4      	b.n	8008ae8 <_dtoa_r+0x508>
 8008b5e:	bf00      	nop
 8008b60:	0800a828 	.word	0x0800a828
 8008b64:	0800a800 	.word	0x0800a800
 8008b68:	3ff00000 	.word	0x3ff00000
 8008b6c:	40240000 	.word	0x40240000
 8008b70:	401c0000 	.word	0x401c0000
 8008b74:	40140000 	.word	0x40140000
 8008b78:	3fe00000 	.word	0x3fe00000
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f7f7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8008b84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b8a:	4656      	mov	r6, sl
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	f7f7 ffe2 	bl	8000b58 <__aeabi_d2iz>
 8008b94:	4605      	mov	r5, r0
 8008b96:	f7f7 fcc5 	bl	8000524 <__aeabi_i2d>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba2:	f7f7 fb71 	bl	8000288 <__aeabi_dsub>
 8008ba6:	3530      	adds	r5, #48	@ 0x30
 8008ba8:	f806 5b01 	strb.w	r5, [r6], #1
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	d124      	bne.n	8008c06 <_dtoa_r+0x626>
 8008bbc:	4baf      	ldr	r3, [pc, #700]	@ (8008e7c <_dtoa_r+0x89c>)
 8008bbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008bc2:	f7f7 fb63 	bl	800028c <__adddf3>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bce:	f7f7 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d163      	bne.n	8008c9e <_dtoa_r+0x6be>
 8008bd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008bda:	49a8      	ldr	r1, [pc, #672]	@ (8008e7c <_dtoa_r+0x89c>)
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f7f7 fb53 	bl	8000288 <__aeabi_dsub>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f af14 	beq.w	8008a1c <_dtoa_r+0x43c>
 8008bf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008bf6:	1e73      	subs	r3, r6, #1
 8008bf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bfe:	2b30      	cmp	r3, #48	@ 0x30
 8008c00:	d0f8      	beq.n	8008bf4 <_dtoa_r+0x614>
 8008c02:	4647      	mov	r7, r8
 8008c04:	e03b      	b.n	8008c7e <_dtoa_r+0x69e>
 8008c06:	4b9e      	ldr	r3, [pc, #632]	@ (8008e80 <_dtoa_r+0x8a0>)
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c10:	e7bc      	b.n	8008b8c <_dtoa_r+0x5ac>
 8008c12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008c16:	4656      	mov	r6, sl
 8008c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fe14 	bl	800084c <__aeabi_ddiv>
 8008c24:	f7f7 ff98 	bl	8000b58 <__aeabi_d2iz>
 8008c28:	4680      	mov	r8, r0
 8008c2a:	f7f7 fc7b 	bl	8000524 <__aeabi_i2d>
 8008c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c42:	f7f7 fb21 	bl	8000288 <__aeabi_dsub>
 8008c46:	f806 4b01 	strb.w	r4, [r6], #1
 8008c4a:	9d03      	ldr	r5, [sp, #12]
 8008c4c:	eba6 040a 	sub.w	r4, r6, sl
 8008c50:	42a5      	cmp	r5, r4
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	d133      	bne.n	8008cc0 <_dtoa_r+0x6e0>
 8008c58:	f7f7 fb18 	bl	800028c <__adddf3>
 8008c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	f7f7 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8008c68:	b9c0      	cbnz	r0, 8008c9c <_dtoa_r+0x6bc>
 8008c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c76:	b110      	cbz	r0, 8008c7e <_dtoa_r+0x69e>
 8008c78:	f018 0f01 	tst.w	r8, #1
 8008c7c:	d10e      	bne.n	8008c9c <_dtoa_r+0x6bc>
 8008c7e:	9902      	ldr	r1, [sp, #8]
 8008c80:	4648      	mov	r0, r9
 8008c82:	f000 fbbd 	bl	8009400 <_Bfree>
 8008c86:	2300      	movs	r3, #0
 8008c88:	7033      	strb	r3, [r6, #0]
 8008c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c8c:	3701      	adds	r7, #1
 8008c8e:	601f      	str	r7, [r3, #0]
 8008c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 824b 	beq.w	800912e <_dtoa_r+0xb4e>
 8008c98:	601e      	str	r6, [r3, #0]
 8008c9a:	e248      	b.n	800912e <_dtoa_r+0xb4e>
 8008c9c:	46b8      	mov	r8, r7
 8008c9e:	4633      	mov	r3, r6
 8008ca0:	461e      	mov	r6, r3
 8008ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca6:	2a39      	cmp	r2, #57	@ 0x39
 8008ca8:	d106      	bne.n	8008cb8 <_dtoa_r+0x6d8>
 8008caa:	459a      	cmp	sl, r3
 8008cac:	d1f8      	bne.n	8008ca0 <_dtoa_r+0x6c0>
 8008cae:	2230      	movs	r2, #48	@ 0x30
 8008cb0:	f108 0801 	add.w	r8, r8, #1
 8008cb4:	f88a 2000 	strb.w	r2, [sl]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	3201      	adds	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e7a0      	b.n	8008c02 <_dtoa_r+0x622>
 8008cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8008e80 <_dtoa_r+0x8a0>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	f7f7 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d09f      	beq.n	8008c18 <_dtoa_r+0x638>
 8008cd8:	e7d1      	b.n	8008c7e <_dtoa_r+0x69e>
 8008cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	f000 80ea 	beq.w	8008eb6 <_dtoa_r+0x8d6>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	2a01      	cmp	r2, #1
 8008ce6:	f300 80cd 	bgt.w	8008e84 <_dtoa_r+0x8a4>
 8008cea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	f000 80c1 	beq.w	8008e74 <_dtoa_r+0x894>
 8008cf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008cf6:	9c08      	ldr	r4, [sp, #32]
 8008cf8:	9e00      	ldr	r6, [sp, #0]
 8008cfa:	9a00      	ldr	r2, [sp, #0]
 8008cfc:	441a      	add	r2, r3
 8008cfe:	9200      	str	r2, [sp, #0]
 8008d00:	9a06      	ldr	r2, [sp, #24]
 8008d02:	2101      	movs	r1, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	4648      	mov	r0, r9
 8008d08:	9206      	str	r2, [sp, #24]
 8008d0a:	f000 fc2d 	bl	8009568 <__i2b>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	b166      	cbz	r6, 8008d2c <_dtoa_r+0x74c>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd09      	ble.n	8008d2c <_dtoa_r+0x74c>
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	9a00      	ldr	r2, [sp, #0]
 8008d1c:	bfa8      	it	ge
 8008d1e:	4633      	movge	r3, r6
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	9200      	str	r2, [sp, #0]
 8008d24:	9a06      	ldr	r2, [sp, #24]
 8008d26:	1af6      	subs	r6, r6, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	9306      	str	r3, [sp, #24]
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	b30b      	cbz	r3, 8008d74 <_dtoa_r+0x794>
 8008d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80c6 	beq.w	8008ec4 <_dtoa_r+0x8e4>
 8008d38:	2c00      	cmp	r4, #0
 8008d3a:	f000 80c0 	beq.w	8008ebe <_dtoa_r+0x8de>
 8008d3e:	4629      	mov	r1, r5
 8008d40:	4622      	mov	r2, r4
 8008d42:	4648      	mov	r0, r9
 8008d44:	f000 fcc8 	bl	80096d8 <__pow5mult>
 8008d48:	9a02      	ldr	r2, [sp, #8]
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	4648      	mov	r0, r9
 8008d50:	f000 fc20 	bl	8009594 <__multiply>
 8008d54:	9902      	ldr	r1, [sp, #8]
 8008d56:	4680      	mov	r8, r0
 8008d58:	4648      	mov	r0, r9
 8008d5a:	f000 fb51 	bl	8009400 <_Bfree>
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	1b1b      	subs	r3, r3, r4
 8008d62:	9308      	str	r3, [sp, #32]
 8008d64:	f000 80b1 	beq.w	8008eca <_dtoa_r+0x8ea>
 8008d68:	9a08      	ldr	r2, [sp, #32]
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	4648      	mov	r0, r9
 8008d6e:	f000 fcb3 	bl	80096d8 <__pow5mult>
 8008d72:	9002      	str	r0, [sp, #8]
 8008d74:	2101      	movs	r1, #1
 8008d76:	4648      	mov	r0, r9
 8008d78:	f000 fbf6 	bl	8009568 <__i2b>
 8008d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d7e:	4604      	mov	r4, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 81d8 	beq.w	8009136 <_dtoa_r+0xb56>
 8008d86:	461a      	mov	r2, r3
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	f000 fca4 	bl	80096d8 <__pow5mult>
 8008d90:	9b07      	ldr	r3, [sp, #28]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	4604      	mov	r4, r0
 8008d96:	f300 809f 	bgt.w	8008ed8 <_dtoa_r+0x8f8>
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 8097 	bne.w	8008ed0 <_dtoa_r+0x8f0>
 8008da2:	9b05      	ldr	r3, [sp, #20]
 8008da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f040 8093 	bne.w	8008ed4 <_dtoa_r+0x8f4>
 8008dae:	9b05      	ldr	r3, [sp, #20]
 8008db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008db4:	0d1b      	lsrs	r3, r3, #20
 8008db6:	051b      	lsls	r3, r3, #20
 8008db8:	b133      	cbz	r3, 8008dc8 <_dtoa_r+0x7e8>
 8008dba:	9b00      	ldr	r3, [sp, #0]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	9b06      	ldr	r3, [sp, #24]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	9306      	str	r3, [sp, #24]
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	9308      	str	r3, [sp, #32]
 8008dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 81b8 	beq.w	8009142 <_dtoa_r+0xb62>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dd8:	6918      	ldr	r0, [r3, #16]
 8008dda:	f000 fb79 	bl	80094d0 <__hi0bits>
 8008dde:	f1c0 0020 	rsb	r0, r0, #32
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	4418      	add	r0, r3
 8008de6:	f010 001f 	ands.w	r0, r0, #31
 8008dea:	f000 8082 	beq.w	8008ef2 <_dtoa_r+0x912>
 8008dee:	f1c0 0320 	rsb	r3, r0, #32
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	dd73      	ble.n	8008ede <_dtoa_r+0x8fe>
 8008df6:	9b00      	ldr	r3, [sp, #0]
 8008df8:	f1c0 001c 	rsb	r0, r0, #28
 8008dfc:	4403      	add	r3, r0
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	4403      	add	r3, r0
 8008e04:	4406      	add	r6, r0
 8008e06:	9306      	str	r3, [sp, #24]
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd05      	ble.n	8008e1a <_dtoa_r+0x83a>
 8008e0e:	9902      	ldr	r1, [sp, #8]
 8008e10:	461a      	mov	r2, r3
 8008e12:	4648      	mov	r0, r9
 8008e14:	f000 fcba 	bl	800978c <__lshift>
 8008e18:	9002      	str	r0, [sp, #8]
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd05      	ble.n	8008e2c <_dtoa_r+0x84c>
 8008e20:	4621      	mov	r1, r4
 8008e22:	461a      	mov	r2, r3
 8008e24:	4648      	mov	r0, r9
 8008e26:	f000 fcb1 	bl	800978c <__lshift>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d061      	beq.n	8008ef6 <_dtoa_r+0x916>
 8008e32:	9802      	ldr	r0, [sp, #8]
 8008e34:	4621      	mov	r1, r4
 8008e36:	f000 fd15 	bl	8009864 <__mcmp>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	da5b      	bge.n	8008ef6 <_dtoa_r+0x916>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9902      	ldr	r1, [sp, #8]
 8008e42:	220a      	movs	r2, #10
 8008e44:	4648      	mov	r0, r9
 8008e46:	f000 fafd 	bl	8009444 <__multadd>
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	9002      	str	r0, [sp, #8]
 8008e4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8177 	beq.w	8009146 <_dtoa_r+0xb66>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	4648      	mov	r0, r9
 8008e60:	f000 faf0 	bl	8009444 <__multadd>
 8008e64:	f1bb 0f00 	cmp.w	fp, #0
 8008e68:	4605      	mov	r5, r0
 8008e6a:	dc6f      	bgt.n	8008f4c <_dtoa_r+0x96c>
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dc49      	bgt.n	8008f06 <_dtoa_r+0x926>
 8008e72:	e06b      	b.n	8008f4c <_dtoa_r+0x96c>
 8008e74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e7a:	e73c      	b.n	8008cf6 <_dtoa_r+0x716>
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	40240000 	.word	0x40240000
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	1e5c      	subs	r4, r3, #1
 8008e88:	9b08      	ldr	r3, [sp, #32]
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	db09      	blt.n	8008ea2 <_dtoa_r+0x8c2>
 8008e8e:	1b1c      	subs	r4, r3, r4
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f6bf af30 	bge.w	8008cf8 <_dtoa_r+0x718>
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	9a03      	ldr	r2, [sp, #12]
 8008e9c:	1a9e      	subs	r6, r3, r2
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e72b      	b.n	8008cfa <_dtoa_r+0x71a>
 8008ea2:	9b08      	ldr	r3, [sp, #32]
 8008ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ea6:	9408      	str	r4, [sp, #32]
 8008ea8:	1ae3      	subs	r3, r4, r3
 8008eaa:	441a      	add	r2, r3
 8008eac:	9e00      	ldr	r6, [sp, #0]
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008eb2:	2400      	movs	r4, #0
 8008eb4:	e721      	b.n	8008cfa <_dtoa_r+0x71a>
 8008eb6:	9c08      	ldr	r4, [sp, #32]
 8008eb8:	9e00      	ldr	r6, [sp, #0]
 8008eba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ebc:	e728      	b.n	8008d10 <_dtoa_r+0x730>
 8008ebe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ec2:	e751      	b.n	8008d68 <_dtoa_r+0x788>
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	9902      	ldr	r1, [sp, #8]
 8008ec8:	e750      	b.n	8008d6c <_dtoa_r+0x78c>
 8008eca:	f8cd 8008 	str.w	r8, [sp, #8]
 8008ece:	e751      	b.n	8008d74 <_dtoa_r+0x794>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e779      	b.n	8008dc8 <_dtoa_r+0x7e8>
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	e777      	b.n	8008dc8 <_dtoa_r+0x7e8>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9308      	str	r3, [sp, #32]
 8008edc:	e779      	b.n	8008dd2 <_dtoa_r+0x7f2>
 8008ede:	d093      	beq.n	8008e08 <_dtoa_r+0x828>
 8008ee0:	9a00      	ldr	r2, [sp, #0]
 8008ee2:	331c      	adds	r3, #28
 8008ee4:	441a      	add	r2, r3
 8008ee6:	9200      	str	r2, [sp, #0]
 8008ee8:	9a06      	ldr	r2, [sp, #24]
 8008eea:	441a      	add	r2, r3
 8008eec:	441e      	add	r6, r3
 8008eee:	9206      	str	r2, [sp, #24]
 8008ef0:	e78a      	b.n	8008e08 <_dtoa_r+0x828>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	e7f4      	b.n	8008ee0 <_dtoa_r+0x900>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	46b8      	mov	r8, r7
 8008efc:	dc20      	bgt.n	8008f40 <_dtoa_r+0x960>
 8008efe:	469b      	mov	fp, r3
 8008f00:	9b07      	ldr	r3, [sp, #28]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	dd1e      	ble.n	8008f44 <_dtoa_r+0x964>
 8008f06:	f1bb 0f00 	cmp.w	fp, #0
 8008f0a:	f47f adb1 	bne.w	8008a70 <_dtoa_r+0x490>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	465b      	mov	r3, fp
 8008f12:	2205      	movs	r2, #5
 8008f14:	4648      	mov	r0, r9
 8008f16:	f000 fa95 	bl	8009444 <__multadd>
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	9802      	ldr	r0, [sp, #8]
 8008f20:	f000 fca0 	bl	8009864 <__mcmp>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f77f ada3 	ble.w	8008a70 <_dtoa_r+0x490>
 8008f2a:	4656      	mov	r6, sl
 8008f2c:	2331      	movs	r3, #49	@ 0x31
 8008f2e:	f806 3b01 	strb.w	r3, [r6], #1
 8008f32:	f108 0801 	add.w	r8, r8, #1
 8008f36:	e59f      	b.n	8008a78 <_dtoa_r+0x498>
 8008f38:	9c03      	ldr	r4, [sp, #12]
 8008f3a:	46b8      	mov	r8, r7
 8008f3c:	4625      	mov	r5, r4
 8008f3e:	e7f4      	b.n	8008f2a <_dtoa_r+0x94a>
 8008f40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 8101 	beq.w	800914e <_dtoa_r+0xb6e>
 8008f4c:	2e00      	cmp	r6, #0
 8008f4e:	dd05      	ble.n	8008f5c <_dtoa_r+0x97c>
 8008f50:	4629      	mov	r1, r5
 8008f52:	4632      	mov	r2, r6
 8008f54:	4648      	mov	r0, r9
 8008f56:	f000 fc19 	bl	800978c <__lshift>
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d05c      	beq.n	800901c <_dtoa_r+0xa3c>
 8008f62:	6869      	ldr	r1, [r5, #4]
 8008f64:	4648      	mov	r0, r9
 8008f66:	f000 fa0b 	bl	8009380 <_Balloc>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <_dtoa_r+0x99a>
 8008f6e:	4b82      	ldr	r3, [pc, #520]	@ (8009178 <_dtoa_r+0xb98>)
 8008f70:	4602      	mov	r2, r0
 8008f72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f76:	f7ff bb4a 	b.w	800860e <_dtoa_r+0x2e>
 8008f7a:	692a      	ldr	r2, [r5, #16]
 8008f7c:	3202      	adds	r2, #2
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	f105 010c 	add.w	r1, r5, #12
 8008f84:	300c      	adds	r0, #12
 8008f86:	f000 fff7 	bl	8009f78 <memcpy>
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4648      	mov	r0, r9
 8008f90:	f000 fbfc 	bl	800978c <__lshift>
 8008f94:	f10a 0301 	add.w	r3, sl, #1
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	eb0a 030b 	add.w	r3, sl, fp
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	9b04      	ldr	r3, [sp, #16]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	462f      	mov	r7, r5
 8008fa8:	9306      	str	r3, [sp, #24]
 8008faa:	4605      	mov	r5, r0
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	9802      	ldr	r0, [sp, #8]
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008fb6:	f7ff fa88 	bl	80084ca <quorem>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	3330      	adds	r3, #48	@ 0x30
 8008fbe:	9003      	str	r0, [sp, #12]
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	9802      	ldr	r0, [sp, #8]
 8008fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc6:	f000 fc4d 	bl	8009864 <__mcmp>
 8008fca:	462a      	mov	r2, r5
 8008fcc:	9004      	str	r0, [sp, #16]
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4648      	mov	r0, r9
 8008fd2:	f000 fc63 	bl	800989c <__mdiff>
 8008fd6:	68c2      	ldr	r2, [r0, #12]
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	4606      	mov	r6, r0
 8008fdc:	bb02      	cbnz	r2, 8009020 <_dtoa_r+0xa40>
 8008fde:	4601      	mov	r1, r0
 8008fe0:	9802      	ldr	r0, [sp, #8]
 8008fe2:	f000 fc3f 	bl	8009864 <__mcmp>
 8008fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4631      	mov	r1, r6
 8008fec:	4648      	mov	r0, r9
 8008fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff2:	f000 fa05 	bl	8009400 <_Bfree>
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ffa:	9e00      	ldr	r6, [sp, #0]
 8008ffc:	ea42 0103 	orr.w	r1, r2, r3
 8009000:	9b06      	ldr	r3, [sp, #24]
 8009002:	4319      	orrs	r1, r3
 8009004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009006:	d10d      	bne.n	8009024 <_dtoa_r+0xa44>
 8009008:	2b39      	cmp	r3, #57	@ 0x39
 800900a:	d027      	beq.n	800905c <_dtoa_r+0xa7c>
 800900c:	9a04      	ldr	r2, [sp, #16]
 800900e:	2a00      	cmp	r2, #0
 8009010:	dd01      	ble.n	8009016 <_dtoa_r+0xa36>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	3331      	adds	r3, #49	@ 0x31
 8009016:	f88b 3000 	strb.w	r3, [fp]
 800901a:	e52e      	b.n	8008a7a <_dtoa_r+0x49a>
 800901c:	4628      	mov	r0, r5
 800901e:	e7b9      	b.n	8008f94 <_dtoa_r+0x9b4>
 8009020:	2201      	movs	r2, #1
 8009022:	e7e2      	b.n	8008fea <_dtoa_r+0xa0a>
 8009024:	9904      	ldr	r1, [sp, #16]
 8009026:	2900      	cmp	r1, #0
 8009028:	db04      	blt.n	8009034 <_dtoa_r+0xa54>
 800902a:	9807      	ldr	r0, [sp, #28]
 800902c:	4301      	orrs	r1, r0
 800902e:	9806      	ldr	r0, [sp, #24]
 8009030:	4301      	orrs	r1, r0
 8009032:	d120      	bne.n	8009076 <_dtoa_r+0xa96>
 8009034:	2a00      	cmp	r2, #0
 8009036:	ddee      	ble.n	8009016 <_dtoa_r+0xa36>
 8009038:	9902      	ldr	r1, [sp, #8]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2201      	movs	r2, #1
 800903e:	4648      	mov	r0, r9
 8009040:	f000 fba4 	bl	800978c <__lshift>
 8009044:	4621      	mov	r1, r4
 8009046:	9002      	str	r0, [sp, #8]
 8009048:	f000 fc0c 	bl	8009864 <__mcmp>
 800904c:	2800      	cmp	r0, #0
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	dc02      	bgt.n	8009058 <_dtoa_r+0xa78>
 8009052:	d1e0      	bne.n	8009016 <_dtoa_r+0xa36>
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	d5de      	bpl.n	8009016 <_dtoa_r+0xa36>
 8009058:	2b39      	cmp	r3, #57	@ 0x39
 800905a:	d1da      	bne.n	8009012 <_dtoa_r+0xa32>
 800905c:	2339      	movs	r3, #57	@ 0x39
 800905e:	f88b 3000 	strb.w	r3, [fp]
 8009062:	4633      	mov	r3, r6
 8009064:	461e      	mov	r6, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800906c:	2a39      	cmp	r2, #57	@ 0x39
 800906e:	d04e      	beq.n	800910e <_dtoa_r+0xb2e>
 8009070:	3201      	adds	r2, #1
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	e501      	b.n	8008a7a <_dtoa_r+0x49a>
 8009076:	2a00      	cmp	r2, #0
 8009078:	dd03      	ble.n	8009082 <_dtoa_r+0xaa2>
 800907a:	2b39      	cmp	r3, #57	@ 0x39
 800907c:	d0ee      	beq.n	800905c <_dtoa_r+0xa7c>
 800907e:	3301      	adds	r3, #1
 8009080:	e7c9      	b.n	8009016 <_dtoa_r+0xa36>
 8009082:	9a00      	ldr	r2, [sp, #0]
 8009084:	9908      	ldr	r1, [sp, #32]
 8009086:	f802 3c01 	strb.w	r3, [r2, #-1]
 800908a:	428a      	cmp	r2, r1
 800908c:	d028      	beq.n	80090e0 <_dtoa_r+0xb00>
 800908e:	9902      	ldr	r1, [sp, #8]
 8009090:	2300      	movs	r3, #0
 8009092:	220a      	movs	r2, #10
 8009094:	4648      	mov	r0, r9
 8009096:	f000 f9d5 	bl	8009444 <__multadd>
 800909a:	42af      	cmp	r7, r5
 800909c:	9002      	str	r0, [sp, #8]
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	f04f 020a 	mov.w	r2, #10
 80090a6:	4639      	mov	r1, r7
 80090a8:	4648      	mov	r0, r9
 80090aa:	d107      	bne.n	80090bc <_dtoa_r+0xadc>
 80090ac:	f000 f9ca 	bl	8009444 <__multadd>
 80090b0:	4607      	mov	r7, r0
 80090b2:	4605      	mov	r5, r0
 80090b4:	9b00      	ldr	r3, [sp, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	e777      	b.n	8008fac <_dtoa_r+0x9cc>
 80090bc:	f000 f9c2 	bl	8009444 <__multadd>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4607      	mov	r7, r0
 80090c4:	2300      	movs	r3, #0
 80090c6:	220a      	movs	r2, #10
 80090c8:	4648      	mov	r0, r9
 80090ca:	f000 f9bb 	bl	8009444 <__multadd>
 80090ce:	4605      	mov	r5, r0
 80090d0:	e7f0      	b.n	80090b4 <_dtoa_r+0xad4>
 80090d2:	f1bb 0f00 	cmp.w	fp, #0
 80090d6:	bfcc      	ite	gt
 80090d8:	465e      	movgt	r6, fp
 80090da:	2601      	movle	r6, #1
 80090dc:	4456      	add	r6, sl
 80090de:	2700      	movs	r7, #0
 80090e0:	9902      	ldr	r1, [sp, #8]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	2201      	movs	r2, #1
 80090e6:	4648      	mov	r0, r9
 80090e8:	f000 fb50 	bl	800978c <__lshift>
 80090ec:	4621      	mov	r1, r4
 80090ee:	9002      	str	r0, [sp, #8]
 80090f0:	f000 fbb8 	bl	8009864 <__mcmp>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	dcb4      	bgt.n	8009062 <_dtoa_r+0xa82>
 80090f8:	d102      	bne.n	8009100 <_dtoa_r+0xb20>
 80090fa:	9b00      	ldr	r3, [sp, #0]
 80090fc:	07db      	lsls	r3, r3, #31
 80090fe:	d4b0      	bmi.n	8009062 <_dtoa_r+0xa82>
 8009100:	4633      	mov	r3, r6
 8009102:	461e      	mov	r6, r3
 8009104:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009108:	2a30      	cmp	r2, #48	@ 0x30
 800910a:	d0fa      	beq.n	8009102 <_dtoa_r+0xb22>
 800910c:	e4b5      	b.n	8008a7a <_dtoa_r+0x49a>
 800910e:	459a      	cmp	sl, r3
 8009110:	d1a8      	bne.n	8009064 <_dtoa_r+0xa84>
 8009112:	2331      	movs	r3, #49	@ 0x31
 8009114:	f108 0801 	add.w	r8, r8, #1
 8009118:	f88a 3000 	strb.w	r3, [sl]
 800911c:	e4ad      	b.n	8008a7a <_dtoa_r+0x49a>
 800911e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009120:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800917c <_dtoa_r+0xb9c>
 8009124:	b11b      	cbz	r3, 800912e <_dtoa_r+0xb4e>
 8009126:	f10a 0308 	add.w	r3, sl, #8
 800912a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4650      	mov	r0, sl
 8009130:	b017      	add	sp, #92	@ 0x5c
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	2b01      	cmp	r3, #1
 800913a:	f77f ae2e 	ble.w	8008d9a <_dtoa_r+0x7ba>
 800913e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009140:	9308      	str	r3, [sp, #32]
 8009142:	2001      	movs	r0, #1
 8009144:	e64d      	b.n	8008de2 <_dtoa_r+0x802>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	f77f aed9 	ble.w	8008f00 <_dtoa_r+0x920>
 800914e:	4656      	mov	r6, sl
 8009150:	9802      	ldr	r0, [sp, #8]
 8009152:	4621      	mov	r1, r4
 8009154:	f7ff f9b9 	bl	80084ca <quorem>
 8009158:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800915c:	f806 3b01 	strb.w	r3, [r6], #1
 8009160:	eba6 020a 	sub.w	r2, r6, sl
 8009164:	4593      	cmp	fp, r2
 8009166:	ddb4      	ble.n	80090d2 <_dtoa_r+0xaf2>
 8009168:	9902      	ldr	r1, [sp, #8]
 800916a:	2300      	movs	r3, #0
 800916c:	220a      	movs	r2, #10
 800916e:	4648      	mov	r0, r9
 8009170:	f000 f968 	bl	8009444 <__multadd>
 8009174:	9002      	str	r0, [sp, #8]
 8009176:	e7eb      	b.n	8009150 <_dtoa_r+0xb70>
 8009178:	0800a72c 	.word	0x0800a72c
 800917c:	0800a6b0 	.word	0x0800a6b0

08009180 <_free_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4605      	mov	r5, r0
 8009184:	2900      	cmp	r1, #0
 8009186:	d041      	beq.n	800920c <_free_r+0x8c>
 8009188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800918c:	1f0c      	subs	r4, r1, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfb8      	it	lt
 8009192:	18e4      	addlt	r4, r4, r3
 8009194:	f000 f8e8 	bl	8009368 <__malloc_lock>
 8009198:	4a1d      	ldr	r2, [pc, #116]	@ (8009210 <_free_r+0x90>)
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	b933      	cbnz	r3, 80091ac <_free_r+0x2c>
 800919e:	6063      	str	r3, [r4, #4]
 80091a0:	6014      	str	r4, [r2, #0]
 80091a2:	4628      	mov	r0, r5
 80091a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091a8:	f000 b8e4 	b.w	8009374 <__malloc_unlock>
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d908      	bls.n	80091c2 <_free_r+0x42>
 80091b0:	6820      	ldr	r0, [r4, #0]
 80091b2:	1821      	adds	r1, r4, r0
 80091b4:	428b      	cmp	r3, r1
 80091b6:	bf01      	itttt	eq
 80091b8:	6819      	ldreq	r1, [r3, #0]
 80091ba:	685b      	ldreq	r3, [r3, #4]
 80091bc:	1809      	addeq	r1, r1, r0
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	e7ed      	b.n	800919e <_free_r+0x1e>
 80091c2:	461a      	mov	r2, r3
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	b10b      	cbz	r3, 80091cc <_free_r+0x4c>
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d9fa      	bls.n	80091c2 <_free_r+0x42>
 80091cc:	6811      	ldr	r1, [r2, #0]
 80091ce:	1850      	adds	r0, r2, r1
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d10b      	bne.n	80091ec <_free_r+0x6c>
 80091d4:	6820      	ldr	r0, [r4, #0]
 80091d6:	4401      	add	r1, r0
 80091d8:	1850      	adds	r0, r2, r1
 80091da:	4283      	cmp	r3, r0
 80091dc:	6011      	str	r1, [r2, #0]
 80091de:	d1e0      	bne.n	80091a2 <_free_r+0x22>
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	6053      	str	r3, [r2, #4]
 80091e6:	4408      	add	r0, r1
 80091e8:	6010      	str	r0, [r2, #0]
 80091ea:	e7da      	b.n	80091a2 <_free_r+0x22>
 80091ec:	d902      	bls.n	80091f4 <_free_r+0x74>
 80091ee:	230c      	movs	r3, #12
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	e7d6      	b.n	80091a2 <_free_r+0x22>
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	1821      	adds	r1, r4, r0
 80091f8:	428b      	cmp	r3, r1
 80091fa:	bf04      	itt	eq
 80091fc:	6819      	ldreq	r1, [r3, #0]
 80091fe:	685b      	ldreq	r3, [r3, #4]
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	bf04      	itt	eq
 8009204:	1809      	addeq	r1, r1, r0
 8009206:	6021      	streq	r1, [r4, #0]
 8009208:	6054      	str	r4, [r2, #4]
 800920a:	e7ca      	b.n	80091a2 <_free_r+0x22>
 800920c:	bd38      	pop	{r3, r4, r5, pc}
 800920e:	bf00      	nop
 8009210:	200005bc 	.word	0x200005bc

08009214 <malloc>:
 8009214:	4b02      	ldr	r3, [pc, #8]	@ (8009220 <malloc+0xc>)
 8009216:	4601      	mov	r1, r0
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f000 b825 	b.w	8009268 <_malloc_r>
 800921e:	bf00      	nop
 8009220:	20000024 	.word	0x20000024

08009224 <sbrk_aligned>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4e0f      	ldr	r6, [pc, #60]	@ (8009264 <sbrk_aligned+0x40>)
 8009228:	460c      	mov	r4, r1
 800922a:	6831      	ldr	r1, [r6, #0]
 800922c:	4605      	mov	r5, r0
 800922e:	b911      	cbnz	r1, 8009236 <sbrk_aligned+0x12>
 8009230:	f000 fe92 	bl	8009f58 <_sbrk_r>
 8009234:	6030      	str	r0, [r6, #0]
 8009236:	4621      	mov	r1, r4
 8009238:	4628      	mov	r0, r5
 800923a:	f000 fe8d 	bl	8009f58 <_sbrk_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d103      	bne.n	800924a <sbrk_aligned+0x26>
 8009242:	f04f 34ff 	mov.w	r4, #4294967295
 8009246:	4620      	mov	r0, r4
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	1cc4      	adds	r4, r0, #3
 800924c:	f024 0403 	bic.w	r4, r4, #3
 8009250:	42a0      	cmp	r0, r4
 8009252:	d0f8      	beq.n	8009246 <sbrk_aligned+0x22>
 8009254:	1a21      	subs	r1, r4, r0
 8009256:	4628      	mov	r0, r5
 8009258:	f000 fe7e 	bl	8009f58 <_sbrk_r>
 800925c:	3001      	adds	r0, #1
 800925e:	d1f2      	bne.n	8009246 <sbrk_aligned+0x22>
 8009260:	e7ef      	b.n	8009242 <sbrk_aligned+0x1e>
 8009262:	bf00      	nop
 8009264:	200005b8 	.word	0x200005b8

08009268 <_malloc_r>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	1ccd      	adds	r5, r1, #3
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	2d00      	cmp	r5, #0
 800927c:	4606      	mov	r6, r0
 800927e:	db01      	blt.n	8009284 <_malloc_r+0x1c>
 8009280:	42a9      	cmp	r1, r5
 8009282:	d904      	bls.n	800928e <_malloc_r+0x26>
 8009284:	230c      	movs	r3, #12
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	2000      	movs	r0, #0
 800928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009364 <_malloc_r+0xfc>
 8009292:	f000 f869 	bl	8009368 <__malloc_lock>
 8009296:	f8d8 3000 	ldr.w	r3, [r8]
 800929a:	461c      	mov	r4, r3
 800929c:	bb44      	cbnz	r4, 80092f0 <_malloc_r+0x88>
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff ffbf 	bl	8009224 <sbrk_aligned>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	4604      	mov	r4, r0
 80092aa:	d158      	bne.n	800935e <_malloc_r+0xf6>
 80092ac:	f8d8 4000 	ldr.w	r4, [r8]
 80092b0:	4627      	mov	r7, r4
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	d143      	bne.n	800933e <_malloc_r+0xd6>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d04b      	beq.n	8009352 <_malloc_r+0xea>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	eb04 0903 	add.w	r9, r4, r3
 80092c4:	f000 fe48 	bl	8009f58 <_sbrk_r>
 80092c8:	4581      	cmp	r9, r0
 80092ca:	d142      	bne.n	8009352 <_malloc_r+0xea>
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	1a6d      	subs	r5, r5, r1
 80092d0:	4629      	mov	r1, r5
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7ff ffa6 	bl	8009224 <sbrk_aligned>
 80092d8:	3001      	adds	r0, #1
 80092da:	d03a      	beq.n	8009352 <_malloc_r+0xea>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	442b      	add	r3, r5
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	f8d8 3000 	ldr.w	r3, [r8]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	bb62      	cbnz	r2, 8009344 <_malloc_r+0xdc>
 80092ea:	f8c8 7000 	str.w	r7, [r8]
 80092ee:	e00f      	b.n	8009310 <_malloc_r+0xa8>
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	1b52      	subs	r2, r2, r5
 80092f4:	d420      	bmi.n	8009338 <_malloc_r+0xd0>
 80092f6:	2a0b      	cmp	r2, #11
 80092f8:	d917      	bls.n	800932a <_malloc_r+0xc2>
 80092fa:	1961      	adds	r1, r4, r5
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	6025      	str	r5, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	6059      	strne	r1, [r3, #4]
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	bf08      	it	eq
 8009308:	f8c8 1000 	streq.w	r1, [r8]
 800930c:	5162      	str	r2, [r4, r5]
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 f82f 	bl	8009374 <__malloc_unlock>
 8009316:	f104 000b 	add.w	r0, r4, #11
 800931a:	1d23      	adds	r3, r4, #4
 800931c:	f020 0007 	bic.w	r0, r0, #7
 8009320:	1ac2      	subs	r2, r0, r3
 8009322:	bf1c      	itt	ne
 8009324:	1a1b      	subne	r3, r3, r0
 8009326:	50a3      	strne	r3, [r4, r2]
 8009328:	e7af      	b.n	800928a <_malloc_r+0x22>
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	42a3      	cmp	r3, r4
 800932e:	bf0c      	ite	eq
 8009330:	f8c8 2000 	streq.w	r2, [r8]
 8009334:	605a      	strne	r2, [r3, #4]
 8009336:	e7eb      	b.n	8009310 <_malloc_r+0xa8>
 8009338:	4623      	mov	r3, r4
 800933a:	6864      	ldr	r4, [r4, #4]
 800933c:	e7ae      	b.n	800929c <_malloc_r+0x34>
 800933e:	463c      	mov	r4, r7
 8009340:	687f      	ldr	r7, [r7, #4]
 8009342:	e7b6      	b.n	80092b2 <_malloc_r+0x4a>
 8009344:	461a      	mov	r2, r3
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	42a3      	cmp	r3, r4
 800934a:	d1fb      	bne.n	8009344 <_malloc_r+0xdc>
 800934c:	2300      	movs	r3, #0
 800934e:	6053      	str	r3, [r2, #4]
 8009350:	e7de      	b.n	8009310 <_malloc_r+0xa8>
 8009352:	230c      	movs	r3, #12
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	4630      	mov	r0, r6
 8009358:	f000 f80c 	bl	8009374 <__malloc_unlock>
 800935c:	e794      	b.n	8009288 <_malloc_r+0x20>
 800935e:	6005      	str	r5, [r0, #0]
 8009360:	e7d6      	b.n	8009310 <_malloc_r+0xa8>
 8009362:	bf00      	nop
 8009364:	200005bc 	.word	0x200005bc

08009368 <__malloc_lock>:
 8009368:	4801      	ldr	r0, [pc, #4]	@ (8009370 <__malloc_lock+0x8>)
 800936a:	f7ff b8ac 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 800936e:	bf00      	nop
 8009370:	200005b4 	.word	0x200005b4

08009374 <__malloc_unlock>:
 8009374:	4801      	ldr	r0, [pc, #4]	@ (800937c <__malloc_unlock+0x8>)
 8009376:	f7ff b8a7 	b.w	80084c8 <__retarget_lock_release_recursive>
 800937a:	bf00      	nop
 800937c:	200005b4 	.word	0x200005b4

08009380 <_Balloc>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	69c6      	ldr	r6, [r0, #28]
 8009384:	4604      	mov	r4, r0
 8009386:	460d      	mov	r5, r1
 8009388:	b976      	cbnz	r6, 80093a8 <_Balloc+0x28>
 800938a:	2010      	movs	r0, #16
 800938c:	f7ff ff42 	bl	8009214 <malloc>
 8009390:	4602      	mov	r2, r0
 8009392:	61e0      	str	r0, [r4, #28]
 8009394:	b920      	cbnz	r0, 80093a0 <_Balloc+0x20>
 8009396:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <_Balloc+0x78>)
 8009398:	4818      	ldr	r0, [pc, #96]	@ (80093fc <_Balloc+0x7c>)
 800939a:	216b      	movs	r1, #107	@ 0x6b
 800939c:	f000 fdfa 	bl	8009f94 <__assert_func>
 80093a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a4:	6006      	str	r6, [r0, #0]
 80093a6:	60c6      	str	r6, [r0, #12]
 80093a8:	69e6      	ldr	r6, [r4, #28]
 80093aa:	68f3      	ldr	r3, [r6, #12]
 80093ac:	b183      	cbz	r3, 80093d0 <_Balloc+0x50>
 80093ae:	69e3      	ldr	r3, [r4, #28]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093b6:	b9b8      	cbnz	r0, 80093e8 <_Balloc+0x68>
 80093b8:	2101      	movs	r1, #1
 80093ba:	fa01 f605 	lsl.w	r6, r1, r5
 80093be:	1d72      	adds	r2, r6, #5
 80093c0:	0092      	lsls	r2, r2, #2
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fe04 	bl	8009fd0 <_calloc_r>
 80093c8:	b160      	cbz	r0, 80093e4 <_Balloc+0x64>
 80093ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ce:	e00e      	b.n	80093ee <_Balloc+0x6e>
 80093d0:	2221      	movs	r2, #33	@ 0x21
 80093d2:	2104      	movs	r1, #4
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fdfb 	bl	8009fd0 <_calloc_r>
 80093da:	69e3      	ldr	r3, [r4, #28]
 80093dc:	60f0      	str	r0, [r6, #12]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <_Balloc+0x2e>
 80093e4:	2000      	movs	r0, #0
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	6802      	ldr	r2, [r0, #0]
 80093ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ee:	2300      	movs	r3, #0
 80093f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093f4:	e7f7      	b.n	80093e6 <_Balloc+0x66>
 80093f6:	bf00      	nop
 80093f8:	0800a6bd 	.word	0x0800a6bd
 80093fc:	0800a73d 	.word	0x0800a73d

08009400 <_Bfree>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	69c6      	ldr	r6, [r0, #28]
 8009404:	4605      	mov	r5, r0
 8009406:	460c      	mov	r4, r1
 8009408:	b976      	cbnz	r6, 8009428 <_Bfree+0x28>
 800940a:	2010      	movs	r0, #16
 800940c:	f7ff ff02 	bl	8009214 <malloc>
 8009410:	4602      	mov	r2, r0
 8009412:	61e8      	str	r0, [r5, #28]
 8009414:	b920      	cbnz	r0, 8009420 <_Bfree+0x20>
 8009416:	4b09      	ldr	r3, [pc, #36]	@ (800943c <_Bfree+0x3c>)
 8009418:	4809      	ldr	r0, [pc, #36]	@ (8009440 <_Bfree+0x40>)
 800941a:	218f      	movs	r1, #143	@ 0x8f
 800941c:	f000 fdba 	bl	8009f94 <__assert_func>
 8009420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009424:	6006      	str	r6, [r0, #0]
 8009426:	60c6      	str	r6, [r0, #12]
 8009428:	b13c      	cbz	r4, 800943a <_Bfree+0x3a>
 800942a:	69eb      	ldr	r3, [r5, #28]
 800942c:	6862      	ldr	r2, [r4, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009434:	6021      	str	r1, [r4, #0]
 8009436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	0800a6bd 	.word	0x0800a6bd
 8009440:	0800a73d 	.word	0x0800a73d

08009444 <__multadd>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	690d      	ldr	r5, [r1, #16]
 800944a:	4607      	mov	r7, r0
 800944c:	460c      	mov	r4, r1
 800944e:	461e      	mov	r6, r3
 8009450:	f101 0c14 	add.w	ip, r1, #20
 8009454:	2000      	movs	r0, #0
 8009456:	f8dc 3000 	ldr.w	r3, [ip]
 800945a:	b299      	uxth	r1, r3
 800945c:	fb02 6101 	mla	r1, r2, r1, r6
 8009460:	0c1e      	lsrs	r6, r3, #16
 8009462:	0c0b      	lsrs	r3, r1, #16
 8009464:	fb02 3306 	mla	r3, r2, r6, r3
 8009468:	b289      	uxth	r1, r1
 800946a:	3001      	adds	r0, #1
 800946c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009470:	4285      	cmp	r5, r0
 8009472:	f84c 1b04 	str.w	r1, [ip], #4
 8009476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800947a:	dcec      	bgt.n	8009456 <__multadd+0x12>
 800947c:	b30e      	cbz	r6, 80094c2 <__multadd+0x7e>
 800947e:	68a3      	ldr	r3, [r4, #8]
 8009480:	42ab      	cmp	r3, r5
 8009482:	dc19      	bgt.n	80094b8 <__multadd+0x74>
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	4638      	mov	r0, r7
 8009488:	3101      	adds	r1, #1
 800948a:	f7ff ff79 	bl	8009380 <_Balloc>
 800948e:	4680      	mov	r8, r0
 8009490:	b928      	cbnz	r0, 800949e <__multadd+0x5a>
 8009492:	4602      	mov	r2, r0
 8009494:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <__multadd+0x84>)
 8009496:	480d      	ldr	r0, [pc, #52]	@ (80094cc <__multadd+0x88>)
 8009498:	21ba      	movs	r1, #186	@ 0xba
 800949a:	f000 fd7b 	bl	8009f94 <__assert_func>
 800949e:	6922      	ldr	r2, [r4, #16]
 80094a0:	3202      	adds	r2, #2
 80094a2:	f104 010c 	add.w	r1, r4, #12
 80094a6:	0092      	lsls	r2, r2, #2
 80094a8:	300c      	adds	r0, #12
 80094aa:	f000 fd65 	bl	8009f78 <memcpy>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4638      	mov	r0, r7
 80094b2:	f7ff ffa5 	bl	8009400 <_Bfree>
 80094b6:	4644      	mov	r4, r8
 80094b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094bc:	3501      	adds	r5, #1
 80094be:	615e      	str	r6, [r3, #20]
 80094c0:	6125      	str	r5, [r4, #16]
 80094c2:	4620      	mov	r0, r4
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	0800a72c 	.word	0x0800a72c
 80094cc:	0800a73d 	.word	0x0800a73d

080094d0 <__hi0bits>:
 80094d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094d4:	4603      	mov	r3, r0
 80094d6:	bf36      	itet	cc
 80094d8:	0403      	lslcc	r3, r0, #16
 80094da:	2000      	movcs	r0, #0
 80094dc:	2010      	movcc	r0, #16
 80094de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094e2:	bf3c      	itt	cc
 80094e4:	021b      	lslcc	r3, r3, #8
 80094e6:	3008      	addcc	r0, #8
 80094e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094ec:	bf3c      	itt	cc
 80094ee:	011b      	lslcc	r3, r3, #4
 80094f0:	3004      	addcc	r0, #4
 80094f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f6:	bf3c      	itt	cc
 80094f8:	009b      	lslcc	r3, r3, #2
 80094fa:	3002      	addcc	r0, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	db05      	blt.n	800950c <__hi0bits+0x3c>
 8009500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009504:	f100 0001 	add.w	r0, r0, #1
 8009508:	bf08      	it	eq
 800950a:	2020      	moveq	r0, #32
 800950c:	4770      	bx	lr

0800950e <__lo0bits>:
 800950e:	6803      	ldr	r3, [r0, #0]
 8009510:	4602      	mov	r2, r0
 8009512:	f013 0007 	ands.w	r0, r3, #7
 8009516:	d00b      	beq.n	8009530 <__lo0bits+0x22>
 8009518:	07d9      	lsls	r1, r3, #31
 800951a:	d421      	bmi.n	8009560 <__lo0bits+0x52>
 800951c:	0798      	lsls	r0, r3, #30
 800951e:	bf49      	itett	mi
 8009520:	085b      	lsrmi	r3, r3, #1
 8009522:	089b      	lsrpl	r3, r3, #2
 8009524:	2001      	movmi	r0, #1
 8009526:	6013      	strmi	r3, [r2, #0]
 8009528:	bf5c      	itt	pl
 800952a:	6013      	strpl	r3, [r2, #0]
 800952c:	2002      	movpl	r0, #2
 800952e:	4770      	bx	lr
 8009530:	b299      	uxth	r1, r3
 8009532:	b909      	cbnz	r1, 8009538 <__lo0bits+0x2a>
 8009534:	0c1b      	lsrs	r3, r3, #16
 8009536:	2010      	movs	r0, #16
 8009538:	b2d9      	uxtb	r1, r3
 800953a:	b909      	cbnz	r1, 8009540 <__lo0bits+0x32>
 800953c:	3008      	adds	r0, #8
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	0719      	lsls	r1, r3, #28
 8009542:	bf04      	itt	eq
 8009544:	091b      	lsreq	r3, r3, #4
 8009546:	3004      	addeq	r0, #4
 8009548:	0799      	lsls	r1, r3, #30
 800954a:	bf04      	itt	eq
 800954c:	089b      	lsreq	r3, r3, #2
 800954e:	3002      	addeq	r0, #2
 8009550:	07d9      	lsls	r1, r3, #31
 8009552:	d403      	bmi.n	800955c <__lo0bits+0x4e>
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	f100 0001 	add.w	r0, r0, #1
 800955a:	d003      	beq.n	8009564 <__lo0bits+0x56>
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	4770      	bx	lr
 8009560:	2000      	movs	r0, #0
 8009562:	4770      	bx	lr
 8009564:	2020      	movs	r0, #32
 8009566:	4770      	bx	lr

08009568 <__i2b>:
 8009568:	b510      	push	{r4, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	2101      	movs	r1, #1
 800956e:	f7ff ff07 	bl	8009380 <_Balloc>
 8009572:	4602      	mov	r2, r0
 8009574:	b928      	cbnz	r0, 8009582 <__i2b+0x1a>
 8009576:	4b05      	ldr	r3, [pc, #20]	@ (800958c <__i2b+0x24>)
 8009578:	4805      	ldr	r0, [pc, #20]	@ (8009590 <__i2b+0x28>)
 800957a:	f240 1145 	movw	r1, #325	@ 0x145
 800957e:	f000 fd09 	bl	8009f94 <__assert_func>
 8009582:	2301      	movs	r3, #1
 8009584:	6144      	str	r4, [r0, #20]
 8009586:	6103      	str	r3, [r0, #16]
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	0800a72c 	.word	0x0800a72c
 8009590:	0800a73d 	.word	0x0800a73d

08009594 <__multiply>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4617      	mov	r7, r2
 800959a:	690a      	ldr	r2, [r1, #16]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	429a      	cmp	r2, r3
 80095a0:	bfa8      	it	ge
 80095a2:	463b      	movge	r3, r7
 80095a4:	4689      	mov	r9, r1
 80095a6:	bfa4      	itt	ge
 80095a8:	460f      	movge	r7, r1
 80095aa:	4699      	movge	r9, r3
 80095ac:	693d      	ldr	r5, [r7, #16]
 80095ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	eb05 060a 	add.w	r6, r5, sl
 80095ba:	42b3      	cmp	r3, r6
 80095bc:	b085      	sub	sp, #20
 80095be:	bfb8      	it	lt
 80095c0:	3101      	addlt	r1, #1
 80095c2:	f7ff fedd 	bl	8009380 <_Balloc>
 80095c6:	b930      	cbnz	r0, 80095d6 <__multiply+0x42>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b41      	ldr	r3, [pc, #260]	@ (80096d0 <__multiply+0x13c>)
 80095cc:	4841      	ldr	r0, [pc, #260]	@ (80096d4 <__multiply+0x140>)
 80095ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095d2:	f000 fcdf 	bl	8009f94 <__assert_func>
 80095d6:	f100 0414 	add.w	r4, r0, #20
 80095da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80095de:	4623      	mov	r3, r4
 80095e0:	2200      	movs	r2, #0
 80095e2:	4573      	cmp	r3, lr
 80095e4:	d320      	bcc.n	8009628 <__multiply+0x94>
 80095e6:	f107 0814 	add.w	r8, r7, #20
 80095ea:	f109 0114 	add.w	r1, r9, #20
 80095ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80095f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80095f6:	9302      	str	r3, [sp, #8]
 80095f8:	1beb      	subs	r3, r5, r7
 80095fa:	3b15      	subs	r3, #21
 80095fc:	f023 0303 	bic.w	r3, r3, #3
 8009600:	3304      	adds	r3, #4
 8009602:	3715      	adds	r7, #21
 8009604:	42bd      	cmp	r5, r7
 8009606:	bf38      	it	cc
 8009608:	2304      	movcc	r3, #4
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	9b02      	ldr	r3, [sp, #8]
 800960e:	9103      	str	r1, [sp, #12]
 8009610:	428b      	cmp	r3, r1
 8009612:	d80c      	bhi.n	800962e <__multiply+0x9a>
 8009614:	2e00      	cmp	r6, #0
 8009616:	dd03      	ble.n	8009620 <__multiply+0x8c>
 8009618:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800961c:	2b00      	cmp	r3, #0
 800961e:	d055      	beq.n	80096cc <__multiply+0x138>
 8009620:	6106      	str	r6, [r0, #16]
 8009622:	b005      	add	sp, #20
 8009624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009628:	f843 2b04 	str.w	r2, [r3], #4
 800962c:	e7d9      	b.n	80095e2 <__multiply+0x4e>
 800962e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009632:	f1ba 0f00 	cmp.w	sl, #0
 8009636:	d01f      	beq.n	8009678 <__multiply+0xe4>
 8009638:	46c4      	mov	ip, r8
 800963a:	46a1      	mov	r9, r4
 800963c:	2700      	movs	r7, #0
 800963e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009642:	f8d9 3000 	ldr.w	r3, [r9]
 8009646:	fa1f fb82 	uxth.w	fp, r2
 800964a:	b29b      	uxth	r3, r3
 800964c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009650:	443b      	add	r3, r7
 8009652:	f8d9 7000 	ldr.w	r7, [r9]
 8009656:	0c12      	lsrs	r2, r2, #16
 8009658:	0c3f      	lsrs	r7, r7, #16
 800965a:	fb0a 7202 	mla	r2, sl, r2, r7
 800965e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009662:	b29b      	uxth	r3, r3
 8009664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009668:	4565      	cmp	r5, ip
 800966a:	f849 3b04 	str.w	r3, [r9], #4
 800966e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009672:	d8e4      	bhi.n	800963e <__multiply+0xaa>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	50e7      	str	r7, [r4, r3]
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800967e:	3104      	adds	r1, #4
 8009680:	f1b9 0f00 	cmp.w	r9, #0
 8009684:	d020      	beq.n	80096c8 <__multiply+0x134>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	4647      	mov	r7, r8
 800968a:	46a4      	mov	ip, r4
 800968c:	f04f 0a00 	mov.w	sl, #0
 8009690:	f8b7 b000 	ldrh.w	fp, [r7]
 8009694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009698:	fb09 220b 	mla	r2, r9, fp, r2
 800969c:	4452      	add	r2, sl
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a4:	f84c 3b04 	str.w	r3, [ip], #4
 80096a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80096ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80096b4:	fb09 330a 	mla	r3, r9, sl, r3
 80096b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096bc:	42bd      	cmp	r5, r7
 80096be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c2:	d8e5      	bhi.n	8009690 <__multiply+0xfc>
 80096c4:	9a01      	ldr	r2, [sp, #4]
 80096c6:	50a3      	str	r3, [r4, r2]
 80096c8:	3404      	adds	r4, #4
 80096ca:	e79f      	b.n	800960c <__multiply+0x78>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	e7a1      	b.n	8009614 <__multiply+0x80>
 80096d0:	0800a72c 	.word	0x0800a72c
 80096d4:	0800a73d 	.word	0x0800a73d

080096d8 <__pow5mult>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4615      	mov	r5, r2
 80096de:	f012 0203 	ands.w	r2, r2, #3
 80096e2:	4607      	mov	r7, r0
 80096e4:	460e      	mov	r6, r1
 80096e6:	d007      	beq.n	80096f8 <__pow5mult+0x20>
 80096e8:	4c25      	ldr	r4, [pc, #148]	@ (8009780 <__pow5mult+0xa8>)
 80096ea:	3a01      	subs	r2, #1
 80096ec:	2300      	movs	r3, #0
 80096ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f2:	f7ff fea7 	bl	8009444 <__multadd>
 80096f6:	4606      	mov	r6, r0
 80096f8:	10ad      	asrs	r5, r5, #2
 80096fa:	d03d      	beq.n	8009778 <__pow5mult+0xa0>
 80096fc:	69fc      	ldr	r4, [r7, #28]
 80096fe:	b97c      	cbnz	r4, 8009720 <__pow5mult+0x48>
 8009700:	2010      	movs	r0, #16
 8009702:	f7ff fd87 	bl	8009214 <malloc>
 8009706:	4602      	mov	r2, r0
 8009708:	61f8      	str	r0, [r7, #28]
 800970a:	b928      	cbnz	r0, 8009718 <__pow5mult+0x40>
 800970c:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <__pow5mult+0xac>)
 800970e:	481e      	ldr	r0, [pc, #120]	@ (8009788 <__pow5mult+0xb0>)
 8009710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009714:	f000 fc3e 	bl	8009f94 <__assert_func>
 8009718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971c:	6004      	str	r4, [r0, #0]
 800971e:	60c4      	str	r4, [r0, #12]
 8009720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009728:	b94c      	cbnz	r4, 800973e <__pow5mult+0x66>
 800972a:	f240 2171 	movw	r1, #625	@ 0x271
 800972e:	4638      	mov	r0, r7
 8009730:	f7ff ff1a 	bl	8009568 <__i2b>
 8009734:	2300      	movs	r3, #0
 8009736:	f8c8 0008 	str.w	r0, [r8, #8]
 800973a:	4604      	mov	r4, r0
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	07eb      	lsls	r3, r5, #31
 8009744:	d50a      	bpl.n	800975c <__pow5mult+0x84>
 8009746:	4631      	mov	r1, r6
 8009748:	4622      	mov	r2, r4
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ff22 	bl	8009594 <__multiply>
 8009750:	4631      	mov	r1, r6
 8009752:	4680      	mov	r8, r0
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff fe53 	bl	8009400 <_Bfree>
 800975a:	4646      	mov	r6, r8
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	d00b      	beq.n	8009778 <__pow5mult+0xa0>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	b938      	cbnz	r0, 8009774 <__pow5mult+0x9c>
 8009764:	4622      	mov	r2, r4
 8009766:	4621      	mov	r1, r4
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ff13 	bl	8009594 <__multiply>
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f8c0 9000 	str.w	r9, [r0]
 8009774:	4604      	mov	r4, r0
 8009776:	e7e4      	b.n	8009742 <__pow5mult+0x6a>
 8009778:	4630      	mov	r0, r6
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	bf00      	nop
 8009780:	0800a7f0 	.word	0x0800a7f0
 8009784:	0800a6bd 	.word	0x0800a6bd
 8009788:	0800a73d 	.word	0x0800a73d

0800978c <__lshift>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	460c      	mov	r4, r1
 8009792:	6849      	ldr	r1, [r1, #4]
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	4607      	mov	r7, r0
 800979e:	4691      	mov	r9, r2
 80097a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a4:	f108 0601 	add.w	r6, r8, #1
 80097a8:	42b3      	cmp	r3, r6
 80097aa:	db0b      	blt.n	80097c4 <__lshift+0x38>
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff fde7 	bl	8009380 <_Balloc>
 80097b2:	4605      	mov	r5, r0
 80097b4:	b948      	cbnz	r0, 80097ca <__lshift+0x3e>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b28      	ldr	r3, [pc, #160]	@ (800985c <__lshift+0xd0>)
 80097ba:	4829      	ldr	r0, [pc, #164]	@ (8009860 <__lshift+0xd4>)
 80097bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097c0:	f000 fbe8 	bl	8009f94 <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	e7ee      	b.n	80097a8 <__lshift+0x1c>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f100 0114 	add.w	r1, r0, #20
 80097d0:	f100 0210 	add.w	r2, r0, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	4553      	cmp	r3, sl
 80097d8:	db33      	blt.n	8009842 <__lshift+0xb6>
 80097da:	6920      	ldr	r0, [r4, #16]
 80097dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e0:	f104 0314 	add.w	r3, r4, #20
 80097e4:	f019 091f 	ands.w	r9, r9, #31
 80097e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f0:	d02b      	beq.n	800984a <__lshift+0xbe>
 80097f2:	f1c9 0e20 	rsb	lr, r9, #32
 80097f6:	468a      	mov	sl, r1
 80097f8:	2200      	movs	r2, #0
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009800:	4310      	orrs	r0, r2
 8009802:	f84a 0b04 	str.w	r0, [sl], #4
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	459c      	cmp	ip, r3
 800980c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009810:	d8f3      	bhi.n	80097fa <__lshift+0x6e>
 8009812:	ebac 0304 	sub.w	r3, ip, r4
 8009816:	3b15      	subs	r3, #21
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	3304      	adds	r3, #4
 800981e:	f104 0015 	add.w	r0, r4, #21
 8009822:	4560      	cmp	r0, ip
 8009824:	bf88      	it	hi
 8009826:	2304      	movhi	r3, #4
 8009828:	50ca      	str	r2, [r1, r3]
 800982a:	b10a      	cbz	r2, 8009830 <__lshift+0xa4>
 800982c:	f108 0602 	add.w	r6, r8, #2
 8009830:	3e01      	subs	r6, #1
 8009832:	4638      	mov	r0, r7
 8009834:	612e      	str	r6, [r5, #16]
 8009836:	4621      	mov	r1, r4
 8009838:	f7ff fde2 	bl	8009400 <_Bfree>
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f842 0f04 	str.w	r0, [r2, #4]!
 8009846:	3301      	adds	r3, #1
 8009848:	e7c5      	b.n	80097d6 <__lshift+0x4a>
 800984a:	3904      	subs	r1, #4
 800984c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009850:	f841 2f04 	str.w	r2, [r1, #4]!
 8009854:	459c      	cmp	ip, r3
 8009856:	d8f9      	bhi.n	800984c <__lshift+0xc0>
 8009858:	e7ea      	b.n	8009830 <__lshift+0xa4>
 800985a:	bf00      	nop
 800985c:	0800a72c 	.word	0x0800a72c
 8009860:	0800a73d 	.word	0x0800a73d

08009864 <__mcmp>:
 8009864:	690a      	ldr	r2, [r1, #16]
 8009866:	4603      	mov	r3, r0
 8009868:	6900      	ldr	r0, [r0, #16]
 800986a:	1a80      	subs	r0, r0, r2
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	d10e      	bne.n	800988e <__mcmp+0x2a>
 8009870:	3314      	adds	r3, #20
 8009872:	3114      	adds	r1, #20
 8009874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800987c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009884:	4295      	cmp	r5, r2
 8009886:	d003      	beq.n	8009890 <__mcmp+0x2c>
 8009888:	d205      	bcs.n	8009896 <__mcmp+0x32>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	42a3      	cmp	r3, r4
 8009892:	d3f3      	bcc.n	800987c <__mcmp+0x18>
 8009894:	e7fb      	b.n	800988e <__mcmp+0x2a>
 8009896:	2001      	movs	r0, #1
 8009898:	e7f9      	b.n	800988e <__mcmp+0x2a>
	...

0800989c <__mdiff>:
 800989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	4689      	mov	r9, r1
 80098a2:	4606      	mov	r6, r0
 80098a4:	4611      	mov	r1, r2
 80098a6:	4648      	mov	r0, r9
 80098a8:	4614      	mov	r4, r2
 80098aa:	f7ff ffdb 	bl	8009864 <__mcmp>
 80098ae:	1e05      	subs	r5, r0, #0
 80098b0:	d112      	bne.n	80098d8 <__mdiff+0x3c>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fd63 	bl	8009380 <_Balloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__mdiff+0x2e>
 80098be:	4b3f      	ldr	r3, [pc, #252]	@ (80099bc <__mdiff+0x120>)
 80098c0:	f240 2137 	movw	r1, #567	@ 0x237
 80098c4:	483e      	ldr	r0, [pc, #248]	@ (80099c0 <__mdiff+0x124>)
 80098c6:	f000 fb65 	bl	8009f94 <__assert_func>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d0:	4610      	mov	r0, r2
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	bfbc      	itt	lt
 80098da:	464b      	movlt	r3, r9
 80098dc:	46a1      	movlt	r9, r4
 80098de:	4630      	mov	r0, r6
 80098e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098e4:	bfba      	itte	lt
 80098e6:	461c      	movlt	r4, r3
 80098e8:	2501      	movlt	r5, #1
 80098ea:	2500      	movge	r5, #0
 80098ec:	f7ff fd48 	bl	8009380 <_Balloc>
 80098f0:	4602      	mov	r2, r0
 80098f2:	b918      	cbnz	r0, 80098fc <__mdiff+0x60>
 80098f4:	4b31      	ldr	r3, [pc, #196]	@ (80099bc <__mdiff+0x120>)
 80098f6:	f240 2145 	movw	r1, #581	@ 0x245
 80098fa:	e7e3      	b.n	80098c4 <__mdiff+0x28>
 80098fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009900:	6926      	ldr	r6, [r4, #16]
 8009902:	60c5      	str	r5, [r0, #12]
 8009904:	f109 0310 	add.w	r3, r9, #16
 8009908:	f109 0514 	add.w	r5, r9, #20
 800990c:	f104 0e14 	add.w	lr, r4, #20
 8009910:	f100 0b14 	add.w	fp, r0, #20
 8009914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	46d9      	mov	r9, fp
 8009920:	f04f 0c00 	mov.w	ip, #0
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800992a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	fa1f f38a 	uxth.w	r3, sl
 8009934:	4619      	mov	r1, r3
 8009936:	b283      	uxth	r3, r0
 8009938:	1acb      	subs	r3, r1, r3
 800993a:	0c00      	lsrs	r0, r0, #16
 800993c:	4463      	add	r3, ip
 800993e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800994c:	4576      	cmp	r6, lr
 800994e:	f849 3b04 	str.w	r3, [r9], #4
 8009952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009956:	d8e5      	bhi.n	8009924 <__mdiff+0x88>
 8009958:	1b33      	subs	r3, r6, r4
 800995a:	3b15      	subs	r3, #21
 800995c:	f023 0303 	bic.w	r3, r3, #3
 8009960:	3415      	adds	r4, #21
 8009962:	3304      	adds	r3, #4
 8009964:	42a6      	cmp	r6, r4
 8009966:	bf38      	it	cc
 8009968:	2304      	movcc	r3, #4
 800996a:	441d      	add	r5, r3
 800996c:	445b      	add	r3, fp
 800996e:	461e      	mov	r6, r3
 8009970:	462c      	mov	r4, r5
 8009972:	4544      	cmp	r4, r8
 8009974:	d30e      	bcc.n	8009994 <__mdiff+0xf8>
 8009976:	f108 0103 	add.w	r1, r8, #3
 800997a:	1b49      	subs	r1, r1, r5
 800997c:	f021 0103 	bic.w	r1, r1, #3
 8009980:	3d03      	subs	r5, #3
 8009982:	45a8      	cmp	r8, r5
 8009984:	bf38      	it	cc
 8009986:	2100      	movcc	r1, #0
 8009988:	440b      	add	r3, r1
 800998a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800998e:	b191      	cbz	r1, 80099b6 <__mdiff+0x11a>
 8009990:	6117      	str	r7, [r2, #16]
 8009992:	e79d      	b.n	80098d0 <__mdiff+0x34>
 8009994:	f854 1b04 	ldr.w	r1, [r4], #4
 8009998:	46e6      	mov	lr, ip
 800999a:	0c08      	lsrs	r0, r1, #16
 800999c:	fa1c fc81 	uxtah	ip, ip, r1
 80099a0:	4471      	add	r1, lr
 80099a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099ac:	f846 1b04 	str.w	r1, [r6], #4
 80099b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099b4:	e7dd      	b.n	8009972 <__mdiff+0xd6>
 80099b6:	3f01      	subs	r7, #1
 80099b8:	e7e7      	b.n	800998a <__mdiff+0xee>
 80099ba:	bf00      	nop
 80099bc:	0800a72c 	.word	0x0800a72c
 80099c0:	0800a73d 	.word	0x0800a73d

080099c4 <__d2b>:
 80099c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099c8:	460f      	mov	r7, r1
 80099ca:	2101      	movs	r1, #1
 80099cc:	ec59 8b10 	vmov	r8, r9, d0
 80099d0:	4616      	mov	r6, r2
 80099d2:	f7ff fcd5 	bl	8009380 <_Balloc>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b930      	cbnz	r0, 80099e8 <__d2b+0x24>
 80099da:	4602      	mov	r2, r0
 80099dc:	4b23      	ldr	r3, [pc, #140]	@ (8009a6c <__d2b+0xa8>)
 80099de:	4824      	ldr	r0, [pc, #144]	@ (8009a70 <__d2b+0xac>)
 80099e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80099e4:	f000 fad6 	bl	8009f94 <__assert_func>
 80099e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099f0:	b10d      	cbz	r5, 80099f6 <__d2b+0x32>
 80099f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	f1b8 0300 	subs.w	r3, r8, #0
 80099fc:	d023      	beq.n	8009a46 <__d2b+0x82>
 80099fe:	4668      	mov	r0, sp
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	f7ff fd84 	bl	800950e <__lo0bits>
 8009a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a0a:	b1d0      	cbz	r0, 8009a42 <__d2b+0x7e>
 8009a0c:	f1c0 0320 	rsb	r3, r0, #32
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	430b      	orrs	r3, r1
 8009a16:	40c2      	lsrs	r2, r0
 8009a18:	6163      	str	r3, [r4, #20]
 8009a1a:	9201      	str	r2, [sp, #4]
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	61a3      	str	r3, [r4, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf0c      	ite	eq
 8009a24:	2201      	moveq	r2, #1
 8009a26:	2202      	movne	r2, #2
 8009a28:	6122      	str	r2, [r4, #16]
 8009a2a:	b1a5      	cbz	r5, 8009a56 <__d2b+0x92>
 8009a2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a30:	4405      	add	r5, r0
 8009a32:	603d      	str	r5, [r7, #0]
 8009a34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a38:	6030      	str	r0, [r6, #0]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	b003      	add	sp, #12
 8009a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a42:	6161      	str	r1, [r4, #20]
 8009a44:	e7ea      	b.n	8009a1c <__d2b+0x58>
 8009a46:	a801      	add	r0, sp, #4
 8009a48:	f7ff fd61 	bl	800950e <__lo0bits>
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	6163      	str	r3, [r4, #20]
 8009a50:	3020      	adds	r0, #32
 8009a52:	2201      	movs	r2, #1
 8009a54:	e7e8      	b.n	8009a28 <__d2b+0x64>
 8009a56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a5e:	6038      	str	r0, [r7, #0]
 8009a60:	6918      	ldr	r0, [r3, #16]
 8009a62:	f7ff fd35 	bl	80094d0 <__hi0bits>
 8009a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a6a:	e7e5      	b.n	8009a38 <__d2b+0x74>
 8009a6c:	0800a72c 	.word	0x0800a72c
 8009a70:	0800a73d 	.word	0x0800a73d

08009a74 <__sfputc_r>:
 8009a74:	6893      	ldr	r3, [r2, #8]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	b410      	push	{r4}
 8009a7c:	6093      	str	r3, [r2, #8]
 8009a7e:	da08      	bge.n	8009a92 <__sfputc_r+0x1e>
 8009a80:	6994      	ldr	r4, [r2, #24]
 8009a82:	42a3      	cmp	r3, r4
 8009a84:	db01      	blt.n	8009a8a <__sfputc_r+0x16>
 8009a86:	290a      	cmp	r1, #10
 8009a88:	d103      	bne.n	8009a92 <__sfputc_r+0x1e>
 8009a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8e:	f7fe bc08 	b.w	80082a2 <__swbuf_r>
 8009a92:	6813      	ldr	r3, [r2, #0]
 8009a94:	1c58      	adds	r0, r3, #1
 8009a96:	6010      	str	r0, [r2, #0]
 8009a98:	7019      	strb	r1, [r3, #0]
 8009a9a:	4608      	mov	r0, r1
 8009a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <__sfputs_r>:
 8009aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	18d5      	adds	r5, r2, r3
 8009aac:	42ac      	cmp	r4, r5
 8009aae:	d101      	bne.n	8009ab4 <__sfputs_r+0x12>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e007      	b.n	8009ac4 <__sfputs_r+0x22>
 8009ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab8:	463a      	mov	r2, r7
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff ffda 	bl	8009a74 <__sfputc_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d1f3      	bne.n	8009aac <__sfputs_r+0xa>
 8009ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ac8 <_vfiprintf_r>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	460d      	mov	r5, r1
 8009ace:	b09d      	sub	sp, #116	@ 0x74
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	4698      	mov	r8, r3
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	b118      	cbz	r0, 8009ae0 <_vfiprintf_r+0x18>
 8009ad8:	6a03      	ldr	r3, [r0, #32]
 8009ada:	b90b      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x18>
 8009adc:	f7fe faf8 	bl	80080d0 <__sinit>
 8009ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae2:	07d9      	lsls	r1, r3, #31
 8009ae4:	d405      	bmi.n	8009af2 <_vfiprintf_r+0x2a>
 8009ae6:	89ab      	ldrh	r3, [r5, #12]
 8009ae8:	059a      	lsls	r2, r3, #22
 8009aea:	d402      	bmi.n	8009af2 <_vfiprintf_r+0x2a>
 8009aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aee:	f7fe fcea 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8009af2:	89ab      	ldrh	r3, [r5, #12]
 8009af4:	071b      	lsls	r3, r3, #28
 8009af6:	d501      	bpl.n	8009afc <_vfiprintf_r+0x34>
 8009af8:	692b      	ldr	r3, [r5, #16]
 8009afa:	b99b      	cbnz	r3, 8009b24 <_vfiprintf_r+0x5c>
 8009afc:	4629      	mov	r1, r5
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7fe fc0e 	bl	8008320 <__swsetup_r>
 8009b04:	b170      	cbz	r0, 8009b24 <_vfiprintf_r+0x5c>
 8009b06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b08:	07dc      	lsls	r4, r3, #31
 8009b0a:	d504      	bpl.n	8009b16 <_vfiprintf_r+0x4e>
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	b01d      	add	sp, #116	@ 0x74
 8009b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	0598      	lsls	r0, r3, #22
 8009b1a:	d4f7      	bmi.n	8009b0c <_vfiprintf_r+0x44>
 8009b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b1e:	f7fe fcd3 	bl	80084c8 <__retarget_lock_release_recursive>
 8009b22:	e7f3      	b.n	8009b0c <_vfiprintf_r+0x44>
 8009b24:	2300      	movs	r3, #0
 8009b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b32:	2330      	movs	r3, #48	@ 0x30
 8009b34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ce4 <_vfiprintf_r+0x21c>
 8009b38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b3c:	f04f 0901 	mov.w	r9, #1
 8009b40:	4623      	mov	r3, r4
 8009b42:	469a      	mov	sl, r3
 8009b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b48:	b10a      	cbz	r2, 8009b4e <_vfiprintf_r+0x86>
 8009b4a:	2a25      	cmp	r2, #37	@ 0x25
 8009b4c:	d1f9      	bne.n	8009b42 <_vfiprintf_r+0x7a>
 8009b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b52:	d00b      	beq.n	8009b6c <_vfiprintf_r+0xa4>
 8009b54:	465b      	mov	r3, fp
 8009b56:	4622      	mov	r2, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ffa1 	bl	8009aa2 <__sfputs_r>
 8009b60:	3001      	adds	r0, #1
 8009b62:	f000 80a7 	beq.w	8009cb4 <_vfiprintf_r+0x1ec>
 8009b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b68:	445a      	add	r2, fp
 8009b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 809f 	beq.w	8009cb4 <_vfiprintf_r+0x1ec>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b80:	f10a 0a01 	add.w	sl, sl, #1
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b8e:	4654      	mov	r4, sl
 8009b90:	2205      	movs	r2, #5
 8009b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b96:	4853      	ldr	r0, [pc, #332]	@ (8009ce4 <_vfiprintf_r+0x21c>)
 8009b98:	f7f6 fb1a 	bl	80001d0 <memchr>
 8009b9c:	9a04      	ldr	r2, [sp, #16]
 8009b9e:	b9d8      	cbnz	r0, 8009bd8 <_vfiprintf_r+0x110>
 8009ba0:	06d1      	lsls	r1, r2, #27
 8009ba2:	bf44      	itt	mi
 8009ba4:	2320      	movmi	r3, #32
 8009ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009baa:	0713      	lsls	r3, r2, #28
 8009bac:	bf44      	itt	mi
 8009bae:	232b      	movmi	r3, #43	@ 0x2b
 8009bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bba:	d015      	beq.n	8009be8 <_vfiprintf_r+0x120>
 8009bbc:	9a07      	ldr	r2, [sp, #28]
 8009bbe:	4654      	mov	r4, sl
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f04f 0c0a 	mov.w	ip, #10
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bcc:	3b30      	subs	r3, #48	@ 0x30
 8009bce:	2b09      	cmp	r3, #9
 8009bd0:	d94b      	bls.n	8009c6a <_vfiprintf_r+0x1a2>
 8009bd2:	b1b0      	cbz	r0, 8009c02 <_vfiprintf_r+0x13a>
 8009bd4:	9207      	str	r2, [sp, #28]
 8009bd6:	e014      	b.n	8009c02 <_vfiprintf_r+0x13a>
 8009bd8:	eba0 0308 	sub.w	r3, r0, r8
 8009bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009be0:	4313      	orrs	r3, r2
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	46a2      	mov	sl, r4
 8009be6:	e7d2      	b.n	8009b8e <_vfiprintf_r+0xc6>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	1d19      	adds	r1, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	9103      	str	r1, [sp, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfbb      	ittet	lt
 8009bf4:	425b      	neglt	r3, r3
 8009bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bfa:	9307      	strge	r3, [sp, #28]
 8009bfc:	9307      	strlt	r3, [sp, #28]
 8009bfe:	bfb8      	it	lt
 8009c00:	9204      	strlt	r2, [sp, #16]
 8009c02:	7823      	ldrb	r3, [r4, #0]
 8009c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c06:	d10a      	bne.n	8009c1e <_vfiprintf_r+0x156>
 8009c08:	7863      	ldrb	r3, [r4, #1]
 8009c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c0c:	d132      	bne.n	8009c74 <_vfiprintf_r+0x1ac>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	9203      	str	r2, [sp, #12]
 8009c16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c1a:	3402      	adds	r4, #2
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cf4 <_vfiprintf_r+0x22c>
 8009c22:	7821      	ldrb	r1, [r4, #0]
 8009c24:	2203      	movs	r2, #3
 8009c26:	4650      	mov	r0, sl
 8009c28:	f7f6 fad2 	bl	80001d0 <memchr>
 8009c2c:	b138      	cbz	r0, 8009c3e <_vfiprintf_r+0x176>
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	eba0 000a 	sub.w	r0, r0, sl
 8009c34:	2240      	movs	r2, #64	@ 0x40
 8009c36:	4082      	lsls	r2, r0
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	3401      	adds	r4, #1
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c42:	4829      	ldr	r0, [pc, #164]	@ (8009ce8 <_vfiprintf_r+0x220>)
 8009c44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c48:	2206      	movs	r2, #6
 8009c4a:	f7f6 fac1 	bl	80001d0 <memchr>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d03f      	beq.n	8009cd2 <_vfiprintf_r+0x20a>
 8009c52:	4b26      	ldr	r3, [pc, #152]	@ (8009cec <_vfiprintf_r+0x224>)
 8009c54:	bb1b      	cbnz	r3, 8009c9e <_vfiprintf_r+0x1d6>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	3307      	adds	r3, #7
 8009c5a:	f023 0307 	bic.w	r3, r3, #7
 8009c5e:	3308      	adds	r3, #8
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c64:	443b      	add	r3, r7
 8009c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c68:	e76a      	b.n	8009b40 <_vfiprintf_r+0x78>
 8009c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c6e:	460c      	mov	r4, r1
 8009c70:	2001      	movs	r0, #1
 8009c72:	e7a8      	b.n	8009bc6 <_vfiprintf_r+0xfe>
 8009c74:	2300      	movs	r3, #0
 8009c76:	3401      	adds	r4, #1
 8009c78:	9305      	str	r3, [sp, #20]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	f04f 0c0a 	mov.w	ip, #10
 8009c80:	4620      	mov	r0, r4
 8009c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c86:	3a30      	subs	r2, #48	@ 0x30
 8009c88:	2a09      	cmp	r2, #9
 8009c8a:	d903      	bls.n	8009c94 <_vfiprintf_r+0x1cc>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0c6      	beq.n	8009c1e <_vfiprintf_r+0x156>
 8009c90:	9105      	str	r1, [sp, #20]
 8009c92:	e7c4      	b.n	8009c1e <_vfiprintf_r+0x156>
 8009c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c98:	4604      	mov	r4, r0
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e7f0      	b.n	8009c80 <_vfiprintf_r+0x1b8>
 8009c9e:	ab03      	add	r3, sp, #12
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	462a      	mov	r2, r5
 8009ca4:	4b12      	ldr	r3, [pc, #72]	@ (8009cf0 <_vfiprintf_r+0x228>)
 8009ca6:	a904      	add	r1, sp, #16
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7fd fdcf 	bl	800784c <_printf_float>
 8009cae:	4607      	mov	r7, r0
 8009cb0:	1c78      	adds	r0, r7, #1
 8009cb2:	d1d6      	bne.n	8009c62 <_vfiprintf_r+0x19a>
 8009cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cb6:	07d9      	lsls	r1, r3, #31
 8009cb8:	d405      	bmi.n	8009cc6 <_vfiprintf_r+0x1fe>
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	059a      	lsls	r2, r3, #22
 8009cbe:	d402      	bmi.n	8009cc6 <_vfiprintf_r+0x1fe>
 8009cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cc2:	f7fe fc01 	bl	80084c8 <__retarget_lock_release_recursive>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	065b      	lsls	r3, r3, #25
 8009cca:	f53f af1f 	bmi.w	8009b0c <_vfiprintf_r+0x44>
 8009cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cd0:	e71e      	b.n	8009b10 <_vfiprintf_r+0x48>
 8009cd2:	ab03      	add	r3, sp, #12
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4b05      	ldr	r3, [pc, #20]	@ (8009cf0 <_vfiprintf_r+0x228>)
 8009cda:	a904      	add	r1, sp, #16
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7fe f84d 	bl	8007d7c <_printf_i>
 8009ce2:	e7e4      	b.n	8009cae <_vfiprintf_r+0x1e6>
 8009ce4:	0800a796 	.word	0x0800a796
 8009ce8:	0800a7a0 	.word	0x0800a7a0
 8009cec:	0800784d 	.word	0x0800784d
 8009cf0:	08009aa3 	.word	0x08009aa3
 8009cf4:	0800a79c 	.word	0x0800a79c

08009cf8 <__sflush_r>:
 8009cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	0716      	lsls	r6, r2, #28
 8009d02:	4605      	mov	r5, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	d454      	bmi.n	8009db2 <__sflush_r+0xba>
 8009d08:	684b      	ldr	r3, [r1, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc02      	bgt.n	8009d14 <__sflush_r+0x1c>
 8009d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dd48      	ble.n	8009da6 <__sflush_r+0xae>
 8009d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d045      	beq.n	8009da6 <__sflush_r+0xae>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d20:	682f      	ldr	r7, [r5, #0]
 8009d22:	6a21      	ldr	r1, [r4, #32]
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	d030      	beq.n	8009d8a <__sflush_r+0x92>
 8009d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	0759      	lsls	r1, r3, #29
 8009d2e:	d505      	bpl.n	8009d3c <__sflush_r+0x44>
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d36:	b10b      	cbz	r3, 8009d3c <__sflush_r+0x44>
 8009d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b0      	blx	r6
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	d106      	bne.n	8009d5a <__sflush_r+0x62>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	291d      	cmp	r1, #29
 8009d50:	d82b      	bhi.n	8009daa <__sflush_r+0xb2>
 8009d52:	4a2a      	ldr	r2, [pc, #168]	@ (8009dfc <__sflush_r+0x104>)
 8009d54:	40ca      	lsrs	r2, r1
 8009d56:	07d6      	lsls	r6, r2, #31
 8009d58:	d527      	bpl.n	8009daa <__sflush_r+0xb2>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6062      	str	r2, [r4, #4]
 8009d5e:	04d9      	lsls	r1, r3, #19
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	d504      	bpl.n	8009d70 <__sflush_r+0x78>
 8009d66:	1c42      	adds	r2, r0, #1
 8009d68:	d101      	bne.n	8009d6e <__sflush_r+0x76>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b903      	cbnz	r3, 8009d70 <__sflush_r+0x78>
 8009d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d72:	602f      	str	r7, [r5, #0]
 8009d74:	b1b9      	cbz	r1, 8009da6 <__sflush_r+0xae>
 8009d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	d002      	beq.n	8009d84 <__sflush_r+0x8c>
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f7ff f9fe 	bl	8009180 <_free_r>
 8009d84:	2300      	movs	r3, #0
 8009d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d88:	e00d      	b.n	8009da6 <__sflush_r+0xae>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	4602      	mov	r2, r0
 8009d92:	1c50      	adds	r0, r2, #1
 8009d94:	d1c9      	bne.n	8009d2a <__sflush_r+0x32>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0c6      	beq.n	8009d2a <__sflush_r+0x32>
 8009d9c:	2b1d      	cmp	r3, #29
 8009d9e:	d001      	beq.n	8009da4 <__sflush_r+0xac>
 8009da0:	2b16      	cmp	r3, #22
 8009da2:	d11e      	bne.n	8009de2 <__sflush_r+0xea>
 8009da4:	602f      	str	r7, [r5, #0]
 8009da6:	2000      	movs	r0, #0
 8009da8:	e022      	b.n	8009df0 <__sflush_r+0xf8>
 8009daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dae:	b21b      	sxth	r3, r3
 8009db0:	e01b      	b.n	8009dea <__sflush_r+0xf2>
 8009db2:	690f      	ldr	r7, [r1, #16]
 8009db4:	2f00      	cmp	r7, #0
 8009db6:	d0f6      	beq.n	8009da6 <__sflush_r+0xae>
 8009db8:	0793      	lsls	r3, r2, #30
 8009dba:	680e      	ldr	r6, [r1, #0]
 8009dbc:	bf08      	it	eq
 8009dbe:	694b      	ldreq	r3, [r1, #20]
 8009dc0:	600f      	str	r7, [r1, #0]
 8009dc2:	bf18      	it	ne
 8009dc4:	2300      	movne	r3, #0
 8009dc6:	eba6 0807 	sub.w	r8, r6, r7
 8009dca:	608b      	str	r3, [r1, #8]
 8009dcc:	f1b8 0f00 	cmp.w	r8, #0
 8009dd0:	dde9      	ble.n	8009da6 <__sflush_r+0xae>
 8009dd2:	6a21      	ldr	r1, [r4, #32]
 8009dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dd6:	4643      	mov	r3, r8
 8009dd8:	463a      	mov	r2, r7
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b0      	blx	r6
 8009dde:	2800      	cmp	r0, #0
 8009de0:	dc08      	bgt.n	8009df4 <__sflush_r+0xfc>
 8009de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4407      	add	r7, r0
 8009df6:	eba8 0800 	sub.w	r8, r8, r0
 8009dfa:	e7e7      	b.n	8009dcc <__sflush_r+0xd4>
 8009dfc:	20400001 	.word	0x20400001

08009e00 <_fflush_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b913      	cbnz	r3, 8009e10 <_fflush_r+0x10>
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	b118      	cbz	r0, 8009e1a <_fflush_r+0x1a>
 8009e12:	6a03      	ldr	r3, [r0, #32]
 8009e14:	b90b      	cbnz	r3, 8009e1a <_fflush_r+0x1a>
 8009e16:	f7fe f95b 	bl	80080d0 <__sinit>
 8009e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f3      	beq.n	8009e0a <_fflush_r+0xa>
 8009e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d404      	bmi.n	8009e32 <_fflush_r+0x32>
 8009e28:	0599      	lsls	r1, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_fflush_r+0x32>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e2e:	f7fe fb4a 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8009e32:	4628      	mov	r0, r5
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7ff ff5f 	bl	8009cf8 <__sflush_r>
 8009e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e3c:	07da      	lsls	r2, r3, #31
 8009e3e:	4605      	mov	r5, r0
 8009e40:	d4e4      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	059b      	lsls	r3, r3, #22
 8009e46:	d4e1      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e4a:	f7fe fb3d 	bl	80084c8 <__retarget_lock_release_recursive>
 8009e4e:	e7dd      	b.n	8009e0c <_fflush_r+0xc>

08009e50 <__swhatbuf_r>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	b096      	sub	sp, #88	@ 0x58
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	461e      	mov	r6, r3
 8009e60:	da0d      	bge.n	8009e7e <__swhatbuf_r+0x2e>
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	bf14      	ite	ne
 8009e6e:	2340      	movne	r3, #64	@ 0x40
 8009e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e74:	2000      	movs	r0, #0
 8009e76:	6031      	str	r1, [r6, #0]
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	b016      	add	sp, #88	@ 0x58
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	466a      	mov	r2, sp
 8009e80:	f000 f848 	bl	8009f14 <_fstat_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	dbec      	blt.n	8009e62 <__swhatbuf_r+0x12>
 8009e88:	9901      	ldr	r1, [sp, #4]
 8009e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e92:	4259      	negs	r1, r3
 8009e94:	4159      	adcs	r1, r3
 8009e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e9a:	e7eb      	b.n	8009e74 <__swhatbuf_r+0x24>

08009e9c <__smakebuf_r>:
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea0:	079d      	lsls	r5, r3, #30
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	d507      	bpl.n	8009eb8 <__smakebuf_r+0x1c>
 8009ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	6163      	str	r3, [r4, #20]
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb8:	ab01      	add	r3, sp, #4
 8009eba:	466a      	mov	r2, sp
 8009ebc:	f7ff ffc8 	bl	8009e50 <__swhatbuf_r>
 8009ec0:	9f00      	ldr	r7, [sp, #0]
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff f9ce 	bl	8009268 <_malloc_r>
 8009ecc:	b948      	cbnz	r0, 8009ee2 <__smakebuf_r+0x46>
 8009ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed2:	059a      	lsls	r2, r3, #22
 8009ed4:	d4ee      	bmi.n	8009eb4 <__smakebuf_r+0x18>
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	f043 0302 	orr.w	r3, r3, #2
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	e7e2      	b.n	8009ea8 <__smakebuf_r+0xc>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	6020      	str	r0, [r4, #0]
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ef2:	b15b      	cbz	r3, 8009f0c <__smakebuf_r+0x70>
 8009ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 f81d 	bl	8009f38 <_isatty_r>
 8009efe:	b128      	cbz	r0, 8009f0c <__smakebuf_r+0x70>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f023 0303 	bic.w	r3, r3, #3
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	431d      	orrs	r5, r3
 8009f10:	81a5      	strh	r5, [r4, #12]
 8009f12:	e7cf      	b.n	8009eb4 <__smakebuf_r+0x18>

08009f14 <_fstat_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	@ (8009f34 <_fstat_r+0x20>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	f7f8 fb8b 	bl	800263c <_fstat>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d102      	bne.n	8009f30 <_fstat_r+0x1c>
 8009f2a:	682b      	ldr	r3, [r5, #0]
 8009f2c:	b103      	cbz	r3, 8009f30 <_fstat_r+0x1c>
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	bd38      	pop	{r3, r4, r5, pc}
 8009f32:	bf00      	nop
 8009f34:	200005b0 	.word	0x200005b0

08009f38 <_isatty_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d06      	ldr	r5, [pc, #24]	@ (8009f54 <_isatty_r+0x1c>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f8 fb8a 	bl	800265c <_isatty>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_isatty_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_isatty_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200005b0 	.word	0x200005b0

08009f58 <_sbrk_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	@ (8009f74 <_sbrk_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f8 fb92 	bl	800268c <_sbrk>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_sbrk_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_sbrk_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	200005b0 	.word	0x200005b0

08009f78 <memcpy>:
 8009f78:	440a      	add	r2, r1
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f80:	d100      	bne.n	8009f84 <memcpy+0xc>
 8009f82:	4770      	bx	lr
 8009f84:	b510      	push	{r4, lr}
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f8e:	4291      	cmp	r1, r2
 8009f90:	d1f9      	bne.n	8009f86 <memcpy+0xe>
 8009f92:	bd10      	pop	{r4, pc}

08009f94 <__assert_func>:
 8009f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f96:	4614      	mov	r4, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b09      	ldr	r3, [pc, #36]	@ (8009fc0 <__assert_func+0x2c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	68d8      	ldr	r0, [r3, #12]
 8009fa2:	b14c      	cbz	r4, 8009fb8 <__assert_func+0x24>
 8009fa4:	4b07      	ldr	r3, [pc, #28]	@ (8009fc4 <__assert_func+0x30>)
 8009fa6:	9100      	str	r1, [sp, #0]
 8009fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fac:	4906      	ldr	r1, [pc, #24]	@ (8009fc8 <__assert_func+0x34>)
 8009fae:	462b      	mov	r3, r5
 8009fb0:	f000 f842 	bl	800a038 <fiprintf>
 8009fb4:	f000 f852 	bl	800a05c <abort>
 8009fb8:	4b04      	ldr	r3, [pc, #16]	@ (8009fcc <__assert_func+0x38>)
 8009fba:	461c      	mov	r4, r3
 8009fbc:	e7f3      	b.n	8009fa6 <__assert_func+0x12>
 8009fbe:	bf00      	nop
 8009fc0:	20000024 	.word	0x20000024
 8009fc4:	0800a7b1 	.word	0x0800a7b1
 8009fc8:	0800a7be 	.word	0x0800a7be
 8009fcc:	0800a7ec 	.word	0x0800a7ec

08009fd0 <_calloc_r>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	fba1 5402 	umull	r5, r4, r1, r2
 8009fd6:	b934      	cbnz	r4, 8009fe6 <_calloc_r+0x16>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f7ff f945 	bl	8009268 <_malloc_r>
 8009fde:	4606      	mov	r6, r0
 8009fe0:	b928      	cbnz	r0, 8009fee <_calloc_r+0x1e>
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
 8009fe6:	220c      	movs	r2, #12
 8009fe8:	6002      	str	r2, [r0, #0]
 8009fea:	2600      	movs	r6, #0
 8009fec:	e7f9      	b.n	8009fe2 <_calloc_r+0x12>
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	f7fe f9eb 	bl	80083cc <memset>
 8009ff6:	e7f4      	b.n	8009fe2 <_calloc_r+0x12>

08009ff8 <__ascii_mbtowc>:
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	b901      	cbnz	r1, 8009ffe <__ascii_mbtowc+0x6>
 8009ffc:	a901      	add	r1, sp, #4
 8009ffe:	b142      	cbz	r2, 800a012 <__ascii_mbtowc+0x1a>
 800a000:	b14b      	cbz	r3, 800a016 <__ascii_mbtowc+0x1e>
 800a002:	7813      	ldrb	r3, [r2, #0]
 800a004:	600b      	str	r3, [r1, #0]
 800a006:	7812      	ldrb	r2, [r2, #0]
 800a008:	1e10      	subs	r0, r2, #0
 800a00a:	bf18      	it	ne
 800a00c:	2001      	movne	r0, #1
 800a00e:	b002      	add	sp, #8
 800a010:	4770      	bx	lr
 800a012:	4610      	mov	r0, r2
 800a014:	e7fb      	b.n	800a00e <__ascii_mbtowc+0x16>
 800a016:	f06f 0001 	mvn.w	r0, #1
 800a01a:	e7f8      	b.n	800a00e <__ascii_mbtowc+0x16>

0800a01c <__ascii_wctomb>:
 800a01c:	4603      	mov	r3, r0
 800a01e:	4608      	mov	r0, r1
 800a020:	b141      	cbz	r1, 800a034 <__ascii_wctomb+0x18>
 800a022:	2aff      	cmp	r2, #255	@ 0xff
 800a024:	d904      	bls.n	800a030 <__ascii_wctomb+0x14>
 800a026:	228a      	movs	r2, #138	@ 0x8a
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	4770      	bx	lr
 800a030:	700a      	strb	r2, [r1, #0]
 800a032:	2001      	movs	r0, #1
 800a034:	4770      	bx	lr
	...

0800a038 <fiprintf>:
 800a038:	b40e      	push	{r1, r2, r3}
 800a03a:	b503      	push	{r0, r1, lr}
 800a03c:	4601      	mov	r1, r0
 800a03e:	ab03      	add	r3, sp, #12
 800a040:	4805      	ldr	r0, [pc, #20]	@ (800a058 <fiprintf+0x20>)
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	6800      	ldr	r0, [r0, #0]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	f7ff fd3d 	bl	8009ac8 <_vfiprintf_r>
 800a04e:	b002      	add	sp, #8
 800a050:	f85d eb04 	ldr.w	lr, [sp], #4
 800a054:	b003      	add	sp, #12
 800a056:	4770      	bx	lr
 800a058:	20000024 	.word	0x20000024

0800a05c <abort>:
 800a05c:	b508      	push	{r3, lr}
 800a05e:	2006      	movs	r0, #6
 800a060:	f000 f82c 	bl	800a0bc <raise>
 800a064:	2001      	movs	r0, #1
 800a066:	f7f8 fa99 	bl	800259c <_exit>

0800a06a <_raise_r>:
 800a06a:	291f      	cmp	r1, #31
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	460c      	mov	r4, r1
 800a072:	d904      	bls.n	800a07e <_raise_r+0x14>
 800a074:	2316      	movs	r3, #22
 800a076:	6003      	str	r3, [r0, #0]
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	bd38      	pop	{r3, r4, r5, pc}
 800a07e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a080:	b112      	cbz	r2, 800a088 <_raise_r+0x1e>
 800a082:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a086:	b94b      	cbnz	r3, 800a09c <_raise_r+0x32>
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 f831 	bl	800a0f0 <_getpid_r>
 800a08e:	4622      	mov	r2, r4
 800a090:	4601      	mov	r1, r0
 800a092:	4628      	mov	r0, r5
 800a094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a098:	f000 b818 	b.w	800a0cc <_kill_r>
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d00a      	beq.n	800a0b6 <_raise_r+0x4c>
 800a0a0:	1c59      	adds	r1, r3, #1
 800a0a2:	d103      	bne.n	800a0ac <_raise_r+0x42>
 800a0a4:	2316      	movs	r3, #22
 800a0a6:	6003      	str	r3, [r0, #0]
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	e7e7      	b.n	800a07c <_raise_r+0x12>
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4798      	blx	r3
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e7e0      	b.n	800a07c <_raise_r+0x12>
	...

0800a0bc <raise>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	@ (800a0c8 <raise+0xc>)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f7ff bfd2 	b.w	800a06a <_raise_r>
 800a0c6:	bf00      	nop
 800a0c8:	20000024 	.word	0x20000024

0800a0cc <_kill_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d07      	ldr	r5, [pc, #28]	@ (800a0ec <_kill_r+0x20>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f7f8 fa4f 	bl	800257c <_kill>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d102      	bne.n	800a0e8 <_kill_r+0x1c>
 800a0e2:	682b      	ldr	r3, [r5, #0]
 800a0e4:	b103      	cbz	r3, 800a0e8 <_kill_r+0x1c>
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200005b0 	.word	0x200005b0

0800a0f0 <_getpid_r>:
 800a0f0:	f7f8 ba3c 	b.w	800256c <_getpid>

0800a0f4 <_init>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

0800a100 <_fini>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr
