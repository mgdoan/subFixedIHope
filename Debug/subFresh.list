
subFresh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800a0a0  0800a0a0  0000b0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a97c  0800a97c  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a97c  0800a97c  0000b97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a984  0800a984  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0000b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a988  0800a988  0000b988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a98c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200001e0  0800ab6c  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800ab6c  0000c614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015522  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028aa  00000000  00000000  00021732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00023fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103e  00000000  00000000  00025428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226a1  00000000  00000000  00026466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c75  00000000  00000000  00048b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0f8d  00000000  00000000  0005f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  0013074c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00136eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a084 	.word	0x0800a084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a084 	.word	0x0800a084

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <pwm_val_increase>:
	__HAL_TIM_SET_COMPARE(&htim2, channel, MIN_PWM_VAL);
	HAL_Delay(5000);
	printf("thruster initialized \r\n");
}

void pwm_val_increase(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET < MAX_PWM_VAL){
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <pwm_val_increase+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da04      	bge.n	8000eee <pwm_val_increase+0x1a>
		PWM_VAL_SET++;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000eec:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val increased to %d \r\n", PWM_VAL_SET);
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <pwm_val_increase+0x2c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <pwm_val_increase+0x34>)
 8000ef6:	f007 f8eb 	bl	80080d0 <iprintf>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004
 8000f08:	0800a0b8 	.word	0x0800a0b8

08000f0c <pwm_val_decrease>:

void pwm_val_decrease(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET > MIN_PWM_VAL){
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <pwm_val_decrease+0x30>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dd04      	ble.n	8000f26 <pwm_val_decrease+0x1a>
		PWM_VAL_SET--;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f24:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val decreased to %d \r\n", PWM_VAL_SET);
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <pwm_val_decrease+0x2c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <pwm_val_decrease+0x34>)
 8000f2e:	f007 f8cf 	bl	80080d0 <iprintf>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	0800a0d4 	.word	0x0800a0d4

08000f44 <init_thruster>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PWM_VAL);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	HAL_Delay(5000);
}

void init_thruster(int thruster) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	//uint32_t channel;
	//int PWM_Val;
	if(thruster){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <init_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <init_thruster+0x34>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <init_thruster+0x38>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5c:	e004      	b.n	8000f68 <init_thruster+0x24>
		//channel = TIM_CHANNEL_3; //right thruster
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <init_thruster+0x34>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <init_thruster+0x3c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
		//channel = TIM_CHANNEL_2; //left thruster
	}
	HAL_Delay(5000);
 8000f68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6c:	f001 fc56 	bl	800281c <HAL_Delay>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000248 	.word	0x20000248
 8000f80:	200001fc 	.word	0x200001fc

08000f84 <set_thruster>:

void set_thruster(int thruster) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(thruster){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <set_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_VAL_SET);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <set_thruster+0x30>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <set_thruster+0x34>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
	}
	return;
 8000f9c:	e005      	b.n	8000faa <set_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <set_thruster+0x30>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <set_thruster+0x38>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 8000fa8:	bf00      	nop
}
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	200001fc 	.word	0x200001fc

08000fc0 <stop_thruster>:
		HAL_Delay(1000);
	}
}


void stop_thruster(int thruster) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if(thruster){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <stop_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <stop_thruster+0x30>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <stop_thruster+0x34>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	}
	return;
 8000fd8:	e005      	b.n	8000fe6 <stop_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <stop_thruster+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <stop_thruster+0x38>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 8000fe4:	bf00      	nop
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000248 	.word	0x20000248
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <HAL_CAN_RxFifo0MsgPendingCallback>:
int datacheck;

uint8_t sensorPacket[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001006:	4a09      	ldr	r2, [pc, #36]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f001 ff03 	bl	8002e16 <HAL_CAN_GetRxMessage>
	//printf("triggered\n");

	if(RxHeader.StdId == 0x128)
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8001018:	d102      	bne.n	8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		//printf("match\n");
		datacheck = 1;
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	}
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000318 	.word	0x20000318
 800102c:	200002d4 	.word	0x200002d4
 8001030:	2000032c 	.word	0x2000032c

08001034 <can_setup>:

void can_setup(){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	 canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <can_setup+0x94>)
 800103c:	2201      	movs	r2, #1
 800103e:	621a      	str	r2, [r3, #32]
	 canfilterconfig.FilterBank = 5;  // which filter bank to use from the assigned ones
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <can_setup+0x94>)
 8001042:	2205      	movs	r2, #5
 8001044:	615a      	str	r2, [r3, #20]
	 canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <can_setup+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
	 canfilterconfig.FilterIdHigh = 0x128<<5;
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <can_setup+0x94>)
 800104e:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 8001052:	601a      	str	r2, [r3, #0]
	 canfilterconfig.FilterIdLow = 0;
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <can_setup+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
	 canfilterconfig.FilterMaskIdHigh = 0x128<<5;
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <can_setup+0x94>)
 800105c:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 8001060:	609a      	str	r2, [r3, #8]
	 canfilterconfig.FilterMaskIdLow = 0x0000;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <can_setup+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
	 canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <can_setup+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
	 canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <can_setup+0x94>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
	 canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <can_setup+0x94>)
 8001076:	220a      	movs	r2, #10
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24


	 HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800107a:	4913      	ldr	r1, [pc, #76]	@ (80010c8 <can_setup+0x94>)
 800107c:	4813      	ldr	r0, [pc, #76]	@ (80010cc <can_setup+0x98>)
 800107e:	f001 fcec 	bl	8002a5a <HAL_CAN_ConfigFilter>


	 //using standard ID (don't need extended)
	 TxHeader.IDE = CAN_ID_STD;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <can_setup+0x9c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]

	 //ID of transmitter
	 TxHeader.StdId = 0x256;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <can_setup+0x9c>)
 800108a:	f240 2256 	movw	r2, #598	@ 0x256
 800108e:	601a      	str	r2, [r3, #0]

	 //Set it to send a data frame
	 TxHeader.RTR = CAN_RTR_DATA;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <can_setup+0x9c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]

	 //length of message
	 TxHeader.DLC = 8;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <can_setup+0x9c>)
 8001098:	2208      	movs	r2, #8
 800109a:	611a      	str	r2, [r3, #16]

	 TxData[0] = 0x69;
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <can_setup+0xa0>)
 800109e:	2269      	movs	r2, #105	@ 0x69
 80010a0:	701a      	strb	r2, [r3, #0]

	HAL_CAN_Start(&hcan1);
 80010a2:	480a      	ldr	r0, [pc, #40]	@ (80010cc <can_setup+0x98>)
 80010a4:	f001 fda3 	bl	8002bee <HAL_CAN_Start>

	HAL_StatusTypeDef activate_return = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010a8:	2102      	movs	r1, #2
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <can_setup+0x98>)
 80010ac:	f001 ffd5 	bl	800305a <HAL_CAN_ActivateNotification>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]

	printf("notification output: %d\n", activate_return);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <can_setup+0xa4>)
 80010ba:	f007 f809 	bl	80080d0 <iprintf>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002f0 	.word	0x200002f0
 80010cc:	20000294 	.word	0x20000294
 80010d0:	200002bc 	.word	0x200002bc
 80010d4:	20000320 	.word	0x20000320
 80010d8:	0800a100 	.word	0x0800a100

080010dc <read_control_from_CAN>:

uint8_t read_control_from_CAN(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	//  printf("reading = %d\r\n", RxHeader.StdId);
	  static uint8_t control = 0;
	  if(datacheck)
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <read_control_from_CAN+0x30>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <read_control_from_CAN+0x1a>
	  {
		  control = RxData[0];
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <read_control_from_CAN+0x34>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <read_control_from_CAN+0x38>)
 80010ee:	701a      	strb	r2, [r3, #0]
		  datacheck = 0;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <read_control_from_CAN+0x30>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
	  }
	  printf("controller command is  = %d\r\n", control);
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <read_control_from_CAN+0x38>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <read_control_from_CAN+0x3c>)
 80010fe:	f006 ffe7 	bl	80080d0 <iprintf>
	  return control;
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <read_control_from_CAN+0x38>)
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000032c 	.word	0x2000032c
 8001110:	20000318 	.word	0x20000318
 8001114:	200004bc 	.word	0x200004bc
 8001118:	0800a11c 	.word	0x0800a11c

0800111c <transmit_sensor_packet>:

void transmit_sensor_packet(uint16_t gyroReading, uint32_t presTempReading, uint16_t flowReading){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	80fb      	strh	r3, [r7, #6]
 8001128:	4613      	mov	r3, r2
 800112a:	80bb      	strh	r3, [r7, #4]
	// Gyro
	uint8_t gyroMSB, gyroLSB;
	gyroMSB = (gyroReading >> 8) & 0xFF;
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	b29b      	uxth	r3, r3
 8001132:	75fb      	strb	r3, [r7, #23]
	gyroLSB = gyroReading & 0xFF;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	75bb      	strb	r3, [r7, #22]

	printf("gyro MSB is  = %d\r\n", gyroMSB);
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	4619      	mov	r1, r3
 800113c:	4825      	ldr	r0, [pc, #148]	@ (80011d4 <transmit_sensor_packet+0xb8>)
 800113e:	f006 ffc7 	bl	80080d0 <iprintf>
	printf("gyro LSB is  = %d\r\n", gyroLSB);
 8001142:	7dbb      	ldrb	r3, [r7, #22]
 8001144:	4619      	mov	r1, r3
 8001146:	4824      	ldr	r0, [pc, #144]	@ (80011d8 <transmit_sensor_packet+0xbc>)
 8001148:	f006 ffc2 	bl	80080d0 <iprintf>

	TxData[0] = gyroMSB;
 800114c:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <transmit_sensor_packet+0xc0>)
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	7013      	strb	r3, [r2, #0]
	TxData[1] = gyroLSB;
 8001152:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <transmit_sensor_packet+0xc0>)
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	7053      	strb	r3, [r2, #1]

	// Pressure sensor
	uint16_t pres, temp;
	pres = (presTempReading >> 16) & 0xFFFF;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	0c1b      	lsrs	r3, r3, #16
 800115c:	82bb      	strh	r3, [r7, #20]
	temp = presTempReading & 0xFFFF;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	827b      	strh	r3, [r7, #18]

	uint8_t presLSB, presMSB, tempLSB, tempMSB;
	presMSB = (pres >> 8) & 0xFF;
 8001162:	8abb      	ldrh	r3, [r7, #20]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b29b      	uxth	r3, r3
 8001168:	747b      	strb	r3, [r7, #17]
	presLSB = pres & 0xFF;
 800116a:	8abb      	ldrh	r3, [r7, #20]
 800116c:	743b      	strb	r3, [r7, #16]
	tempMSB = (temp >> 8) & 0xFF;
 800116e:	8a7b      	ldrh	r3, [r7, #18]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	73fb      	strb	r3, [r7, #15]
	tempLSB = temp & 0xFF;
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	73bb      	strb	r3, [r7, #14]

	TxData[2] = presMSB;
 800117a:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <transmit_sensor_packet+0xc0>)
 800117c:	7c7b      	ldrb	r3, [r7, #17]
 800117e:	7093      	strb	r3, [r2, #2]
	TxData[3] = presLSB;
 8001180:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <transmit_sensor_packet+0xc0>)
 8001182:	7c3b      	ldrb	r3, [r7, #16]
 8001184:	70d3      	strb	r3, [r2, #3]
	TxData[4] = tempMSB;
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <transmit_sensor_packet+0xc0>)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	7113      	strb	r3, [r2, #4]
	TxData[5] = tempLSB;
 800118c:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <transmit_sensor_packet+0xc0>)
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	7153      	strb	r3, [r2, #5]

	// Flow sensor
	uint8_t flowMSB, flowLSB;

	flowMSB = (flowReading >> 8) & 0xFF;
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]
	flowLSB = flowReading & 0xFF;
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	733b      	strb	r3, [r7, #12]

	TxData[6] = flowMSB;
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <transmit_sensor_packet+0xc0>)
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	7193      	strb	r3, [r2, #6]
	TxData[7] = flowLSB;
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <transmit_sensor_packet+0xc0>)
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	71d3      	strb	r3, [r2, #7]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <transmit_sensor_packet+0xc4>)
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <transmit_sensor_packet+0xc0>)
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <transmit_sensor_packet+0xc8>)
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <transmit_sensor_packet+0xcc>)
 80011b2:	f001 fd60 	bl	8002c76 <HAL_CAN_AddTxMessage>
	printf("HAL CAN Transmit Result: %d\r\n", HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox));
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <transmit_sensor_packet+0xc4>)
 80011b8:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <transmit_sensor_packet+0xc0>)
 80011ba:	490a      	ldr	r1, [pc, #40]	@ (80011e4 <transmit_sensor_packet+0xc8>)
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <transmit_sensor_packet+0xcc>)
 80011be:	f001 fd5a 	bl	8002c76 <HAL_CAN_AddTxMessage>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <transmit_sensor_packet+0xd0>)
 80011c8:	f006 ff82 	bl	80080d0 <iprintf>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800a13c 	.word	0x0800a13c
 80011d8:	0800a150 	.word	0x0800a150
 80011dc:	20000320 	.word	0x20000320
 80011e0:	20000328 	.word	0x20000328
 80011e4:	200002bc 	.word	0x200002bc
 80011e8:	20000294 	.word	0x20000294
 80011ec:	0800a164 	.word	0x0800a164

080011f0 <controlThrusterStateCAN>:

void controlThrusterStateCAN(uint8_t controllerCommand){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	// turn right
	if(controllerCommand & 0b1){
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <controlThrusterStateCAN+0x28>
			printf("turn right (activate left thruster) \r\n");
 8001204:	481a      	ldr	r0, [pc, #104]	@ (8001270 <controlThrusterStateCAN+0x80>)
 8001206:	f006 ffcb 	bl	80081a0 <puts>
			set_thruster(0);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff feba 	bl	8000f84 <set_thruster>
			stop_thruster(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fed5 	bl	8000fc0 <stop_thruster>
	else {
		stop_thruster(0);
		stop_thruster(1);
	}

}
 8001216:	e027      	b.n	8001268 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 1) & 0b1){
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <controlThrusterStateCAN+0x4a>
		printf("turn right (activate right thruster) \r\n");
 8001226:	4813      	ldr	r0, [pc, #76]	@ (8001274 <controlThrusterStateCAN+0x84>)
 8001228:	f006 ffba 	bl	80081a0 <puts>
		set_thruster(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fea9 	bl	8000f84 <set_thruster>
		stop_thruster(0);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fec4 	bl	8000fc0 <stop_thruster>
}
 8001238:	e016      	b.n	8001268 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 3) & 0b1){
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <controlThrusterStateCAN+0x6c>
		printf("forwards \r\n");
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <controlThrusterStateCAN+0x88>)
 800124a:	f006 ffa9 	bl	80081a0 <puts>
		set_thruster(0);
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fe98 	bl	8000f84 <set_thruster>
		set_thruster(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fe95 	bl	8000f84 <set_thruster>
}
 800125a:	e005      	b.n	8001268 <controlThrusterStateCAN+0x78>
		stop_thruster(0);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff feaf 	bl	8000fc0 <stop_thruster>
		stop_thruster(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff feac 	bl	8000fc0 <stop_thruster>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800a184 	.word	0x0800a184
 8001274:	0800a1ac 	.word	0x0800a1ac
 8001278:	0800a1d4 	.word	0x0800a1d4

0800127c <controlThrusterSpeedCAN>:

void controlThrusterSpeedCAN(uint8_t controllerCommand) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	// decrease speed
	if(((controllerCommand >> 5) & 0b1) && !((controllerCommand >> 4) & 0b1)){
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	095b      	lsrs	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <controlThrusterSpeedCAN+0x2c>
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <controlThrusterSpeedCAN+0x2c>
		pwm_val_decrease();
 80012a2:	f7ff fe33 	bl	8000f0c <pwm_val_decrease>
	}
	// increase speed
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
		pwm_val_increase();
	}
}
 80012a6:	e00f      	b.n	80012c8 <controlThrusterSpeedCAN+0x4c>
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d008      	beq.n	80012c8 <controlThrusterSpeedCAN+0x4c>
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <controlThrusterSpeedCAN+0x4c>
		pwm_val_increase();
 80012c4:	f7ff fe06 	bl	8000ed4 <pwm_val_increase>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <diagnose_gyro>:
#define HEADING_ADDR 0x1A

extern I2C_HandleTypeDef hi2c1;


void diagnose_gyro(HAL_StatusTypeDef ret, char* message) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d053      	beq.n	800138a <diagnose_gyro+0xba>
		printf(message);
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f006 fef4 	bl	80080d0 <iprintf>
		printf("\r\n");
 80012e8:	482a      	ldr	r0, [pc, #168]	@ (8001394 <diagnose_gyro+0xc4>)
 80012ea:	f006 ff59 	bl	80081a0 <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c1);
 80012ee:	482a      	ldr	r0, [pc, #168]	@ (8001398 <diagnose_gyro+0xc8>)
 80012f0:	f002 fe46 	bl	8003f80 <HAL_I2C_GetError>
 80012f4:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <diagnose_gyro+0x34>
			 printf("No Error\r\n");
 80012fc:	4827      	ldr	r0, [pc, #156]	@ (800139c <diagnose_gyro+0xcc>)
 80012fe:	f006 ff4f 	bl	80081a0 <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 8001302:	e042      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <diagnose_gyro+0x46>
			 printf("Bus Error\r\n");
 800130e:	4824      	ldr	r0, [pc, #144]	@ (80013a0 <diagnose_gyro+0xd0>)
 8001310:	f006 ff46 	bl	80081a0 <puts>
}
 8001314:	e039      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <diagnose_gyro+0x58>
			 printf("Arbitration Lost Error\r\n");
 8001320:	4820      	ldr	r0, [pc, #128]	@ (80013a4 <diagnose_gyro+0xd4>)
 8001322:	f006 ff3d 	bl	80081a0 <puts>
}
 8001326:	e030      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <diagnose_gyro+0x6a>
			 printf("Acknowledge Failure Error\r\n");
 8001332:	481d      	ldr	r0, [pc, #116]	@ (80013a8 <diagnose_gyro+0xd8>)
 8001334:	f006 ff34 	bl	80081a0 <puts>
}
 8001338:	e027      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <diagnose_gyro+0x7c>
			 printf("Overrun/Underrun Error\r\n");
 8001344:	4819      	ldr	r0, [pc, #100]	@ (80013ac <diagnose_gyro+0xdc>)
 8001346:	f006 ff2b 	bl	80081a0 <puts>
}
 800134a:	e01e      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <diagnose_gyro+0x8e>
			 printf("DMA Transfer Error\r\n");
 8001356:	4816      	ldr	r0, [pc, #88]	@ (80013b0 <diagnose_gyro+0xe0>)
 8001358:	f006 ff22 	bl	80081a0 <puts>
}
 800135c:	e015      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <diagnose_gyro+0xa0>
			 printf("Timeout Error\r\n");
 8001368:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <diagnose_gyro+0xe4>)
 800136a:	f006 ff19 	bl	80081a0 <puts>
}
 800136e:	e00c      	b.n	800138a <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <diagnose_gyro+0xb2>
			 printf("Size Management Error\r\n");
 800137a:	480f      	ldr	r0, [pc, #60]	@ (80013b8 <diagnose_gyro+0xe8>)
 800137c:	f006 ff10 	bl	80081a0 <puts>
}
 8001380:	e003      	b.n	800138a <diagnose_gyro+0xba>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <diagnose_gyro+0xec>)
 8001386:	f006 fea3 	bl	80080d0 <iprintf>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800a1e0 	.word	0x0800a1e0
 8001398:	20000394 	.word	0x20000394
 800139c:	0800a1e4 	.word	0x0800a1e4
 80013a0:	0800a1f0 	.word	0x0800a1f0
 80013a4:	0800a1fc 	.word	0x0800a1fc
 80013a8:	0800a214 	.word	0x0800a214
 80013ac:	0800a230 	.word	0x0800a230
 80013b0:	0800a248 	.word	0x0800a248
 80013b4:	0800a25c 	.word	0x0800a25c
 80013b8:	0800a26c 	.word	0x0800a26c
 80013bc:	0800a284 	.word	0x0800a284

080013c0 <gyro_init>:

void gyro_init() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;

	printf("\r\n\r\n-------GYRO INIT-------\r\n");
 80013c6:	4817      	ldr	r0, [pc, #92]	@ (8001424 <gyro_init+0x64>)
 80013c8:	f006 feea 	bl	80081a0 <puts>


	// set operating mode ---------------------------------------
	buf[0] = OPR_MODE_ADDR;
 80013cc:	233d      	movs	r3, #61	@ 0x3d
 80013ce:	713b      	strb	r3, [r7, #4]
	buf[1] = IMU_FUSION_MODE;
 80013d0:	2308      	movs	r3, #8
 80013d2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 80013d4:	1d3a      	adds	r2, r7, #4
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	2150      	movs	r1, #80	@ 0x50
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <gyro_init+0x68>)
 80013e2:	f002 fbbf 	bl	8003b64 <HAL_I2C_Master_Transmit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	diagnose_gyro(ret, "error setting op mode");
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	490f      	ldr	r1, [pc, #60]	@ (800142c <gyro_init+0x6c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff6e 	bl	80012d0 <diagnose_gyro>

	// set unit  ---------------------------------------
	buf[0] = UNIT_SELECT_ADDR;
 80013f4:	233b      	movs	r3, #59	@ 0x3b
 80013f6:	713b      	strb	r3, [r7, #4]
	buf[1] = UNIT_SELECT_DEGREES;
 80013f8:	2300      	movs	r3, #0
 80013fa:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 80013fc:	1d3a      	adds	r2, r7, #4
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	2150      	movs	r1, #80	@ 0x50
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <gyro_init+0x68>)
 800140a:	f002 fbab 	bl	8003b64 <HAL_I2C_Master_Transmit>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]

	diagnose_gyro(ret, "error setting unit");
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4906      	ldr	r1, [pc, #24]	@ (8001430 <gyro_init+0x70>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff5a 	bl	80012d0 <diagnose_gyro>

	return;
 800141c:	bf00      	nop
}
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800a2a0 	.word	0x0800a2a0
 8001428:	20000394 	.word	0x20000394
 800142c:	0800a2c0 	.word	0x0800a2c0
 8001430:	0800a2d8 	.word	0x0800a2d8

08001434 <gyroGetReading>:


	return;
}

uint16_t gyroGetReading() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint16_t heading;
	uint16_t heading_calibrated;

	// I2C
	buf[0] = HEADING_ADDR;
 800143a:	231a      	movs	r3, #26
 800143c:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 1, 1000);
 800143e:	463a      	mov	r2, r7
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	2150      	movs	r1, #80	@ 0x50
 800144a:	4810      	ldr	r0, [pc, #64]	@ (800148c <gyroGetReading+0x58>)
 800144c:	f002 fb8a 	bl	8003b64 <HAL_I2C_Master_Transmit>
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
	ret = HAL_I2C_Master_Receive(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 8001454:	463a      	mov	r2, r7
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2302      	movs	r3, #2
 800145e:	2150      	movs	r1, #80	@ 0x50
 8001460:	480a      	ldr	r0, [pc, #40]	@ (800148c <gyroGetReading+0x58>)
 8001462:	f002 fc97 	bl	8003d94 <HAL_I2C_Master_Receive>
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]

	// Concatenate the data and calculate the heading
	heading = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800146a:	783b      	ldrb	r3, [r7, #0]
 800146c:	b21a      	sxth	r2, r3
 800146e:	787b      	ldrb	r3, [r7, #1]
 8001470:	b21b      	sxth	r3, r3
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	80bb      	strh	r3, [r7, #4]
	heading_calibrated = heading/16;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	807b      	strh	r3, [r7, #2]
	return heading_calibrated;
 8001482:	887b      	ldrh	r3, [r7, #2]

}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000394 	.word	0x20000394

08001490 <i2c_check>:
//                                                //
//        Helper functions for debugging          //
//                                                //
////////////////////////////////////////////////////

void i2c_check (HAL_StatusTypeDef ret, char* message) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <i2c_check+0x1c>
		printf("Pressure Sensor Error: %s\r\n", message);
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <i2c_check+0x2c>)
 80014a6:	f006 fe13 	bl	80080d0 <iprintf>
	} else {
		printf("Success: %s\r\n", message);
	}
}
 80014aa:	e003      	b.n	80014b4 <i2c_check+0x24>
		printf("Success: %s\r\n", message);
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <i2c_check+0x30>)
 80014b0:	f006 fe0e 	bl	80080d0 <iprintf>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800a314 	.word	0x0800a314
 80014c0:	0800a330 	.word	0x0800a330

080014c4 <clear_buf>:
	printf("buf[0]: "); print_binary_uint8(buf[0]); printf("\r\n");
	printf("buf[1]: "); print_binary_uint8(buf[1]); printf("\r\n");
	printf("buf[2]: "); print_binary_uint8(buf[2]); printf("\r\n");
}

void clear_buf(uint8_t *buf) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	memset(buf, 0, 3 * sizeof(*buf));
 80014cc:	2203      	movs	r2, #3
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f006 ff45 	bl	8008360 <memset>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <diagnose_pressure>:

void diagnose_pressure(HAL_StatusTypeDef ret) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_BUSY){
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d102      	bne.n	80014f6 <diagnose_pressure+0x16>
		printf("hal_busy\r\n");
 80014f0:	4833      	ldr	r0, [pc, #204]	@ (80015c0 <diagnose_pressure+0xe0>)
 80014f2:	f006 fe55 	bl	80081a0 <puts>
	}
	if(ret == HAL_TIMEOUT){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d102      	bne.n	8001502 <diagnose_pressure+0x22>
			printf("hal_timeout\r\n");
 80014fc:	4831      	ldr	r0, [pc, #196]	@ (80015c4 <diagnose_pressure+0xe4>)
 80014fe:	f006 fe4f 	bl	80081a0 <puts>
	}
	if(ret == HAL_ERROR){
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <diagnose_pressure+0x2e>
			printf("hal_error\r\n");
 8001508:	482f      	ldr	r0, [pc, #188]	@ (80015c8 <diagnose_pressure+0xe8>)
 800150a:	f006 fe49 	bl	80081a0 <puts>
	}
	if (ret == HAL_ERROR) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d150      	bne.n	80015b6 <diagnose_pressure+0xd6>
		printf("\r\n");
 8001514:	482d      	ldr	r0, [pc, #180]	@ (80015cc <diagnose_pressure+0xec>)
 8001516:	f006 fe43 	bl	80081a0 <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c3);
 800151a:	482d      	ldr	r0, [pc, #180]	@ (80015d0 <diagnose_pressure+0xf0>)
 800151c:	f002 fd30 	bl	8003f80 <HAL_I2C_GetError>
 8001520:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <diagnose_pressure+0x50>
			 printf("No Error\r\n");
 8001528:	482a      	ldr	r0, [pc, #168]	@ (80015d4 <diagnose_pressure+0xf4>)
 800152a:	f006 fe39 	bl	80081a0 <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 800152e:	e042      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <diagnose_pressure+0x62>
			 printf("Bus Error\r\n");
 800153a:	4827      	ldr	r0, [pc, #156]	@ (80015d8 <diagnose_pressure+0xf8>)
 800153c:	f006 fe30 	bl	80081a0 <puts>
}
 8001540:	e039      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <diagnose_pressure+0x74>
			 printf("Arbitration Lost Error\r\n");
 800154c:	4823      	ldr	r0, [pc, #140]	@ (80015dc <diagnose_pressure+0xfc>)
 800154e:	f006 fe27 	bl	80081a0 <puts>
}
 8001552:	e030      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <diagnose_pressure+0x86>
			 printf("Acknowledge Failure Error\r\n");
 800155e:	4820      	ldr	r0, [pc, #128]	@ (80015e0 <diagnose_pressure+0x100>)
 8001560:	f006 fe1e 	bl	80081a0 <puts>
}
 8001564:	e027      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <diagnose_pressure+0x98>
			 printf("Overrun/Underrun Error\r\n");
 8001570:	481c      	ldr	r0, [pc, #112]	@ (80015e4 <diagnose_pressure+0x104>)
 8001572:	f006 fe15 	bl	80081a0 <puts>
}
 8001576:	e01e      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <diagnose_pressure+0xaa>
			 printf("DMA Transfer Error\r\n");
 8001582:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <diagnose_pressure+0x108>)
 8001584:	f006 fe0c 	bl	80081a0 <puts>
}
 8001588:	e015      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <diagnose_pressure+0xbc>
			 printf("Timeout Error\r\n");
 8001594:	4815      	ldr	r0, [pc, #84]	@ (80015ec <diagnose_pressure+0x10c>)
 8001596:	f006 fe03 	bl	80081a0 <puts>
}
 800159a:	e00c      	b.n	80015b6 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <diagnose_pressure+0xce>
			 printf("Size Management Error\r\n");
 80015a6:	4812      	ldr	r0, [pc, #72]	@ (80015f0 <diagnose_pressure+0x110>)
 80015a8:	f006 fdfa 	bl	80081a0 <puts>
}
 80015ac:	e003      	b.n	80015b6 <diagnose_pressure+0xd6>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 80015ae:	68f9      	ldr	r1, [r7, #12]
 80015b0:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <diagnose_pressure+0x114>)
 80015b2:	f006 fd8d 	bl	80080d0 <iprintf>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0800a3f8 	.word	0x0800a3f8
 80015c4:	0800a404 	.word	0x0800a404
 80015c8:	0800a414 	.word	0x0800a414
 80015cc:	0800a1e0 	.word	0x0800a1e0
 80015d0:	20000330 	.word	0x20000330
 80015d4:	0800a1e4 	.word	0x0800a1e4
 80015d8:	0800a1f0 	.word	0x0800a1f0
 80015dc:	0800a1fc 	.word	0x0800a1fc
 80015e0:	0800a214 	.word	0x0800a214
 80015e4:	0800a230 	.word	0x0800a230
 80015e8:	0800a248 	.word	0x0800a248
 80015ec:	0800a25c 	.word	0x0800a25c
 80015f0:	0800a26c 	.word	0x0800a26c
 80015f4:	0800a284 	.word	0x0800a284

080015f8 <pressure_temp_Init>:
//             Sensor Calibration                 //
//                                                //
////////////////////////////////////////////////////


void pressure_temp_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5f 	bl	80014c4 <clear_buf>

	printf("\r\n\r\n-----Begin Pressure Sensor-----\r\n");
 8001606:	4811      	ldr	r0, [pc, #68]	@ (800164c <pressure_temp_Init+0x54>)
 8001608:	f006 fdca 	bl	80081a0 <puts>

	//reset (needed to reconfigure on boot) ---------------------
	HAL_Delay(200);
 800160c:	20c8      	movs	r0, #200	@ 0xc8
 800160e:	f001 f905 	bl	800281c <HAL_Delay>
	buf[0] = 0x1E;//reset command
 8001612:	231e      	movs	r3, #30
 8001614:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 8001616:	1d3a      	adds	r2, r7, #4
 8001618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	21ec      	movs	r1, #236	@ 0xec
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <pressure_temp_Init+0x58>)
 8001624:	f002 fa9e 	bl	8003b64 <HAL_I2C_Master_Transmit>
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
	diagnose_pressure(ret);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff56 	bl	80014e0 <diagnose_pressure>
	i2c_check(ret, "reset command");
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4907      	ldr	r1, [pc, #28]	@ (8001654 <pressure_temp_Init+0x5c>)
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff29 	bl	8001490 <i2c_check>
	HAL_Delay(200);
 800163e:	20c8      	movs	r0, #200	@ 0xc8
 8001640:	f001 f8ec 	bl	800281c <HAL_Delay>

}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0800a420 	.word	0x0800a420
 8001650:	20000330 	.word	0x20000330
 8001654:	0800a448 	.word	0x0800a448

08001658 <pressure_temp_calibrate>:


void pressure_temp_calibrate(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff2f 	bl	80014c4 <clear_buf>

	printf("Calibrating Pressure Sensor...\r\n");
 8001666:	48a2      	ldr	r0, [pc, #648]	@ (80018f0 <pressure_temp_calibrate+0x298>)
 8001668:	f006 fd9a 	bl	80081a0 <puts>

	//read PROM (calibration data) ------------------------------
	HAL_Delay(100);
 800166c:	2064      	movs	r0, #100	@ 0x64
 800166e:	f001 f8d5 	bl	800281c <HAL_Delay>

	buf[0] = 0xA0; //PROM read command c0
 8001672:	23a0      	movs	r3, #160	@ 0xa0
 8001674:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 8001676:	1d3a      	adds	r2, r7, #4
 8001678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	21ec      	movs	r1, #236	@ 0xec
 8001682:	489c      	ldr	r0, [pc, #624]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001684:	f002 fa6e 	bl	8003b64 <HAL_I2C_Master_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	499a      	ldr	r1, [pc, #616]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fefd 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 8001696:	1d3a      	adds	r2, r7, #4
 8001698:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	21ec      	movs	r1, #236	@ 0xec
 80016a2:	4894      	ldr	r0, [pc, #592]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80016a4:	f002 fb76 	bl	8003d94 <HAL_I2C_Master_Receive>
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4993      	ldr	r1, [pc, #588]	@ (80018fc <pressure_temp_calibrate+0x2a4>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff feed 	bl	8001490 <i2c_check>
	prom.c0 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C0
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 80016ca:	801a      	strh	r2, [r3, #0]

	buf[0] = 0xA2; //PROM read command c1
 80016cc:	23a2      	movs	r3, #162	@ 0xa2
 80016ce:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 80016d0:	1d3a      	adds	r2, r7, #4
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	4885      	ldr	r0, [pc, #532]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80016de:	f002 fa41 	bl	8003b64 <HAL_I2C_Master_Transmit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4983      	ldr	r1, [pc, #524]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fed0 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2302      	movs	r3, #2
 80016fa:	21ec      	movs	r1, #236	@ 0xec
 80016fc:	487d      	ldr	r0, [pc, #500]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80016fe:	f002 fb49 	bl	8003d94 <HAL_I2C_Master_Receive>
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	497c      	ldr	r1, [pc, #496]	@ (80018fc <pressure_temp_calibrate+0x2a4>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fec0 	bl	8001490 <i2c_check>
	prom.c1 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C1
 8001710:	793b      	ldrb	r3, [r7, #4]
 8001712:	b21b      	sxth	r3, r3
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21b      	sxth	r3, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b77      	ldr	r3, [pc, #476]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 8001724:	805a      	strh	r2, [r3, #2]

	buf[0] = 0xA4; //PROM read command c2
 8001726:	23a4      	movs	r3, #164	@ 0xa4
 8001728:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 800172a:	1d3a      	adds	r2, r7, #4
 800172c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	21ec      	movs	r1, #236	@ 0xec
 8001736:	486f      	ldr	r0, [pc, #444]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001738:	f002 fa14 	bl	8003b64 <HAL_I2C_Master_Transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	496d      	ldr	r1, [pc, #436]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fea3 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 800174a:	1d3a      	adds	r2, r7, #4
 800174c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2302      	movs	r3, #2
 8001754:	21ec      	movs	r1, #236	@ 0xec
 8001756:	4867      	ldr	r0, [pc, #412]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001758:	f002 fb1c 	bl	8003d94 <HAL_I2C_Master_Receive>
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c2");
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4968      	ldr	r1, [pc, #416]	@ (8001904 <pressure_temp_calibrate+0x2ac>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe93 	bl	8001490 <i2c_check>
	prom.c2 =   ((uint16_t)buf[0] << 8)  | buf[1];  //C2
 800176a:	793b      	ldrb	r3, [r7, #4]
 800176c:	b21b      	sxth	r3, r3
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	797b      	ldrb	r3, [r7, #5]
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b60      	ldr	r3, [pc, #384]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 800177e:	809a      	strh	r2, [r3, #4]

	buf[0] = 0xA6; //PROM read command c3
 8001780:	23a6      	movs	r3, #166	@ 0xa6
 8001782:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 8001784:	1d3a      	adds	r2, r7, #4
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	21ec      	movs	r1, #236	@ 0xec
 8001790:	4858      	ldr	r0, [pc, #352]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001792:	f002 f9e7 	bl	8003b64 <HAL_I2C_Master_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4956      	ldr	r1, [pc, #344]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fe76 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 80017a4:	1d3a      	adds	r2, r7, #4
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2302      	movs	r3, #2
 80017ae:	21ec      	movs	r1, #236	@ 0xec
 80017b0:	4850      	ldr	r0, [pc, #320]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80017b2:	f002 faef 	bl	8003d94 <HAL_I2C_Master_Receive>
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c3");
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4952      	ldr	r1, [pc, #328]	@ (8001908 <pressure_temp_calibrate+0x2b0>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe66 	bl	8001490 <i2c_check>
	prom.c3 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C3
 80017c4:	793b      	ldrb	r3, [r7, #4]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 80017d8:	80da      	strh	r2, [r3, #6]

	buf[0] = 0xA8; //PROM read command c4
 80017da:	23a8      	movs	r3, #168	@ 0xa8
 80017dc:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	21ec      	movs	r1, #236	@ 0xec
 80017ea:	4842      	ldr	r0, [pc, #264]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80017ec:	f002 f9ba 	bl	8003b64 <HAL_I2C_Master_Transmit>
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4940      	ldr	r1, [pc, #256]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe49 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2302      	movs	r3, #2
 8001808:	21ec      	movs	r1, #236	@ 0xec
 800180a:	483a      	ldr	r0, [pc, #232]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 800180c:	f002 fac2 	bl	8003d94 <HAL_I2C_Master_Receive>
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c4");
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	493d      	ldr	r1, [pc, #244]	@ (800190c <pressure_temp_calibrate+0x2b4>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe39 	bl	8001490 <i2c_check>
	prom.c4 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C4
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	b21b      	sxth	r3, r3
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21b      	sxth	r3, r3
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 8001832:	811a      	strh	r2, [r3, #8]

	buf[0] = 0xAA; //PROM read command c5
 8001834:	23aa      	movs	r3, #170	@ 0xaa
 8001836:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 8001838:	1d3a      	adds	r2, r7, #4
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	21ec      	movs	r1, #236	@ 0xec
 8001844:	482b      	ldr	r0, [pc, #172]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001846:	f002 f98d 	bl	8003b64 <HAL_I2C_Master_Transmit>
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4929      	ldr	r1, [pc, #164]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fe1c 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 8001858:	1d3a      	adds	r2, r7, #4
 800185a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	21ec      	movs	r1, #236	@ 0xec
 8001864:	4823      	ldr	r0, [pc, #140]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 8001866:	f002 fa95 	bl	8003d94 <HAL_I2C_Master_Receive>
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c5");
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4927      	ldr	r1, [pc, #156]	@ (8001910 <pressure_temp_calibrate+0x2b8>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fe0c 	bl	8001490 <i2c_check>
	prom.c5 =    ((uint16_t)buf[0] << 8) | buf[1]; //C5
 8001878:	793b      	ldrb	r3, [r7, #4]
 800187a:	b21b      	sxth	r3, r3
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	797b      	ldrb	r3, [r7, #5]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 800188c:	815a      	strh	r2, [r3, #10]

	buf[0] = 0xAC; //PROM read command c6
 800188e:	23ac      	movs	r3, #172	@ 0xac
 8001890:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c3, PRESSURE_ADDR, buf, 1, 1000 );
 8001892:	1d3a      	adds	r2, r7, #4
 8001894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	21ec      	movs	r1, #236	@ 0xec
 800189e:	4815      	ldr	r0, [pc, #84]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80018a0:	f002 f960 	bl	8003b64 <HAL_I2C_Master_Transmit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4913      	ldr	r1, [pc, #76]	@ (80018f8 <pressure_temp_calibrate+0x2a0>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fdef 	bl	8001490 <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c3, PRESSURE_ADDR, buf, 2, 1000);
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2302      	movs	r3, #2
 80018bc:	21ec      	movs	r1, #236	@ 0xec
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <pressure_temp_calibrate+0x29c>)
 80018c0:	f002 fa68 	bl	8003d94 <HAL_I2C_Master_Receive>
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c6");
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4912      	ldr	r1, [pc, #72]	@ (8001914 <pressure_temp_calibrate+0x2bc>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fddf 	bl	8001490 <i2c_check>
	prom.c6 = ((uint16_t)buf[0] << 8) | buf[1]; //C6
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	797b      	ldrb	r3, [r7, #5]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <pressure_temp_calibrate+0x2a8>)
 80018e6:	819a      	strh	r2, [r3, #12]

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	0800a458 	.word	0x0800a458
 80018f4:	20000330 	.word	0x20000330
 80018f8:	0800a478 	.word	0x0800a478
 80018fc:	0800a494 	.word	0x0800a494
 8001900:	20000384 	.word	0x20000384
 8001904:	0800a4b0 	.word	0x0800a4b0
 8001908:	0800a4cc 	.word	0x0800a4cc
 800190c:	0800a4e8 	.word	0x0800a4e8
 8001910:	0800a504 	.word	0x0800a504
 8001914:	0800a520 	.word	0x0800a520

08001918 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10d      	bne.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
        // Your periodic code here
    	//gyro_test();
    	uint16_t gyroReading = gyroGetReading();
 800192a:	f7ff fd83 	bl	8001434 <gyroGetReading>
 800192e:	4603      	mov	r3, r0
 8001930:	82fb      	strh	r3, [r7, #22]
    	uint32_t presTempReading = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
    	uint16_t flowReading = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	81fb      	strh	r3, [r7, #14]
    	//presTempReading = get_pressure_temp_CAN( PRES_TEMP *pres_temp); // uncomment when working
    	transmit_sensor_packet(gyroReading, presTempReading, flowReading);
 800193a:	89fa      	ldrh	r2, [r7, #14]
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	6939      	ldr	r1, [r7, #16]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbeb 	bl	800111c <transmit_sensor_packet>
    	//get_pressure_temp(&pres_temp);
    	//printf("pressure: %f\r\n", pres_temp.pressure); //in units of millibar (mbar)
    	//printf("temperature: %f\r\n", pres_temp.temperature); //in degrees celcius
    }
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40001000 	.word	0x40001000

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195a:	f000 feea 	bl	8002732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195e:	f000 f83f 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f000 facf 	bl	8001f04 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001966:	f000 f96f 	bl	8001c48 <MX_TIM1_Init>
  MX_TIM2_Init();
 800196a:	f000 fa1b 	bl	8001da4 <MX_TIM2_Init>
  MX_CAN1_Init();
 800196e:	f000 f889 	bl	8001a84 <MX_CAN1_Init>
  MX_LPUART1_UART_Init();
 8001972:	f000 f93d 	bl	8001bf0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001976:	f000 f8bb 	bl	8001af0 <MX_I2C1_Init>
  MX_TIM6_Init();
 800197a:	f000 fa8b 	bl	8001e94 <MX_TIM6_Init>
  MX_I2C3_Init();
 800197e:	f000 f8f7 	bl	8001b70 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  //////// ---------------- THRUSTER INIT ------------------- ////////////
  //flash_thruster(0); DO NOT RUN
  //flash_thruster(1); DO NOT RUN
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001982:	2104      	movs	r1, #4
 8001984:	4813      	ldr	r0, [pc, #76]	@ (80019d4 <main+0x80>)
 8001986:	f004 f8d7 	bl	8005b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800198a:	2108      	movs	r1, #8
 800198c:	4812      	ldr	r0, [pc, #72]	@ (80019d8 <main+0x84>)
 800198e:	f004 f8d3 	bl	8005b38 <HAL_TIM_PWM_Start>
  init_thruster(0);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fad6 	bl	8000f44 <init_thruster>
  init_thruster(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fad3 	bl	8000f44 <init_thruster>
  /////////////////////////////////////////////////////////////////////////

  ////// ------------------ CAN INIT --------------------------/////////////
  can_setup();
 800199e:	f7ff fb49 	bl	8001034 <can_setup>
  //////////////////////////////////////////////////////////////////////////

  //////// -------------- PRESSURE SENSOR INIT ----------------- ////////////
  pressure_temp_Init();
 80019a2:	f7ff fe29 	bl	80015f8 <pressure_temp_Init>
  pressure_temp_calibrate();
 80019a6:	f7ff fe57 	bl	8001658 <pressure_temp_calibrate>
  ///////////////////////////////////////////////////////////////////////////////

  ////// ------------------ GYRO INIT ------------------------- ///////////
  gyro_init();
 80019aa:	f7ff fd09 	bl	80013c0 <gyro_init>
  //////////////////////////////////////////////////////////////////////////

  ////////--------------TIM6 START ------------------------------/////////////
  HAL_TIM_Base_Start_IT(&htim6); // This must happen AFTER sensor initialization!!
 80019ae:	480b      	ldr	r0, [pc, #44]	@ (80019dc <main+0x88>)
 80019b0:	f004 f80c 	bl	80059cc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t control =0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	control = read_control_from_CAN();
 80019b8:	f7ff fb90 	bl	80010dc <read_control_from_CAN>
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
	controlThrusterStateCAN(control);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc14 	bl	80011f0 <controlThrusterStateCAN>
	controlThrusterSpeedCAN(control);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fc56 	bl	800127c <controlThrusterSpeedCAN>
	control = read_control_from_CAN();
 80019d0:	bf00      	nop
 80019d2:	e7f1      	b.n	80019b8 <main+0x64>
 80019d4:	200001fc 	.word	0x200001fc
 80019d8:	20000248 	.word	0x20000248
 80019dc:	20000470 	.word	0x20000470

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b096      	sub	sp, #88	@ 0x58
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	2244      	movs	r2, #68	@ 0x44
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f006 fcb6 	bl	8008360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a06:	f002 fe13 	bl	8004630 <HAL_PWREx_ControlVoltageScaling>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a10:	f000 fae6 	bl	8001fe0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a14:	2310      	movs	r3, #16
 8001a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a20:	2360      	movs	r3, #96	@ 0x60
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a24:	2302      	movs	r3, #2
 8001a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a30:	2310      	movs	r3, #16
 8001a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a34:	2307      	movs	r3, #7
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fe49 	bl	80046dc <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a50:	f000 fac6 	bl	8001fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fa49 	bl	8004f04 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a78:	f000 fab2 	bl	8001fe0 <Error_Handler>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3758      	adds	r7, #88	@ 0x58
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <MX_CAN1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 240;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001a90:	22f0      	movs	r2, #240	@ 0xf0
 8001a92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001aa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aa6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001aaa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001aae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_CAN1_Init+0x64>)
 8001ad6:	f000 fec5 	bl	8002864 <HAL_CAN_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 fa7e 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000294 	.word	0x20000294
 8001aec:	40006400 	.word	0x40006400

08001af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001af6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b68 <MX_I2C1_Init+0x78>)
 8001af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001afc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <MX_I2C1_Init+0x7c>)
 8001afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b06:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b2a:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b2c:	f001 ff7e 	bl	8003a2c <HAL_I2C_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b36:	f000 fa53 	bl	8001fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b3e:	f002 fcd1 	bl	80044e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f000 fa4a 	bl	8001fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b50:	f002 fd13 	bl	800457a <HAL_I2CEx_ConfigDigitalFilter>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b5a:	f000 fa41 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000394 	.word	0x20000394
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	00b07cb4 	.word	0x00b07cb4

08001b70 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b76:	4a1c      	ldr	r2, [pc, #112]	@ (8001be8 <MX_I2C3_Init+0x78>)
 8001b78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bec <MX_I2C3_Init+0x7c>)
 8001b7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001b80:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001baa:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001bac:	f001 ff3e 	bl	8003a2c <HAL_I2C_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001bb6:	f000 fa13 	bl	8001fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001bbe:	f002 fc91 	bl	80044e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001bc8:	f000 fa0a 	bl	8001fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_I2C3_Init+0x74>)
 8001bd0:	f002 fcd3 	bl	800457a <HAL_I2CEx_ConfigDigitalFilter>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 fa01 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000330 	.word	0x20000330
 8001be8:	40005c00 	.word	0x40005c00
 8001bec:	00b07cb4 	.word	0x00b07cb4

08001bf0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001bf6:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <MX_LPUART1_UART_Init+0x54>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <MX_LPUART1_UART_Init+0x50>)
 8001c2e:	f005 f819 	bl	8006c64 <HAL_UART_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001c38:	f000 f9d2 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200003e8 	.word	0x200003e8
 8001c44:	40008000 	.word	0x40008000

08001c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b09a      	sub	sp, #104	@ 0x68
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	222c      	movs	r2, #44	@ 0x2c
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fb6c 	bl	8008360 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001c8a:	4a45      	ldr	r2, [pc, #276]	@ (8001da0 <MX_TIM1_Init+0x158>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 399;
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001c90:	f240 128f 	movw	r2, #399	@ 0x18f
 8001c94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001c9e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001ca2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001caa:	4b3c      	ldr	r3, [pc, #240]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb6:	4839      	ldr	r0, [pc, #228]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001cb8:	f003 fe30 	bl	800591c <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001cc2:	f000 f98d 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4832      	ldr	r0, [pc, #200]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001cd4:	f004 fa2a 	bl	800612c <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001cde:	f000 f97f 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ce2:	482e      	ldr	r0, [pc, #184]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001ce4:	f003 fec6 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001cee:	f000 f977 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cfe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d02:	4619      	mov	r1, r3
 8001d04:	4825      	ldr	r0, [pc, #148]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001d06:	f004 feb1 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001d10:	f000 f966 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d14:	2360      	movs	r3, #96	@ 0x60
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d34:	2208      	movs	r2, #8
 8001d36:	4619      	mov	r1, r3
 8001d38:	4818      	ldr	r0, [pc, #96]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001d3a:	f004 f8e3 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001d44:	f000 f94c 	bl	8001fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001d7e:	f004 fedb 	bl	8006b38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001d88:	f000 f92a 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d8c:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <MX_TIM1_Init+0x154>)
 8001d8e:	f000 fb1d 	bl	80023cc <HAL_TIM_MspPostInit>

}
 8001d92:	bf00      	nop
 8001d94:	3768      	adds	r7, #104	@ 0x68
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000248 	.word	0x20000248
 8001da0:	40012c00 	.word	0x40012c00

08001da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	@ 0x38
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001dd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ddc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 399;
 8001dde:	4b2c      	ldr	r3, [pc, #176]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001de0:	f240 128f 	movw	r2, #399	@ 0x18f
 8001de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1599;
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001dee:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e00:	4823      	ldr	r0, [pc, #140]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e02:	f003 fd8b 	bl	800591c <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001e0c:	f000 f8e8 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481c      	ldr	r0, [pc, #112]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e1e:	f004 f985 	bl	800612c <HAL_TIM_ConfigClockSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001e28:	f000 f8da 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e2c:	4818      	ldr	r0, [pc, #96]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e2e:	f003 fe21 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e38:	f000 f8d2 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e4c:	f004 fe0e 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001e56:	f000 f8c3 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e72:	f004 f847 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001e7c:	f000 f8b0 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <MX_TIM2_Init+0xec>)
 8001e82:	f000 faa3 	bl	80023cc <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3738      	adds	r7, #56	@ 0x38
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001fc 	.word	0x200001fc

08001e94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001ea6:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <MX_TIM6_Init+0x6c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001eac:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001eb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1599;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001eba:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001ebe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001ec8:	f003 fd28 	bl	800591c <HAL_TIM_Base_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ed2:	f000 f885 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <MX_TIM6_Init+0x68>)
 8001ee4:	f004 fdc2 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001eee:	f000 f877 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000470 	.word	0x20000470
 8001f00:	40001000 	.word	0x40001000

08001f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	4a25      	ldr	r2, [pc, #148]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <MX_GPIO_Init+0xb0>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2108      	movs	r1, #8
 8001f66:	4814      	ldr	r0, [pc, #80]	@ (8001fb8 <MX_GPIO_Init+0xb4>)
 8001f68:	f001 fd48 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f8c:	f001 fbcc 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001f90:	2308      	movs	r3, #8
 8001f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <MX_GPIO_Init+0xb4>)
 8001fa8:	f001 fbbe 	bl	8003728 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400

08001fbc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <__io_putchar+0x20>)
 8001fce:	f004 fe97 	bl	8006d00 <HAL_UART_Transmit>
  return ch;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200003e8 	.word	0x200003e8

08001fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
}
 8001fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <Error_Handler+0x8>

08001fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_MspInit+0x44>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <HAL_MspInit+0x44>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_MspInit+0x44>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_MspInit+0x44>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <HAL_MspInit+0x44>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_MspInit+0x44>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	@ 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_CAN_MspInit+0xd4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d153      	bne.n	80020fe <HAL_CAN_MspInit+0xca>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205a:	4a2c      	ldr	r2, [pc, #176]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 800205c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002060:	6593      	str	r3, [r2, #88]	@ 0x58
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4a26      	ldr	r2, [pc, #152]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_CAN_MspInit+0xd8>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002086:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002098:	2309      	movs	r3, #9
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a6:	f001 fb3f 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020bc:	2309      	movs	r3, #9
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ca:	f001 fb2d 	bl	8003728 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2013      	movs	r0, #19
 80020d4:	f001 faf1 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80020d8:	2013      	movs	r0, #19
 80020da:	f001 fb0a 	bl	80036f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2014      	movs	r0, #20
 80020e4:	f001 fae9 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020e8:	2014      	movs	r0, #20
 80020ea:	f001 fb02 	bl	80036f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2015      	movs	r0, #21
 80020f4:	f001 fae1 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80020f8:	2015      	movs	r0, #21
 80020fa:	f001 fafa 	bl	80036f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40006400 	.word	0x40006400
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0a2      	sub	sp, #136	@ 0x88
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0320 	add.w	r3, r7, #32
 800212c:	2254      	movs	r2, #84	@ 0x54
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f006 f915 	bl	8008360 <memset>
  if(hi2c->Instance==I2C1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4e      	ldr	r2, [pc, #312]	@ (8002274 <HAL_I2C_MspInit+0x164>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d138      	bne.n	80021b2 <HAL_I2C_MspInit+0xa2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002140:	2340      	movs	r3, #64	@ 0x40
 8002142:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002144:	2300      	movs	r3, #0
 8002146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0320 	add.w	r3, r7, #32
 800214c:	4618      	mov	r0, r3
 800214e:	f003 f8fd 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff ff42 	bl	8001fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215c:	4b46      	ldr	r3, [pc, #280]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002160:	4a45      	ldr	r2, [pc, #276]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002168:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002174:	23c0      	movs	r3, #192	@ 0xc0
 8002176:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002178:	2312      	movs	r3, #18
 800217a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002186:	2304      	movs	r3, #4
 8002188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002190:	4619      	mov	r1, r3
 8002192:	483a      	ldr	r0, [pc, #232]	@ (800227c <HAL_I2C_MspInit+0x16c>)
 8002194:	f001 fac8 	bl	8003728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219c:	4a36      	ldr	r2, [pc, #216]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 800219e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a4:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021b0:	e05c      	b.n	800226c <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a32      	ldr	r2, [pc, #200]	@ (8002280 <HAL_I2C_MspInit+0x170>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d157      	bne.n	800226c <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f8be 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80021d6:	f7ff ff03 	bl	8001fe0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	4a20      	ldr	r2, [pc, #128]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800220e:	2312      	movs	r3, #18
 8002210:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800221c:	2304      	movs	r3, #4
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222c:	f001 fa7c 	bl	8003728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002230:	2310      	movs	r3, #16
 8002232:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002242:	2304      	movs	r3, #4
 8002244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800224c:	4619      	mov	r1, r3
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <HAL_I2C_MspInit+0x16c>)
 8002250:	f001 fa6a 	bl	8003728 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 800225a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800225e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_I2C_MspInit+0x168>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	bf00      	nop
 800226e:	3788      	adds	r7, #136	@ 0x88
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40005400 	.word	0x40005400
 8002278:	40021000 	.word	0x40021000
 800227c:	48000400 	.word	0x48000400
 8002280:	40005c00 	.word	0x40005c00

08002284 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b09e      	sub	sp, #120	@ 0x78
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	2254      	movs	r2, #84	@ 0x54
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 f85b 	bl	8008360 <memset>
  if(huart->Instance==LPUART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <HAL_UART_MspInit+0xa8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d136      	bne.n	8002322 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022b4:	2320      	movs	r3, #32
 80022b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f843 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022cc:	f7ff fe88 	bl	8001fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022d0:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_UART_MspInit+0xac>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002300:	230c      	movs	r3, #12
 8002302:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002310:	2308      	movs	r3, #8
 8002312:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002318:	4619      	mov	r1, r3
 800231a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231e:	f001 fa03 	bl	8003728 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002322:	bf00      	nop
 8002324:	3778      	adds	r7, #120	@ 0x78
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40008000 	.word	0x40008000
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1f      	ldr	r2, [pc, #124]	@ (80023c0 <HAL_TIM_Base_MspInit+0x8c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10c      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002346:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 800234c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002350:	6613      	str	r3, [r2, #96]	@ 0x60
 8002352:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800235e:	e02a      	b.n	80023b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002368:	d10c      	bne.n	8002384 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236a:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
}
 8002382:	e018      	b.n	80023b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <HAL_TIM_Base_MspInit+0x94>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d113      	bne.n	80023b6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_TIM_Base_MspInit+0x90>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2036      	movs	r0, #54	@ 0x36
 80023ac:	f001 f985 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b0:	2036      	movs	r0, #54	@ 0x36
 80023b2:	f001 f99e 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40001000 	.word	0x40001000

080023cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a23      	ldr	r2, [pc, #140]	@ (8002478 <HAL_TIM_MspPostInit+0xac>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d11e      	bne.n	800242c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f2:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002418:	2301      	movs	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002426:	f001 f97f 	bl	8003728 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800242a:	e021      	b.n	8002470 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002434:	d11c      	bne.n	8002470 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800244e:	2302      	movs	r3, #2
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245e:	2301      	movs	r3, #1
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800246c:	f001 f95c 	bl	8003728 <HAL_GPIO_Init>
}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	@ 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40021000 	.word	0x40021000

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <NMI_Handler+0x4>

08002488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <MemManage_Handler+0x4>

08002498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <BusFault_Handler+0x4>

080024a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <UsageFault_Handler+0x4>

080024a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d6:	f000 f981 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <CAN1_TX_IRQHandler+0x10>)
 80024e6:	f000 fdde 	bl	80030a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000294 	.word	0x20000294

080024f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <CAN1_RX0_IRQHandler+0x10>)
 80024fa:	f000 fdd4 	bl	80030a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000294 	.word	0x20000294

08002508 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800250c:	4802      	ldr	r0, [pc, #8]	@ (8002518 <CAN1_RX1_IRQHandler+0x10>)
 800250e:	f000 fdca 	bl	80030a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000294 	.word	0x20000294

0800251c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	@ (800252c <TIM6_DAC_IRQHandler+0x10>)
 8002522:	f003 fbe7 	bl	8005cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000470 	.word	0x20000470

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_kill>:

int _kill(int pid, int sig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800254a:	f005 ff5b 	bl	8008404 <__errno>
 800254e:	4603      	mov	r3, r0
 8002550:	2216      	movs	r2, #22
 8002552:	601a      	str	r2, [r3, #0]
  return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_exit>:

void _exit (int status)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffe7 	bl	8002540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <_exit+0x12>

08002576 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e00a      	b.n	800259e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002588:	f3af 8000 	nop.w
 800258c:	4601      	mov	r1, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	60ba      	str	r2, [r7, #8]
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbf0      	blt.n	8002588 <_read+0x12>
  }

  return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e009      	b.n	80025d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	60ba      	str	r2, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fcf6 	bl	8001fbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf1      	blt.n	80025c2 <_write+0x12>
  }
  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_close>:

int _close(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002610:	605a      	str	r2, [r3, #4]
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_isatty>:

int _isatty(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f005 fec0 	bl	8008404 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000c000 	.word	0x2000c000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	200004c0 	.word	0x200004c0
 80026b8:	20000618 	.word	0x20000618

080026bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e4:	f7ff ffea 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480c      	ldr	r0, [pc, #48]	@ (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026ea:	490d      	ldr	r1, [pc, #52]	@ (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002700:	4c0a      	ldr	r4, [pc, #40]	@ (800272c <LoopForever+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270e:	f005 fe7f 	bl	8008410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002712:	f7ff f91f 	bl	8001954 <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002718:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002724:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 8002728:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800272c:	20000614 	.word	0x20000614

08002730 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC1_IRQHandler>

08002732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 ffb1 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f80e 	bl	8002764 <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	e001      	b.n	8002758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002754:	f7ff fc4a 	bl	8001fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002758:	79fb      	ldrb	r3, [r7, #7]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_InitTick+0x6c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002778:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <HAL_InitTick+0x70>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_InitTick+0x6c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 ffbd 	bl	800370e <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d809      	bhi.n	80027b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 ff87 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_InitTick+0x74>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e007      	b.n	80027c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e004      	b.n	80027c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e001      	b.n	80027c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000014 	.word	0x20000014
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	20000010 	.word	0x20000010

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000014 	.word	0x20000014
 8002800:	200004c4 	.word	0x200004c4

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200004c4 	.word	0x200004c4

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <HAL_Delay+0x44>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffde 	bl	8002804 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000014 	.word	0x20000014

08002864 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0ed      	b.n	8002a52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fbd6 	bl	8002034 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7ff ffb4 	bl	8002804 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800289e:	e012      	b.n	80028c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a0:	f7ff ffb0 	bl	8002804 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d90b      	bls.n	80028c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2205      	movs	r2, #5
 80028be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0c5      	b.n	8002a52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0e5      	beq.n	80028a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0202 	bic.w	r2, r2, #2
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e4:	f7ff ff8e 	bl	8002804 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ea:	e012      	b.n	8002912 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028ec:	f7ff ff8a 	bl	8002804 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d90b      	bls.n	8002912 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2205      	movs	r2, #5
 800290a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e09f      	b.n	8002a52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e5      	bne.n	80028ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d108      	bne.n	800293a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e007      	b.n	800294a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e5b      	ldrb	r3, [r3, #25]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e007      	b.n	8002974 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e9b      	ldrb	r3, [r3, #26]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d108      	bne.n	800298e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0220 	bic.w	r2, r2, #32
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7edb      	ldrb	r3, [r3, #27]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d108      	bne.n	80029b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0210 	bic.w	r2, r2, #16
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e007      	b.n	80029c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0210 	orr.w	r2, r2, #16
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7f1b      	ldrb	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0208 	orr.w	r2, r2, #8
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e007      	b.n	80029f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7f5b      	ldrb	r3, [r3, #29]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a70:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d003      	beq.n	8002a80 <HAL_CAN_ConfigFilter+0x26>
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 80aa 	bne.w	8002bd4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2201      	movs	r2, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d123      	bne.n	8002b02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002adc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3248      	adds	r2, #72	@ 0x48
 8002ae2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002af6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002af8:	6979      	ldr	r1, [r7, #20]
 8002afa:	3348      	adds	r3, #72	@ 0x48
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d122      	bne.n	8002b50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3248      	adds	r2, #72	@ 0x48
 8002b30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	3348      	adds	r3, #72	@ 0x48
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002b96:	e007      	b.n	8002ba8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e006      	b.n	8002be2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d12e      	bne.n	8002c60 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c1a:	f7ff fdf3 	bl	8002804 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c20:	e012      	b.n	8002c48 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c22:	f7ff fdef 	bl	8002804 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b0a      	cmp	r3, #10
 8002c2e:	d90b      	bls.n	8002c48 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2205      	movs	r2, #5
 8002c40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e012      	b.n	8002c6e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e006      	b.n	8002c6e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b089      	sub	sp, #36	@ 0x24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c94:	7ffb      	ldrb	r3, [r7, #31]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d003      	beq.n	8002ca2 <HAL_CAN_AddTxMessage+0x2c>
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	f040 80ad 	bne.w	8002dfc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8095 	beq.w	8002dec <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	0e1b      	lsrs	r3, r3, #24
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	6809      	ldr	r1, [r1, #0]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3318      	adds	r3, #24
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	440b      	add	r3, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e00f      	b.n	8002d1a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3318      	adds	r3, #24
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	440b      	add	r3, r1
 8002d18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3318      	adds	r3, #24
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	440b      	add	r3, r1
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	7d1b      	ldrb	r3, [r3, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d111      	bne.n	8002d5a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3318      	adds	r3, #24
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3318      	adds	r3, #24
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	440b      	add	r3, r1
 8002d56:	3304      	adds	r3, #4
 8002d58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3307      	adds	r3, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3306      	adds	r3, #6
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3305      	adds	r3, #5
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	3204      	adds	r2, #4
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6811      	ldr	r1, [r2, #0]
 8002d82:	ea43 0200 	orr.w	r2, r3, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002d90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3303      	adds	r3, #3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	061a      	lsls	r2, r3, #24
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4313      	orrs	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	4610      	mov	r0, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	6811      	ldr	r1, [r2, #0]
 8002db8:	ea43 0200 	orr.w	r2, r3, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002dc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3318      	adds	r3, #24
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3318      	adds	r3, #24
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	440b      	add	r3, r1
 8002de6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e00e      	b.n	8002e0a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e006      	b.n	8002e0a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e2a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d003      	beq.n	8002e3a <HAL_CAN_GetRxMessage+0x24>
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	f040 8103 	bne.w	8003040 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10e      	bne.n	8002e5e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0f7      	b.n	800304e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0e8      	b.n	800304e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	331b      	adds	r3, #27
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0204 	and.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	331b      	adds	r3, #27
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	331b      	adds	r3, #27
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	331b      	adds	r3, #27
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0202 	and.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	331b      	adds	r3, #27
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	611a      	str	r2, [r3, #16]
 8002f00:	e00b      	b.n	8002f1a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	331b      	adds	r3, #27
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	331b      	adds	r3, #27
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	331b      	adds	r3, #27
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0a1a      	lsrs	r2, r3, #8
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0c1a      	lsrs	r2, r3, #16
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	3302      	adds	r3, #2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e1a      	lsrs	r2, r3, #24
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3303      	adds	r3, #3
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0a1a      	lsrs	r2, r3, #8
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	3305      	adds	r3, #5
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0c1a      	lsrs	r2, r3, #16
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	3306      	adds	r3, #6
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e1a      	lsrs	r2, r3, #24
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3307      	adds	r3, #7
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	e007      	b.n	800303c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e006      	b.n	800304e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <HAL_CAN_ActivateNotification+0x1e>
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d109      	bne.n	800308c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6959      	ldr	r1, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e006      	b.n	800309a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	@ 0x28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07c      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d023      	beq.n	800313e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f983 	bl	8003414 <HAL_CAN_TxMailbox0CompleteCallback>
 800310e:	e016      	b.n	800313e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
 8003122:	e00c      	b.n	800313e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
 8003136:	e002      	b.n	800313e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f989 	bl	8003450 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d024      	beq.n	8003192 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f963 	bl	8003428 <HAL_CAN_TxMailbox1CompleteCallback>
 8003162:	e016      	b.n	8003192 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	e00c      	b.n	8003192 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
 800318a:	e002      	b.n	8003192 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f969 	bl	8003464 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d024      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f943 	bl	800343c <HAL_CAN_TxMailbox2CompleteCallback>
 80031b6:	e016      	b.n	80031e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ca:	e00c      	b.n	80031e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031de:	e002      	b.n	80031e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f949 	bl	8003478 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2210      	movs	r2, #16
 8003208:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2208      	movs	r2, #8
 8003224:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f930 	bl	800348c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fd fed9 	bl	8000ffc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f912 	bl	80034b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8f9 	bl	80034a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8fc 	bl	80034c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2208      	movs	r2, #8
 80032ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8f5 	bl	80034dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d07b      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d072      	beq.n	80033ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003360:	2b00      	cmp	r3, #0
 8003362:	d043      	beq.n	80033ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03e      	beq.n	80033ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003374:	2b60      	cmp	r3, #96	@ 0x60
 8003376:	d02b      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x32a>
 8003378:	2b60      	cmp	r3, #96	@ 0x60
 800337a:	d82e      	bhi.n	80033da <HAL_CAN_IRQHandler+0x334>
 800337c:	2b50      	cmp	r3, #80	@ 0x50
 800337e:	d022      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x320>
 8003380:	2b50      	cmp	r3, #80	@ 0x50
 8003382:	d82a      	bhi.n	80033da <HAL_CAN_IRQHandler+0x334>
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d019      	beq.n	80033bc <HAL_CAN_IRQHandler+0x316>
 8003388:	2b40      	cmp	r3, #64	@ 0x40
 800338a:	d826      	bhi.n	80033da <HAL_CAN_IRQHandler+0x334>
 800338c:	2b30      	cmp	r3, #48	@ 0x30
 800338e:	d010      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x30c>
 8003390:	2b30      	cmp	r3, #48	@ 0x30
 8003392:	d822      	bhi.n	80033da <HAL_CAN_IRQHandler+0x334>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d002      	beq.n	800339e <HAL_CAN_IRQHandler+0x2f8>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d005      	beq.n	80033a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800339c:	e01d      	b.n	80033da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033a6:	e019      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	f043 0310 	orr.w	r3, r3, #16
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033b0:	e014      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	f043 0320 	orr.w	r3, r3, #32
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033ba:	e00f      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033c4:	e00a      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033ce:	e005      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033d8:	e000      	b.n	80033dc <HAL_CAN_IRQHandler+0x336>
            break;
 80033da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80033ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f872 	bl	80034f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800340c:	bf00      	nop
 800340e:	3728      	adds	r7, #40	@ 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	e148      	b.n	80039ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 813a 	beq.w	80039c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x40>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d017      	beq.n	8003806 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d123      	bne.n	800385a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	08da      	lsrs	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3208      	adds	r2, #8
 8003854:	6939      	ldr	r1, [r7, #16]
 8003856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8094 	beq.w	80039c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389c:	4b52      	ldr	r3, [pc, #328]	@ (80039e8 <HAL_GPIO_Init+0x2c0>)
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	4a51      	ldr	r2, [pc, #324]	@ (80039e8 <HAL_GPIO_Init+0x2c0>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80038a8:	4b4f      	ldr	r3, [pc, #316]	@ (80039e8 <HAL_GPIO_Init+0x2c0>)
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038b4:	4a4d      	ldr	r2, [pc, #308]	@ (80039ec <HAL_GPIO_Init+0x2c4>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038de:	d00d      	beq.n	80038fc <HAL_GPIO_Init+0x1d4>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <HAL_GPIO_Init+0x2c8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <HAL_GPIO_Init+0x1d0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a42      	ldr	r2, [pc, #264]	@ (80039f4 <HAL_GPIO_Init+0x2cc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_GPIO_Init+0x1cc>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e004      	b.n	80038fe <HAL_GPIO_Init+0x1d6>
 80038f4:	2307      	movs	r3, #7
 80038f6:	e002      	b.n	80038fe <HAL_GPIO_Init+0x1d6>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_GPIO_Init+0x1d6>
 80038fc:	2300      	movs	r3, #0
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	f002 0203 	and.w	r2, r2, #3
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	4093      	lsls	r3, r2
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800390e:	4937      	ldr	r1, [pc, #220]	@ (80039ec <HAL_GPIO_Init+0x2c4>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800391c:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003940:	4a2d      	ldr	r2, [pc, #180]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003946:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800396a:	4a23      	ldr	r2, [pc, #140]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003970:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800399a:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039be:	4a0e      	ldr	r2, [pc, #56]	@ (80039f8 <HAL_GPIO_Init+0x2d0>)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f aeaf 	bne.w	8003738 <HAL_GPIO_Init+0x10>
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000
 80039f0:	48000400 	.word	0x48000400
 80039f4:	48000800 	.word	0x48000800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fb5c 	bl	8002110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	@ 0x24
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e006      	b.n	8003ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d108      	bne.n	8003ace <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e007      	b.n	8003ade <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	460b      	mov	r3, r1
 8003b72:	817b      	strh	r3, [r7, #10]
 8003b74:	4613      	mov	r3, r2
 8003b76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	f040 80fd 	bne.w	8003d80 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x30>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0f6      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fe32 	bl	8002804 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2319      	movs	r3, #25
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa16 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0e1      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2221      	movs	r2, #33	@ 0x21
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	893a      	ldrh	r2, [r7, #8]
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2bff      	cmp	r3, #255	@ 0xff
 8003bee:	d906      	bls.n	8003bfe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	@ 0xff
 8003bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003bf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e007      	b.n	8003c0e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c0c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d024      	beq.n	8003c60 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	8979      	ldrh	r1, [r7, #10]
 8003c52:	4b4e      	ldr	r3, [pc, #312]	@ (8003d8c <HAL_I2C_Master_Transmit+0x228>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fc11 	bl	8004480 <I2C_TransferConfig>
 8003c5e:	e066      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	8979      	ldrh	r1, [r7, #10]
 8003c68:	4b48      	ldr	r3, [pc, #288]	@ (8003d8c <HAL_I2C_Master_Transmit+0x228>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fc06 	bl	8004480 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c74:	e05b      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa09 	bl	8004092 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07b      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d034      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x1ca>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d130      	bne.n	8003d2e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2180      	movs	r1, #128	@ 0x80
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f982 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e04d      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2bff      	cmp	r3, #255	@ 0xff
 8003cee:	d90e      	bls.n	8003d0e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fbba 	bl	8004480 <I2C_TransferConfig>
 8003d0c:	e00f      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fba9 	bl	8004480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d19e      	bne.n	8003c76 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	6a39      	ldr	r1, [r7, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f9ef 	bl	8004120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01a      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2220      	movs	r2, #32
 8003d52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <HAL_I2C_Master_Transmit+0x22c>)
 8003d60:	400b      	ands	r3, r1
 8003d62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	80002000 	.word	0x80002000
 8003d90:	fe00e800 	.word	0xfe00e800

08003d94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	460b      	mov	r3, r1
 8003da2:	817b      	strh	r3, [r7, #10]
 8003da4:	4613      	mov	r3, r2
 8003da6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	f040 80db 	bne.w	8003f6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0x30>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0d4      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fe fd1a 	bl	8002804 <HAL_GetTick>
 8003dd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2319      	movs	r3, #25
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f8fe 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0bf      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2222      	movs	r2, #34	@ 0x22
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	893a      	ldrh	r2, [r7, #8]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2bff      	cmp	r3, #255	@ 0xff
 8003e1e:	d90e      	bls.n	8003e3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	4b52      	ldr	r3, [pc, #328]	@ (8003f78 <HAL_I2C_Master_Receive+0x1e4>)
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fb22 	bl	8004480 <I2C_TransferConfig>
 8003e3c:	e06d      	b.n	8003f1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	8979      	ldrh	r1, [r7, #10]
 8003e50:	4b49      	ldr	r3, [pc, #292]	@ (8003f78 <HAL_I2C_Master_Receive+0x1e4>)
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fb11 	bl	8004480 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003e5e:	e05c      	b.n	8003f1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6a39      	ldr	r1, [r7, #32]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f99f 	bl	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e07c      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d034      	beq.n	8003f1a <HAL_I2C_Master_Receive+0x186>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d130      	bne.n	8003f1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	@ 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f88c 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e04d      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2bff      	cmp	r3, #255	@ 0xff
 8003eda:	d90e      	bls.n	8003efa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fac4 	bl	8004480 <I2C_TransferConfig>
 8003ef8:	e00f      	b.n	8003f1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fab3 	bl	8004480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d19d      	bne.n	8003e60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f8f9 	bl	8004120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01a      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <HAL_I2C_Master_Receive+0x1e8>)
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	80002400 	.word	0x80002400
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d007      	beq.n	8003fd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	619a      	str	r2, [r3, #24]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff0:	e03b      	b.n	800406a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f962 	bl	80042c0 <I2C_IsErrorOccurred>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e041      	b.n	800408a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d02d      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fbf9 	bl	8002804 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnFlagUntilTimeout+0x44>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d122      	bne.n	800406a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4013      	ands	r3, r2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	429a      	cmp	r2, r3
 8004040:	d113      	bne.n	800406a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e00f      	b.n	800408a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	429a      	cmp	r2, r3
 8004078:	bf0c      	ite	eq
 800407a:	2301      	moveq	r3, #1
 800407c:	2300      	movne	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	429a      	cmp	r2, r3
 8004086:	d0b4      	beq.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800409e:	e033      	b.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f90b 	bl	80042c0 <I2C_IsErrorOccurred>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e031      	b.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d025      	beq.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fe fba2 	bl	8002804 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11a      	bne.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d013      	beq.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e007      	b.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d1c4      	bne.n	80040a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800412c:	e02f      	b.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8c4 	bl	80042c0 <I2C_IsErrorOccurred>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e02d      	b.n	800419e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fe fb5f 	bl	8002804 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11a      	bne.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d013      	beq.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d1c8      	bne.n	800412e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041b8:	e071      	b.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f87e 	bl	80042c0 <I2C_IsErrorOccurred>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d13b      	bne.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d138      	bne.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d105      	bne.n	80041fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d121      	bne.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2210      	movs	r2, #16
 8004210:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2204      	movs	r2, #4
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2220      	movs	r2, #32
 800421e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800422c:	400b      	ands	r3, r1
 800422e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
 800424c:	e002      	b.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004254:	f7fe fad6 	bl	8002804 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d119      	bne.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d116      	bne.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b04      	cmp	r3, #4
 800427c:	d00f      	beq.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d002      	beq.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d083      	beq.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	fe00e800 	.word	0xfe00e800

080042c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d068      	beq.n	80043be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f4:	e049      	b.n	800438a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d045      	beq.n	800438a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fe fa81 	bl	8002804 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_IsErrorOccurred+0x54>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d13a      	bne.n	800438a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004326:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004336:	d121      	bne.n	800437c <I2C_IsErrorOccurred+0xbc>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800433e:	d01d      	beq.n	800437c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d01a      	beq.n	800437c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004354:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004356:	f7fe fa55 	bl	8002804 <HAL_GetTick>
 800435a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800435c:	e00e      	b.n	800437c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800435e:	f7fe fa51 	bl	8002804 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b19      	cmp	r3, #25
 800436a:	d907      	bls.n	800437c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f043 0320 	orr.w	r3, r3, #32
 8004372:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800437a:	e006      	b.n	800438a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d1e9      	bne.n	800435e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b20      	cmp	r3, #32
 8004396:	d003      	beq.n	80043a0 <I2C_IsErrorOccurred+0xe0>
 8004398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0aa      	beq.n	80042f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2220      	movs	r2, #32
 80043ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800442c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01c      	beq.n	800446e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fdaf 	bl	8003f98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <I2C_IsErrorOccurred+0x1bc>)
 8004446:	400b      	ands	r3, r1
 8004448:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800446e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004472:	4618      	mov	r0, r3
 8004474:	3728      	adds	r7, #40	@ 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	fe00e800 	.word	0xfe00e800

08004480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	4613      	mov	r3, r2
 8004490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004498:	7a7b      	ldrb	r3, [r7, #9]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	0d5b      	lsrs	r3, r3, #21
 80044ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <I2C_TransferConfig+0x60>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	43db      	mvns	r3, r3
 80044c4:	ea02 0103 	and.w	r1, r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	03ff63ff 	.word	0x03ff63ff

080044e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d138      	bne.n	800456c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004504:	2302      	movs	r3, #2
 8004506:	e032      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	@ 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	d139      	bne.n	8004604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800459a:	2302      	movs	r3, #2
 800459c:	e033      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	@ 0x24
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <HAL_PWREx_GetVoltageRange+0x18>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40007000 	.word	0x40007000

08004630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463e:	d130      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004640:	4b23      	ldr	r3, [pc, #140]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464c:	d038      	beq.n	80046c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004656:	4a1e      	ldr	r2, [pc, #120]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004658:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800465e:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2232      	movs	r2, #50	@ 0x32
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0c9b      	lsrs	r3, r3, #18
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004674:	e002      	b.n	800467c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b01      	subs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800467c:	4b14      	ldr	r3, [pc, #80]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004688:	d102      	bne.n	8004690 <HAL_PWREx_ControlVoltageScaling+0x60>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f2      	bne.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004690:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469c:	d110      	bne.n	80046c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d007      	beq.n	80046c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046b8:	4a05      	ldr	r2, [pc, #20]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40007000 	.word	0x40007000
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	431bde83 	.word	0x431bde83

080046dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f000 bc02 	b.w	8004ef4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f0:	4b96      	ldr	r3, [pc, #600]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046fa:	4b94      	ldr	r3, [pc, #592]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80e4 	beq.w	80048da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_RCC_OscConfig+0x4c>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	f040 808b 	bne.w	8004836 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b01      	cmp	r3, #1
 8004724:	f040 8087 	bne.w	8004836 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004728:	4b88      	ldr	r3, [pc, #544]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x64>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e3d9      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	4b81      	ldr	r3, [pc, #516]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_RCC_OscConfig+0x7e>
 8004750:	4b7e      	ldr	r3, [pc, #504]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004758:	e005      	b.n	8004766 <HAL_RCC_OscConfig+0x8a>
 800475a:	4b7c      	ldr	r3, [pc, #496]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004766:	4293      	cmp	r3, r2
 8004768:	d223      	bcs.n	80047b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fd8c 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e3ba      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800477e:	4b73      	ldr	r3, [pc, #460]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a72      	ldr	r2, [pc, #456]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004784:	f043 0308 	orr.w	r3, r3, #8
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b70      	ldr	r3, [pc, #448]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	496d      	ldr	r1, [pc, #436]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479c:	4b6b      	ldr	r3, [pc, #428]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	4968      	ldr	r1, [pc, #416]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	e025      	b.n	80047fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047b2:	4b66      	ldr	r3, [pc, #408]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a65      	ldr	r2, [pc, #404]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047b8:	f043 0308 	orr.w	r3, r3, #8
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b63      	ldr	r3, [pc, #396]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4960      	ldr	r1, [pc, #384]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047d0:	4b5e      	ldr	r3, [pc, #376]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	495b      	ldr	r1, [pc, #364]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fd4c 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e37a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047fe:	f000 fc81 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b51      	ldr	r3, [pc, #324]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	4950      	ldr	r1, [pc, #320]	@ (8004950 <HAL_RCC_OscConfig+0x274>)
 8004810:	5ccb      	ldrb	r3, [r1, r3]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	fa22 f303 	lsr.w	r3, r2, r3
 800481a:	4a4e      	ldr	r2, [pc, #312]	@ (8004954 <HAL_RCC_OscConfig+0x278>)
 800481c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800481e:	4b4e      	ldr	r3, [pc, #312]	@ (8004958 <HAL_RCC_OscConfig+0x27c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd ff9e 	bl	8002764 <HAL_InitTick>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d052      	beq.n	80048d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	e35e      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d032      	beq.n	80048a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800483e:	4b43      	ldr	r3, [pc, #268]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a42      	ldr	r2, [pc, #264]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800484a:	f7fd ffdb 	bl	8002804 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004852:	f7fd ffd7 	bl	8002804 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e347      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004864:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004870:	4b36      	ldr	r3, [pc, #216]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a35      	ldr	r2, [pc, #212]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004876:	f043 0308 	orr.w	r3, r3, #8
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b33      	ldr	r3, [pc, #204]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4930      	ldr	r1, [pc, #192]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800488e:	4b2f      	ldr	r3, [pc, #188]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	492b      	ldr	r1, [pc, #172]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
 80048a2:	e01a      	b.n	80048da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048a4:	4b29      	ldr	r3, [pc, #164]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a28      	ldr	r2, [pc, #160]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048b0:	f7fd ffa8 	bl	8002804 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048b8:	f7fd ffa4 	bl	8002804 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e314      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1dc>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d073      	beq.n	80049ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_OscConfig+0x21c>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d10e      	bne.n	8004910 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d063      	beq.n	80049cc <HAL_RCC_OscConfig+0x2f0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d15f      	bne.n	80049cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e2f1      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x24c>
 800491a:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a0b      	ldr	r2, [pc, #44]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e025      	b.n	8004974 <HAL_RCC_OscConfig+0x298>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d114      	bne.n	800495c <HAL_RCC_OscConfig+0x280>
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a05      	ldr	r2, [pc, #20]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b03      	ldr	r3, [pc, #12]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a02      	ldr	r2, [pc, #8]	@ (800494c <HAL_RCC_OscConfig+0x270>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e013      	b.n	8004974 <HAL_RCC_OscConfig+0x298>
 800494c:	40021000 	.word	0x40021000
 8004950:	0800a5bc 	.word	0x0800a5bc
 8004954:	2000000c 	.word	0x2000000c
 8004958:	20000010 	.word	0x20000010
 800495c:	4ba0      	ldr	r3, [pc, #640]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a9f      	ldr	r2, [pc, #636]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b9d      	ldr	r3, [pc, #628]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a9c      	ldr	r2, [pc, #624]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 800496e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd ff42 	bl	8002804 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fd ff3e 	bl	8002804 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	@ 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e2ae      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004996:	4b92      	ldr	r3, [pc, #584]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x2a8>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd ff2e 	bl	8002804 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fd ff2a 	bl	8002804 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	@ 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e29a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049be:	4b88      	ldr	r3, [pc, #544]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x2d0>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d060      	beq.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d005      	beq.n	80049ec <HAL_RCC_OscConfig+0x310>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d119      	bne.n	8004a1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d116      	bne.n	8004a1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ec:	4b7c      	ldr	r3, [pc, #496]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x328>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e277      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b76      	ldr	r3, [pc, #472]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	4973      	ldr	r1, [pc, #460]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a18:	e040      	b.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d023      	beq.n	8004a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a22:	4b6f      	ldr	r3, [pc, #444]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a6e      	ldr	r2, [pc, #440]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fd fee9 	bl	8002804 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a36:	f7fd fee5 	bl	8002804 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e255      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a48:	4b65      	ldr	r3, [pc, #404]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a54:	4b62      	ldr	r3, [pc, #392]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	495f      	ldr	r1, [pc, #380]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
 8004a68:	e018      	b.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fd fec5 	bl	8002804 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7e:	f7fd fec1 	bl	8002804 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e231      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a90:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01c      	beq.n	8004aea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fea0 	bl	8002804 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fd fe9c 	bl	8002804 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e20c      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ada:	4b41      	ldr	r3, [pc, #260]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x3ec>
 8004ae8:	e01b      	b.n	8004b22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aea:	4b3d      	ldr	r3, [pc, #244]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af0:	4a3b      	ldr	r2, [pc, #236]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd fe83 	bl	8002804 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fd fe7f 	bl	8002804 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1ef      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b14:	4b32      	ldr	r3, [pc, #200]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ef      	bne.n	8004b02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80a6 	beq.w	8004c7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	4a26      	ldr	r2, [pc, #152]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4c:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5c:	4b21      	ldr	r3, [pc, #132]	@ (8004be4 <HAL_RCC_OscConfig+0x508>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d118      	bne.n	8004b9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_OscConfig+0x508>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_RCC_OscConfig+0x508>)
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b74:	f7fd fe46 	bl	8002804 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fd fe42 	bl	8002804 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1b2      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x508>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4d8>
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb2:	e029      	b.n	8004c08 <HAL_RCC_OscConfig+0x52c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d115      	bne.n	8004be8 <HAL_RCC_OscConfig+0x50c>
 8004bbc:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc2:	4a07      	ldr	r2, [pc, #28]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd2:	4a03      	ldr	r2, [pc, #12]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bdc:	e014      	b.n	8004c08 <HAL_RCC_OscConfig+0x52c>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
 8004be8:	4b9a      	ldr	r3, [pc, #616]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bee:	4a99      	ldr	r2, [pc, #612]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bf8:	4b96      	ldr	r3, [pc, #600]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	4a95      	ldr	r2, [pc, #596]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d016      	beq.n	8004c3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fd fdf8 	bl	8002804 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c18:	f7fd fdf4 	bl	8002804 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e162      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2e:	4b89      	ldr	r3, [pc, #548]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ed      	beq.n	8004c18 <HAL_RCC_OscConfig+0x53c>
 8004c3c:	e015      	b.n	8004c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fde1 	bl	8002804 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fd fddd 	bl	8002804 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e14b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ed      	bne.n	8004c46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c6a:	7ffb      	ldrb	r3, [r7, #31]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c70:	4b78      	ldr	r3, [pc, #480]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	4a77      	ldr	r2, [pc, #476]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d03c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01c      	beq.n	8004cca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c90:	4b70      	ldr	r3, [pc, #448]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c96:	4a6f      	ldr	r2, [pc, #444]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd fdb0 	bl	8002804 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ca8:	f7fd fdac 	bl	8002804 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e11c      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cba:	4b66      	ldr	r3, [pc, #408]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x5cc>
 8004cc8:	e01b      	b.n	8004d02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cca:	4b62      	ldr	r3, [pc, #392]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cd0:	4a60      	ldr	r2, [pc, #384]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd fd93 	bl	8002804 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce2:	f7fd fd8f 	bl	8002804 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0ff      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cf4:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ef      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80f3 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f040 80c9 	bne.w	8004ea8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d12c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	3b01      	subs	r3, #1
 8004d36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d123      	bne.n	8004d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d11b      	bne.n	8004d84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d113      	bne.n	8004d84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d06b      	beq.n	8004e5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d062      	beq.n	8004e50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d8a:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e0ac      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004da6:	f7fd fd2d 	bl	8002804 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fd fd29 	bl	8002804 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e099      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc0:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dcc:	4b21      	ldr	r3, [pc, #132]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	4b21      	ldr	r3, [pc, #132]	@ (8004e58 <HAL_RCC_OscConfig+0x77c>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	0112      	lsls	r2, r2, #4
 8004de0:	4311      	orrs	r1, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004de6:	0212      	lsls	r2, r2, #8
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dee:	0852      	lsrs	r2, r2, #1
 8004df0:	3a01      	subs	r2, #1
 8004df2:	0552      	lsls	r2, r2, #21
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0652      	lsls	r2, r2, #25
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e06:	06d2      	lsls	r2, r2, #27
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	4912      	ldr	r1, [pc, #72]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0f      	ldr	r2, [pc, #60]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a0c      	ldr	r2, [pc, #48]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e28:	f7fd fcec 	bl	8002804 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fd fce8 	bl	8002804 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e058      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e42:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <HAL_RCC_OscConfig+0x778>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4e:	e050      	b.n	8004ef2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e04f      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
 8004e54:	40021000 	.word	0x40021000
 8004e58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5c:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d144      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e68:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a23      	ldr	r2, [pc, #140]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e74:	4b21      	ldr	r3, [pc, #132]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e80:	f7fd fcc0 	bl	8002804 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd fcbc 	bl	8002804 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e02c      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x7ac>
 8004ea6:	e024      	b.n	8004ef2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d01f      	beq.n	8004eee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b13      	ldr	r3, [pc, #76]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fd fca3 	bl	8002804 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7fd fc9f 	bl	8002804 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e00f      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed4:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4905      	ldr	r1, [pc, #20]	@ (8004efc <HAL_RCC_OscConfig+0x820>)
 8004ee6:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <HAL_RCC_OscConfig+0x824>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60cb      	str	r3, [r1, #12]
 8004eec:	e001      	b.n	8004ef2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	feeefffc 	.word	0xfeeefffc

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0e7      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b75      	ldr	r3, [pc, #468]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d910      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b72      	ldr	r3, [pc, #456]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 0207 	bic.w	r2, r3, #7
 8004f2e:	4970      	ldr	r1, [pc, #448]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b6e      	ldr	r3, [pc, #440]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cf      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	4b66      	ldr	r3, [pc, #408]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d908      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f64:	4b63      	ldr	r3, [pc, #396]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4960      	ldr	r1, [pc, #384]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04c      	beq.n	800501c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d121      	bne.n	8004fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0a6      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa2:	4b54      	ldr	r3, [pc, #336]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d115      	bne.n	8004fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e09a      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fba:	4b4e      	ldr	r3, [pc, #312]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e08e      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fca:	4b4a      	ldr	r3, [pc, #296]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e086      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fda:	4b46      	ldr	r3, [pc, #280]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4943      	ldr	r1, [pc, #268]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fec:	f7fd fc0a 	bl	8002804 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fd fc06 	bl	8002804 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e06e      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	4b3a      	ldr	r3, [pc, #232]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 020c 	and.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	429a      	cmp	r2, r3
 800501a:	d1eb      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005034:	429a      	cmp	r2, r3
 8005036:	d208      	bcs.n	800504a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	492b      	ldr	r1, [pc, #172]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d210      	bcs.n	800507a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f023 0207 	bic.w	r2, r3, #7
 8005060:	4923      	ldr	r1, [pc, #140]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_RCC_ClockConfig+0x1ec>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d001      	beq.n	800507a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e036      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005086:	4b1b      	ldr	r3, [pc, #108]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4918      	ldr	r1, [pc, #96]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4910      	ldr	r1, [pc, #64]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050b8:	f000 f824 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	490b      	ldr	r1, [pc, #44]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f4>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1f8>)
 80050d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050d8:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1fc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fb41 	bl	8002764 <HAL_InitTick>
 80050e2:	4603      	mov	r3, r0
 80050e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80050e6:	7afb      	ldrb	r3, [r7, #11]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40022000 	.word	0x40022000
 80050f4:	40021000 	.word	0x40021000
 80050f8:	0800a5bc 	.word	0x0800a5bc
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	20000010 	.word	0x20000010

08005104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	@ 0x24
 8005108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005112:	4b3e      	ldr	r3, [pc, #248]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800511c:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x34>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d121      	bne.n	8005176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d11e      	bne.n	8005176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005138:	4b34      	ldr	r3, [pc, #208]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d107      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005144:	4b31      	ldr	r3, [pc, #196]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 8005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e005      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005154:	4b2d      	ldr	r3, [pc, #180]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005160:	4a2b      	ldr	r2, [pc, #172]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005174:	e00a      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d102      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x110>)
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e004      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d101      	bne.n	800518c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005188:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x114>)
 800518a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d134      	bne.n	80051fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005192:	4b1e      	ldr	r3, [pc, #120]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0xa6>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d003      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0xac>
 80051a8:	e005      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x110>)
 80051ac:	617b      	str	r3, [r7, #20]
      break;
 80051ae:	e005      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b0:	4b19      	ldr	r3, [pc, #100]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x114>)
 80051b2:	617b      	str	r3, [r7, #20]
      break;
 80051b4:	e002      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	617b      	str	r3, [r7, #20]
      break;
 80051ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	3301      	adds	r3, #1
 80051c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	fb03 f202 	mul.w	r2, r3, r2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e2:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <HAL_RCC_GetSysClockFreq+0x108>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	0e5b      	lsrs	r3, r3, #25
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	3301      	adds	r3, #1
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051fc:	69bb      	ldr	r3, [r7, #24]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3724      	adds	r7, #36	@ 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	0800a5d4 	.word	0x0800a5d4
 8005214:	00f42400 	.word	0x00f42400
 8005218:	007a1200 	.word	0x007a1200

0800521c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <HAL_RCC_GetHCLKFreq+0x14>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2000000c 	.word	0x2000000c

08005234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005238:	f7ff fff0 	bl	800521c <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4904      	ldr	r1, [pc, #16]	@ (800525c <HAL_RCC_GetPCLK1Freq+0x28>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	0800a5cc 	.word	0x0800a5cc

08005260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005264:	f7ff ffda 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0adb      	lsrs	r3, r3, #11
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4904      	ldr	r1, [pc, #16]	@ (8005288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	0800a5cc 	.word	0x0800a5cc

0800528c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052a4:	f7ff f9b6 	bl	8004614 <HAL_PWREx_GetVoltageRange>
 80052a8:	6178      	str	r0, [r7, #20]
 80052aa:	e014      	b.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b0:	4a24      	ldr	r2, [pc, #144]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052b8:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052c4:	f7ff f9a6 	bl	8004614 <HAL_PWREx_GetVoltageRange>
 80052c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052dc:	d10b      	bne.n	80052f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b80      	cmp	r3, #128	@ 0x80
 80052e2:	d919      	bls.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80052e8:	d902      	bls.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052ea:	2302      	movs	r3, #2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	e013      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052f0:	2301      	movs	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e010      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b80      	cmp	r3, #128	@ 0x80
 80052fa:	d902      	bls.n	8005302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052fc:	2303      	movs	r3, #3
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	e00a      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b80      	cmp	r3, #128	@ 0x80
 8005306:	d102      	bne.n	800530e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005308:	2302      	movs	r3, #2
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e004      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b70      	cmp	r3, #112	@ 0x70
 8005312:	d101      	bne.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005314:	2301      	movs	r3, #1
 8005316:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f023 0207 	bic.w	r2, r3, #7
 8005320:	4909      	ldr	r1, [pc, #36]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005328:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d001      	beq.n	800533a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	40022000 	.word	0x40022000

0800534c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005354:	2300      	movs	r3, #0
 8005356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005358:	2300      	movs	r3, #0
 800535a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005364:	2b00      	cmp	r3, #0
 8005366:	d031      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005370:	d01a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005376:	d814      	bhi.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800537c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005380:	d10f      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005382:	4b5d      	ldr	r3, [pc, #372]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a5c      	ldr	r2, [pc, #368]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800538e:	e00c      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f9ce 	bl	8005738 <RCCEx_PLLSAI1_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053a0:	e003      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	74fb      	strb	r3, [r7, #19]
      break;
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80053a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b0:	4b51      	ldr	r3, [pc, #324]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	494e      	ldr	r1, [pc, #312]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 809e 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053da:	2300      	movs	r3, #0
 80053dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053de:	4b46      	ldr	r3, [pc, #280]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b40      	ldr	r3, [pc, #256]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	4a3f      	ldr	r2, [pc, #252]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005400:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800540c:	2301      	movs	r3, #1
 800540e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005410:	4b3a      	ldr	r3, [pc, #232]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a39      	ldr	r2, [pc, #228]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541c:	f7fd f9f2 	bl	8002804 <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005422:	e009      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fd f9ee 	bl	8002804 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d902      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	74fb      	strb	r3, [r7, #19]
        break;
 8005436:	e005      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005438:	4b30      	ldr	r3, [pc, #192]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d15a      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800544a:	4b2b      	ldr	r3, [pc, #172]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005454:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	429a      	cmp	r2, r3
 8005464:	d019      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005466:	4b24      	ldr	r3, [pc, #144]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005470:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005472:	4b21      	ldr	r3, [pc, #132]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800547a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005482:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	4a1b      	ldr	r2, [pc, #108]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800548a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005492:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd f9ae 	bl	8002804 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054aa:	e00b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fd f9aa 	bl	8002804 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d902      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	74fb      	strb	r3, [r7, #19]
            break;
 80054c2:	e006      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ec      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d8:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e6:	4904      	ldr	r1, [pc, #16]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054ee:	e009      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	74bb      	strb	r3, [r7, #18]
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005504:	7c7b      	ldrb	r3, [r7, #17]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4b8a      	ldr	r3, [pc, #552]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	4a89      	ldr	r2, [pc, #548]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005522:	4b84      	ldr	r3, [pc, #528]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f023 0203 	bic.w	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4980      	ldr	r1, [pc, #512]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005544:	4b7b      	ldr	r3, [pc, #492]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f023 020c 	bic.w	r2, r3, #12
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	4978      	ldr	r1, [pc, #480]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005566:	4b73      	ldr	r3, [pc, #460]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	496f      	ldr	r1, [pc, #444]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005588:	4b6a      	ldr	r3, [pc, #424]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005596:	4967      	ldr	r1, [pc, #412]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055aa:	4b62      	ldr	r3, [pc, #392]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	495e      	ldr	r1, [pc, #376]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055cc:	4b59      	ldr	r3, [pc, #356]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4956      	ldr	r1, [pc, #344]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ee:	4b51      	ldr	r3, [pc, #324]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	494d      	ldr	r1, [pc, #308]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d028      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005610:	4b48      	ldr	r3, [pc, #288]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	4945      	ldr	r1, [pc, #276]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800562e:	d106      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b40      	ldr	r3, [pc, #256]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a3f      	ldr	r2, [pc, #252]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
 800563c:	e011      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f872 	bl	8005738 <RCCEx_PLLSAI1_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d028      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800566e:	4b31      	ldr	r3, [pc, #196]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567c:	492d      	ldr	r1, [pc, #180]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800568c:	d106      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568e:	4b29      	ldr	r3, [pc, #164]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a28      	ldr	r2, [pc, #160]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005698:	60d3      	str	r3, [r2, #12]
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2101      	movs	r1, #1
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f843 	bl	8005738 <RCCEx_PLLSAI1_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01c      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056cc:	4b19      	ldr	r3, [pc, #100]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056da:	4916      	ldr	r1, [pc, #88]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ea:	d10c      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f820 	bl	8005738 <RCCEx_PLLSAI1_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005712:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005718:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005720:	4904      	ldr	r1, [pc, #16]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005728:	7cbb      	ldrb	r3, [r7, #18]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000

08005738 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005746:	4b74      	ldr	r3, [pc, #464]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005752:	4b71      	ldr	r3, [pc, #452]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0203 	and.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d10d      	bne.n	800577e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
       ||
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800576a:	4b6b      	ldr	r3, [pc, #428]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
       ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d047      	beq.n	800580e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	e044      	b.n	800580e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d018      	beq.n	80057be <RCCEx_PLLSAI1_Config+0x86>
 800578c:	2b03      	cmp	r3, #3
 800578e:	d825      	bhi.n	80057dc <RCCEx_PLLSAI1_Config+0xa4>
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <RCCEx_PLLSAI1_Config+0x62>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d009      	beq.n	80057ac <RCCEx_PLLSAI1_Config+0x74>
 8005798:	e020      	b.n	80057dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800579a:	4b5f      	ldr	r3, [pc, #380]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11d      	bne.n	80057e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057aa:	e01a      	b.n	80057e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d116      	bne.n	80057e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057bc:	e013      	b.n	80057e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057be:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10f      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ca:	4b53      	ldr	r3, [pc, #332]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057da:	e006      	b.n	80057ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e004      	b.n	80057ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057e2:	bf00      	nop
 80057e4:	e002      	b.n	80057ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057f2:	4b49      	ldr	r3, [pc, #292]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	430b      	orrs	r3, r1
 8005808:	4943      	ldr	r1, [pc, #268]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d17c      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005814:	4b40      	ldr	r3, [pc, #256]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a3f      	ldr	r2, [pc, #252]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800581e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005820:	f7fc fff0 	bl	8002804 <HAL_GetTick>
 8005824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005826:	e009      	b.n	800583c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005828:	f7fc ffec 	bl	8002804 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d902      	bls.n	800583c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	73fb      	strb	r3, [r7, #15]
        break;
 800583a:	e005      	b.n	8005848 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800583c:	4b36      	ldr	r3, [pc, #216]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ef      	bne.n	8005828 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d15f      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d110      	bne.n	8005876 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005854:	4b30      	ldr	r3, [pc, #192]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800585c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
 8005864:	0211      	lsls	r1, r2, #8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68d2      	ldr	r2, [r2, #12]
 800586a:	06d2      	lsls	r2, r2, #27
 800586c:	430a      	orrs	r2, r1
 800586e:	492a      	ldr	r1, [pc, #168]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
 8005874:	e027      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d112      	bne.n	80058a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800587c:	4b26      	ldr	r3, [pc, #152]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005884:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	0211      	lsls	r1, r2, #8
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6912      	ldr	r2, [r2, #16]
 8005892:	0852      	lsrs	r2, r2, #1
 8005894:	3a01      	subs	r2, #1
 8005896:	0552      	lsls	r2, r2, #21
 8005898:	430a      	orrs	r2, r1
 800589a:	491f      	ldr	r1, [pc, #124]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	610b      	str	r3, [r1, #16]
 80058a0:	e011      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	0211      	lsls	r1, r2, #8
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6952      	ldr	r2, [r2, #20]
 80058b8:	0852      	lsrs	r2, r2, #1
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0652      	lsls	r2, r2, #25
 80058be:	430a      	orrs	r2, r1
 80058c0:	4915      	ldr	r1, [pc, #84]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058c6:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fc ff97 	bl	8002804 <HAL_GetTick>
 80058d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058d8:	e009      	b.n	80058ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058da:	f7fc ff93 	bl	8002804 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d902      	bls.n	80058ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	73fb      	strb	r3, [r7, #15]
          break;
 80058ec:	e005      	b.n	80058fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	4903      	ldr	r1, [pc, #12]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000

0800591c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e049      	b.n	80059c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc fcf6 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 fcd8 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e03b      	b.n	8005a5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_TIM_Base_Start_IT+0x4e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIM_Base_Start_IT+0x4e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d115      	bne.n	8005a46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <HAL_TIM_Base_Start_IT+0xa4>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d015      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x8c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a32:	d011      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a44:	e008      	b.n	8005a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e000      	b.n	8005a5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	00010007 	.word	0x00010007

08005a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e049      	b.n	8005b1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f841 	bl	8005b22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fc2c 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x24>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e03c      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d109      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x3e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e02f      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d109      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x58>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e022      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d109      	bne.n	8005baa <HAL_TIM_PWM_Start+0x72>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	bf14      	ite	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	2300      	moveq	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e015      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x8c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e008      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07e      	b.n	8005cdc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start+0xb6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start+0xc6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bfc:	e01b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start+0xd6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c0c:	e013      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Start+0xe6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Start+0xf6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c2c:	e003      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 feee 	bl	8006a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <HAL_TIM_PWM_Start+0x1ac>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x12a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <HAL_TIM_PWM_Start+0x1b0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x12a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	@ (8005cec <HAL_TIM_PWM_Start+0x1b4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x12e>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_TIM_PWM_Start+0x130>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a18      	ldr	r2, [pc, #96]	@ (8005ce4 <HAL_TIM_PWM_Start+0x1ac>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x162>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8e:	d004      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x162>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a14      	ldr	r2, [pc, #80]	@ (8005ce8 <HAL_TIM_PWM_Start+0x1b0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d115      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <HAL_TIM_PWM_Start+0x1b8>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d015      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x1a0>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb2:	d011      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc4:	e008      	b.n	8005cd8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e000      	b.n	8005cda <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	00010007 	.word	0x00010007

08005cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d020      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0202 	mvn.w	r2, #2
 8005d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fac7 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fab9 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 faca 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d020      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0204 	mvn.w	r2, #4
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 faa1 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa93 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 faa4 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d020      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0208 	mvn.w	r2, #8
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa7b 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa6d 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa7e 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d020      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0210 	mvn.w	r2, #16
 8005e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2208      	movs	r2, #8
 8005e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa55 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa47 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fa58 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0201 	mvn.w	r2, #1
 8005e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fd5c 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fed7 	bl	8006c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fecf 	bl	8006c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa12 	bl	80062fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0220 	mvn.w	r2, #32
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fe97 	bl	8006c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0ff      	b.n	8006122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b14      	cmp	r3, #20
 8005f2e:	f200 80f0 	bhi.w	8006112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f32:	a201      	add	r2, pc, #4	@ (adr r2, 8005f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08006113 	.word	0x08006113
 8005f40:	08006113 	.word	0x08006113
 8005f44:	08006113 	.word	0x08006113
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08006113 	.word	0x08006113
 8005f50:	08006113 	.word	0x08006113
 8005f54:	08006113 	.word	0x08006113
 8005f58:	0800600f 	.word	0x0800600f
 8005f5c:	08006113 	.word	0x08006113
 8005f60:	08006113 	.word	0x08006113
 8005f64:	08006113 	.word	0x08006113
 8005f68:	0800604f 	.word	0x0800604f
 8005f6c:	08006113 	.word	0x08006113
 8005f70:	08006113 	.word	0x08006113
 8005f74:	08006113 	.word	0x08006113
 8005f78:	08006091 	.word	0x08006091
 8005f7c:	08006113 	.word	0x08006113
 8005f80:	08006113 	.word	0x08006113
 8005f84:	08006113 	.word	0x08006113
 8005f88:	080060d1 	.word	0x080060d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fa2c 	bl	80063f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6999      	ldr	r1, [r3, #24]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	619a      	str	r2, [r3, #24]
      break;
 8005fca:	e0a5      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fa88 	bl	80064e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6999      	ldr	r1, [r3, #24]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	021a      	lsls	r2, r3, #8
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	619a      	str	r2, [r3, #24]
      break;
 800600c:	e084      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fae1 	bl	80065dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0208 	orr.w	r2, r2, #8
 8006028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0204 	bic.w	r2, r2, #4
 8006038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
      break;
 800604c:	e064      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fb39 	bl	80066cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
      break;
 800608e:	e043      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fb76 	bl	8006788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0208 	orr.w	r2, r2, #8
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0204 	bic.w	r2, r2, #4
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060ce:	e023      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fbae 	bl	8006838 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006110:	e002      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIM_ConfigClockSource+0x1c>
 8006144:	2302      	movs	r3, #2
 8006146:	e0b6      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x18a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800616a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006184:	d03e      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0xd8>
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618a:	f200 8087 	bhi.w	800629c <HAL_TIM_ConfigClockSource+0x170>
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006192:	f000 8086 	beq.w	80062a2 <HAL_TIM_ConfigClockSource+0x176>
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	d87f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 800619c:	2b70      	cmp	r3, #112	@ 0x70
 800619e:	d01a      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0xaa>
 80061a0:	2b70      	cmp	r3, #112	@ 0x70
 80061a2:	d87b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061a4:	2b60      	cmp	r3, #96	@ 0x60
 80061a6:	d050      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x11e>
 80061a8:	2b60      	cmp	r3, #96	@ 0x60
 80061aa:	d877      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061ac:	2b50      	cmp	r3, #80	@ 0x50
 80061ae:	d03c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0xfe>
 80061b0:	2b50      	cmp	r3, #80	@ 0x50
 80061b2:	d873      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061b4:	2b40      	cmp	r3, #64	@ 0x40
 80061b6:	d058      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x13e>
 80061b8:	2b40      	cmp	r3, #64	@ 0x40
 80061ba:	d86f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061bc:	2b30      	cmp	r3, #48	@ 0x30
 80061be:	d064      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15e>
 80061c0:	2b30      	cmp	r3, #48	@ 0x30
 80061c2:	d86b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d060      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15e>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d867      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x170>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15e>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d05a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15e>
 80061d4:	e062      	b.n	800629c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e6:	f000 fbfb 	bl	80069e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
      break;
 8006202:	e04f      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006214:	f000 fbe4 	bl	80069e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006226:	609a      	str	r2, [r3, #8]
      break;
 8006228:	e03c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	461a      	mov	r2, r3
 8006238:	f000 fb58 	bl	80068ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2150      	movs	r1, #80	@ 0x50
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fbb1 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 8006248:	e02c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fb77 	bl	800694a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2160      	movs	r1, #96	@ 0x60
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fba1 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 8006268:	e01c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006276:	461a      	mov	r2, r3
 8006278:	f000 fb38 	bl	80068ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2140      	movs	r1, #64	@ 0x40
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fb91 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 8006288:	e00c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f000 fb88 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 800629a:	e003      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e000      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a30      	ldr	r2, [pc, #192]	@ (80063e4 <TIM_Base_SetConfig+0xd4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0x20>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632e:	d108      	bne.n	8006342 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a27      	ldr	r2, [pc, #156]	@ (80063e4 <TIM_Base_SetConfig+0xd4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00b      	beq.n	8006362 <TIM_Base_SetConfig+0x52>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006350:	d007      	beq.n	8006362 <TIM_Base_SetConfig+0x52>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a24      	ldr	r2, [pc, #144]	@ (80063e8 <TIM_Base_SetConfig+0xd8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_Base_SetConfig+0x52>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a23      	ldr	r2, [pc, #140]	@ (80063ec <TIM_Base_SetConfig+0xdc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d108      	bne.n	8006374 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a12      	ldr	r2, [pc, #72]	@ (80063e4 <TIM_Base_SetConfig+0xd4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0xa0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a11      	ldr	r2, [pc, #68]	@ (80063e8 <TIM_Base_SetConfig+0xd8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0xa0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a10      	ldr	r2, [pc, #64]	@ (80063ec <TIM_Base_SetConfig+0xdc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d103      	bne.n	80063b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	611a      	str	r2, [r3, #16]
  }
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400

080063f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f023 0201 	bic.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800641e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f023 0302 	bic.w	r3, r3, #2
 800643c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a24      	ldr	r2, [pc, #144]	@ (80064dc <TIM_OC1_SetConfig+0xec>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d007      	beq.n	8006460 <TIM_OC1_SetConfig+0x70>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a23      	ldr	r2, [pc, #140]	@ (80064e0 <TIM_OC1_SetConfig+0xf0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC1_SetConfig+0x70>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <TIM_OC1_SetConfig+0xf4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10c      	bne.n	800647a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0308 	bic.w	r3, r3, #8
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a17      	ldr	r2, [pc, #92]	@ (80064dc <TIM_OC1_SetConfig+0xec>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_OC1_SetConfig+0xa2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a16      	ldr	r2, [pc, #88]	@ (80064e0 <TIM_OC1_SetConfig+0xf0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC1_SetConfig+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <TIM_OC1_SetConfig+0xf4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d111      	bne.n	80064b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400

080064e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f023 0210 	bic.w	r2, r3, #16
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0320 	bic.w	r3, r3, #32
 8006536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a22      	ldr	r2, [pc, #136]	@ (80065d0 <TIM_OC2_SetConfig+0xe8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d10d      	bne.n	8006568 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a19      	ldr	r2, [pc, #100]	@ (80065d0 <TIM_OC2_SetConfig+0xe8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <TIM_OC2_SetConfig+0x98>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a18      	ldr	r2, [pc, #96]	@ (80065d4 <TIM_OC2_SetConfig+0xec>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_OC2_SetConfig+0x98>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a17      	ldr	r2, [pc, #92]	@ (80065d8 <TIM_OC2_SetConfig+0xf0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d113      	bne.n	80065a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800658e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400

080065dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a21      	ldr	r2, [pc, #132]	@ (80066c0 <TIM_OC3_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d10d      	bne.n	800665a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <TIM_OC3_SetConfig+0xe4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0x96>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a17      	ldr	r2, [pc, #92]	@ (80066c4 <TIM_OC3_SetConfig+0xe8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0x96>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a16      	ldr	r2, [pc, #88]	@ (80066c8 <TIM_OC3_SetConfig+0xec>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014400 	.word	0x40014400

080066cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800671a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a14      	ldr	r2, [pc, #80]	@ (800677c <TIM_OC4_SetConfig+0xb0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_OC4_SetConfig+0x74>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <TIM_OC4_SetConfig+0xb4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC4_SetConfig+0x74>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a12      	ldr	r2, [pc, #72]	@ (8006784 <TIM_OC4_SetConfig+0xb8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d109      	bne.n	8006754 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400

08006788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a13      	ldr	r2, [pc, #76]	@ (800682c <TIM_OC5_SetConfig+0xa4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC5_SetConfig+0x6a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <TIM_OC5_SetConfig+0xa8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC5_SetConfig+0x6a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <TIM_OC5_SetConfig+0xac>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d109      	bne.n	8006806 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400

08006838 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800687e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	051b      	lsls	r3, r3, #20
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a14      	ldr	r2, [pc, #80]	@ (80068e0 <TIM_OC6_SetConfig+0xa8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_OC6_SetConfig+0x6c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a13      	ldr	r2, [pc, #76]	@ (80068e4 <TIM_OC6_SetConfig+0xac>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC6_SetConfig+0x6c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <TIM_OC6_SetConfig+0xb0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d109      	bne.n	80068b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40012c00 	.word	0x40012c00
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400

080068ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 030a 	bic.w	r3, r3, #10
 8006928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694a:	b480      	push	{r7}
 800694c:	b087      	sub	sp, #28
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 0210 	bic.w	r2, r3, #16
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f043 0307 	orr.w	r3, r3, #7
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2201      	movs	r2, #1
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e04f      	b.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a21      	ldr	r2, [pc, #132]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a14      	ldr	r2, [pc, #80]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aec:	d004      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a10      	ldr	r2, [pc, #64]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10c      	bne.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40012c00 	.word	0x40012c00
 8006b34:	40014000 	.word	0x40014000

08006b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e060      	b.n	8006c16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a14      	ldr	r2, [pc, #80]	@ (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d115      	bne.n	8006c04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	051b      	lsls	r3, r3, #20
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40012c00 	.word	0x40012c00

08006c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e040      	b.n	8006cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb fafc 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2224      	movs	r2, #36	@ 0x24
 8006c90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fade 	bl	800726c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8af 	bl	8006e14 <UART_SetConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e01b      	b.n	8006cf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb5d 	bl	80073b0 <UART_CheckIdleState>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	@ 0x28
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d177      	bne.n	8006e08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Transmit+0x24>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e070      	b.n	8006e0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2221      	movs	r2, #33	@ 0x21
 8006d34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d36:	f7fb fd65 	bl	8002804 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d54:	d108      	bne.n	8006d68 <HAL_UART_Transmit+0x68>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e003      	b.n	8006d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d70:	e02f      	b.n	8006dd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2180      	movs	r1, #128	@ 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fbbf 	bl	8007500 <UART_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e03b      	b.n	8006e0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	881a      	ldrh	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	b292      	uxth	r2, r2
 8006da6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	3302      	adds	r3, #2
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e007      	b.n	8006dc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1c9      	bne.n	8006d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2140      	movs	r1, #64	@ 0x40
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fb89 	bl	8007500 <UART_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e005      	b.n	8006e0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e18:	b08a      	sub	sp, #40	@ 0x28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4bb4      	ldr	r3, [pc, #720]	@ (8007114 <UART_SetConfig+0x300>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4aa9      	ldr	r2, [pc, #676]	@ (8007118 <UART_SetConfig+0x304>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d004      	beq.n	8006e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4aa0      	ldr	r2, [pc, #640]	@ (800711c <UART_SetConfig+0x308>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d126      	bne.n	8006eec <UART_SetConfig+0xd8>
 8006e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8007120 <UART_SetConfig+0x30c>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea4:	f003 0303 	and.w	r3, r3, #3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d81b      	bhi.n	8006ee4 <UART_SetConfig+0xd0>
 8006eac:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <UART_SetConfig+0xa0>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ed5 	.word	0x08006ed5
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eca:	e080      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed2:	e07c      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e078      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006edc:	2308      	movs	r3, #8
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e074      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e070      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a8c      	ldr	r2, [pc, #560]	@ (8007124 <UART_SetConfig+0x310>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d138      	bne.n	8006f68 <UART_SetConfig+0x154>
 8006ef6:	4b8a      	ldr	r3, [pc, #552]	@ (8007120 <UART_SetConfig+0x30c>)
 8006ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efc:	f003 030c 	and.w	r3, r3, #12
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d82d      	bhi.n	8006f60 <UART_SetConfig+0x14c>
 8006f04:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0xf8>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f41 	.word	0x08006f41
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f61 	.word	0x08006f61
 8006f18:	08006f61 	.word	0x08006f61
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f61 	.word	0x08006f61
 8006f24:	08006f61 	.word	0x08006f61
 8006f28:	08006f61 	.word	0x08006f61
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	08006f61 	.word	0x08006f61
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f61 	.word	0x08006f61
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f46:	e042      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4e:	e03e      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e03a      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e036      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e032      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8007118 <UART_SetConfig+0x304>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d12a      	bne.n	8006fc8 <UART_SetConfig+0x1b4>
 8006f72:	4b6b      	ldr	r3, [pc, #428]	@ (8007120 <UART_SetConfig+0x30c>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f80:	d01a      	beq.n	8006fb8 <UART_SetConfig+0x1a4>
 8006f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f86:	d81b      	bhi.n	8006fc0 <UART_SetConfig+0x1ac>
 8006f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f8c:	d00c      	beq.n	8006fa8 <UART_SetConfig+0x194>
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f92:	d815      	bhi.n	8006fc0 <UART_SetConfig+0x1ac>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <UART_SetConfig+0x18c>
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d008      	beq.n	8006fb0 <UART_SetConfig+0x19c>
 8006f9e:	e00f      	b.n	8006fc0 <UART_SetConfig+0x1ac>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa6:	e012      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e00e      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e00a      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	e006      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc6:	e002      	b.n	8006fce <UART_SetConfig+0x1ba>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a51      	ldr	r2, [pc, #324]	@ (8007118 <UART_SetConfig+0x304>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d17a      	bne.n	80070ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d824      	bhi.n	800702a <UART_SetConfig+0x216>
 8006fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <UART_SetConfig+0x1d4>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	0800702b 	.word	0x0800702b
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	0800702b 	.word	0x0800702b
 8006ff8:	0800701b 	.word	0x0800701b
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	0800702b 	.word	0x0800702b
 8007004:	0800702b 	.word	0x0800702b
 8007008:	08007023 	.word	0x08007023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700c:	f7fe f912 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 8007010:	61f8      	str	r0, [r7, #28]
        break;
 8007012:	e010      	b.n	8007036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007014:	4b44      	ldr	r3, [pc, #272]	@ (8007128 <UART_SetConfig+0x314>)
 8007016:	61fb      	str	r3, [r7, #28]
        break;
 8007018:	e00d      	b.n	8007036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701a:	f7fe f873 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 800701e:	61f8      	str	r0, [r7, #28]
        break;
 8007020:	e009      	b.n	8007036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007026:	61fb      	str	r3, [r7, #28]
        break;
 8007028:	e005      	b.n	8007036 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8107 	beq.w	800724c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	4413      	add	r3, r2
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	429a      	cmp	r2, r3
 800704c:	d305      	bcc.n	800705a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	429a      	cmp	r2, r3
 8007058:	d903      	bls.n	8007062 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007060:	e0f4      	b.n	800724c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2200      	movs	r2, #0
 8007066:	461c      	mov	r4, r3
 8007068:	4615      	mov	r5, r2
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	022b      	lsls	r3, r5, #8
 8007074:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007078:	0222      	lsls	r2, r4, #8
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	6849      	ldr	r1, [r1, #4]
 800707e:	0849      	lsrs	r1, r1, #1
 8007080:	2000      	movs	r0, #0
 8007082:	4688      	mov	r8, r1
 8007084:	4681      	mov	r9, r0
 8007086:	eb12 0a08 	adds.w	sl, r2, r8
 800708a:	eb43 0b09 	adc.w	fp, r3, r9
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709c:	4650      	mov	r0, sl
 800709e:	4659      	mov	r1, fp
 80070a0:	f7f9 fd82 	bl	8000ba8 <__aeabi_uldivmod>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4613      	mov	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b2:	d308      	bcc.n	80070c6 <UART_SetConfig+0x2b2>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ba:	d204      	bcs.n	80070c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	60da      	str	r2, [r3, #12]
 80070c4:	e0c2      	b.n	800724c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070cc:	e0be      	b.n	800724c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070d6:	d16a      	bne.n	80071ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80070d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d834      	bhi.n	800714a <UART_SetConfig+0x336>
 80070e0:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <UART_SetConfig+0x2d4>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	0800710d 	.word	0x0800710d
 80070ec:	0800712d 	.word	0x0800712d
 80070f0:	08007135 	.word	0x08007135
 80070f4:	0800714b 	.word	0x0800714b
 80070f8:	0800713b 	.word	0x0800713b
 80070fc:	0800714b 	.word	0x0800714b
 8007100:	0800714b 	.word	0x0800714b
 8007104:	0800714b 	.word	0x0800714b
 8007108:	08007143 	.word	0x08007143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800710c:	f7fe f892 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 8007110:	61f8      	str	r0, [r7, #28]
        break;
 8007112:	e020      	b.n	8007156 <UART_SetConfig+0x342>
 8007114:	efff69f3 	.word	0xefff69f3
 8007118:	40008000 	.word	0x40008000
 800711c:	40013800 	.word	0x40013800
 8007120:	40021000 	.word	0x40021000
 8007124:	40004400 	.word	0x40004400
 8007128:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800712c:	f7fe f898 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 8007130:	61f8      	str	r0, [r7, #28]
        break;
 8007132:	e010      	b.n	8007156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007134:	4b4c      	ldr	r3, [pc, #304]	@ (8007268 <UART_SetConfig+0x454>)
 8007136:	61fb      	str	r3, [r7, #28]
        break;
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713a:	f7fd ffe3 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 800713e:	61f8      	str	r0, [r7, #28]
        break;
 8007140:	e009      	b.n	8007156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007146:	61fb      	str	r3, [r7, #28]
        break;
 8007148:	e005      	b.n	8007156 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d077      	beq.n	800724c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	005a      	lsls	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	441a      	add	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d916      	bls.n	80071a6 <UART_SetConfig+0x392>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800717e:	d212      	bcs.n	80071a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f023 030f 	bic.w	r3, r3, #15
 8007188:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	b29a      	uxth	r2, r3
 8007196:	8afb      	ldrh	r3, [r7, #22]
 8007198:	4313      	orrs	r3, r2
 800719a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	8afa      	ldrh	r2, [r7, #22]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e052      	b.n	800724c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071ac:	e04e      	b.n	800724c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d827      	bhi.n	8007206 <UART_SetConfig+0x3f2>
 80071b6:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x3a8>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	08007207 	.word	0x08007207
 80071cc:	080071f7 	.word	0x080071f7
 80071d0:	08007207 	.word	0x08007207
 80071d4:	08007207 	.word	0x08007207
 80071d8:	08007207 	.word	0x08007207
 80071dc:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e0:	f7fe f828 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 80071e4:	61f8      	str	r0, [r7, #28]
        break;
 80071e6:	e014      	b.n	8007212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fe f83a 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 80071ec:	61f8      	str	r0, [r7, #28]
        break;
 80071ee:	e010      	b.n	8007212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007268 <UART_SetConfig+0x454>)
 80071f2:	61fb      	str	r3, [r7, #28]
        break;
 80071f4:	e00d      	b.n	8007212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fd ff85 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80071fa:	61f8      	str	r0, [r7, #28]
        break;
 80071fc:	e009      	b.n	8007212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007202:	61fb      	str	r3, [r7, #28]
        break;
 8007204:	e005      	b.n	8007212 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007210:	bf00      	nop
    }

    if (pclk != 0U)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d019      	beq.n	800724c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	085a      	lsrs	r2, r3, #1
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d909      	bls.n	8007246 <UART_SetConfig+0x432>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007238:	d205      	bcs.n	8007246 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	b29a      	uxth	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60da      	str	r2, [r3, #12]
 8007244:	e002      	b.n	800724c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007258:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800725c:	4618      	mov	r0, r3
 800725e:	3728      	adds	r7, #40	@ 0x28
 8007260:	46bd      	mov	sp, r7
 8007262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007266:	bf00      	nop
 8007268:	00f42400 	.word	0x00f42400

0800726c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01a      	beq.n	8007382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736a:	d10a      	bne.n	8007382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
  }
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b098      	sub	sp, #96	@ 0x60
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073c0:	f7fb fa20 	bl	8002804 <HAL_GetTick>
 80073c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d12e      	bne.n	8007432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073dc:	2200      	movs	r2, #0
 80073de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f88c 	bl	8007500 <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d021      	beq.n	8007432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007402:	653b      	str	r3, [r7, #80]	@ 0x50
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740c:	647b      	str	r3, [r7, #68]	@ 0x44
 800740e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e062      	b.n	80074f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b04      	cmp	r3, #4
 800743e:	d149      	bne.n	80074d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f856 	bl	8007500 <UART_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d03c      	beq.n	80074d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	623b      	str	r3, [r7, #32]
   return(result);
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800746e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30
 800747a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800747e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60fb      	str	r3, [r7, #12]
   return(result);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ac:	61fa      	str	r2, [r7, #28]
 80074ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69b9      	ldr	r1, [r7, #24]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e011      	b.n	80074f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3758      	adds	r7, #88	@ 0x58
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007510:	e04f      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d04b      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fb f973 	bl	8002804 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <UART_WaitOnFlagUntilTimeout+0x30>
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e04e      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d037      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b80      	cmp	r3, #128	@ 0x80
 8007546:	d034      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b40      	cmp	r3, #64	@ 0x40
 800754c:	d031      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b08      	cmp	r3, #8
 800755a:	d110      	bne.n	800757e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2208      	movs	r2, #8
 8007562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f838 	bl	80075da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2208      	movs	r2, #8
 800756e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e029      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758c:	d111      	bne.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f81e 	bl	80075da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e00f      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	429a      	cmp	r2, r3
 80075c0:	bf0c      	ite	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	2300      	movne	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d0a0      	beq.n	8007512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075da:	b480      	push	{r7}
 80075dc:	b095      	sub	sp, #84	@ 0x54
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007600:	643b      	str	r3, [r7, #64]	@ 0x40
 8007602:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e6      	bne.n	80075e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	61fb      	str	r3, [r7, #28]
   return(result);
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800763a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e5      	bne.n	8007614 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	2b01      	cmp	r3, #1
 800764e:	d118      	bne.n	8007682 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	60bb      	str	r3, [r7, #8]
   return(result);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	647b      	str	r3, [r7, #68]	@ 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e6      	bne.n	8007650 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007696:	bf00      	nop
 8007698:	3754      	adds	r7, #84	@ 0x54
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <__cvt>:
 80076a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a6:	ec57 6b10 	vmov	r6, r7, d0
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	460c      	mov	r4, r1
 80076ae:	4619      	mov	r1, r3
 80076b0:	463b      	mov	r3, r7
 80076b2:	bfbb      	ittet	lt
 80076b4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076b8:	461f      	movlt	r7, r3
 80076ba:	2300      	movge	r3, #0
 80076bc:	232d      	movlt	r3, #45	@ 0x2d
 80076be:	700b      	strb	r3, [r1, #0]
 80076c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076c6:	4691      	mov	r9, r2
 80076c8:	f023 0820 	bic.w	r8, r3, #32
 80076cc:	bfbc      	itt	lt
 80076ce:	4632      	movlt	r2, r6
 80076d0:	4616      	movlt	r6, r2
 80076d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076d6:	d005      	beq.n	80076e4 <__cvt+0x42>
 80076d8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076dc:	d100      	bne.n	80076e0 <__cvt+0x3e>
 80076de:	3401      	adds	r4, #1
 80076e0:	2102      	movs	r1, #2
 80076e2:	e000      	b.n	80076e6 <__cvt+0x44>
 80076e4:	2103      	movs	r1, #3
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	ab02      	add	r3, sp, #8
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	ec47 6b10 	vmov	d0, r6, r7
 80076f2:	4653      	mov	r3, sl
 80076f4:	4622      	mov	r2, r4
 80076f6:	f000 ff3b 	bl	8008570 <_dtoa_r>
 80076fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076fe:	4605      	mov	r5, r0
 8007700:	d119      	bne.n	8007736 <__cvt+0x94>
 8007702:	f019 0f01 	tst.w	r9, #1
 8007706:	d00e      	beq.n	8007726 <__cvt+0x84>
 8007708:	eb00 0904 	add.w	r9, r0, r4
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007718:	b108      	cbz	r0, 800771e <__cvt+0x7c>
 800771a:	f8cd 900c 	str.w	r9, [sp, #12]
 800771e:	2230      	movs	r2, #48	@ 0x30
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	454b      	cmp	r3, r9
 8007724:	d31e      	bcc.n	8007764 <__cvt+0xc2>
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800772a:	1b5b      	subs	r3, r3, r5
 800772c:	4628      	mov	r0, r5
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	b004      	add	sp, #16
 8007732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007736:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800773a:	eb00 0904 	add.w	r9, r0, r4
 800773e:	d1e5      	bne.n	800770c <__cvt+0x6a>
 8007740:	7803      	ldrb	r3, [r0, #0]
 8007742:	2b30      	cmp	r3, #48	@ 0x30
 8007744:	d10a      	bne.n	800775c <__cvt+0xba>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f9 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007752:	b918      	cbnz	r0, 800775c <__cvt+0xba>
 8007754:	f1c4 0401 	rsb	r4, r4, #1
 8007758:	f8ca 4000 	str.w	r4, [sl]
 800775c:	f8da 3000 	ldr.w	r3, [sl]
 8007760:	4499      	add	r9, r3
 8007762:	e7d3      	b.n	800770c <__cvt+0x6a>
 8007764:	1c59      	adds	r1, r3, #1
 8007766:	9103      	str	r1, [sp, #12]
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e7d9      	b.n	8007720 <__cvt+0x7e>

0800776c <__exponent>:
 800776c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776e:	2900      	cmp	r1, #0
 8007770:	bfba      	itte	lt
 8007772:	4249      	neglt	r1, r1
 8007774:	232d      	movlt	r3, #45	@ 0x2d
 8007776:	232b      	movge	r3, #43	@ 0x2b
 8007778:	2909      	cmp	r1, #9
 800777a:	7002      	strb	r2, [r0, #0]
 800777c:	7043      	strb	r3, [r0, #1]
 800777e:	dd29      	ble.n	80077d4 <__exponent+0x68>
 8007780:	f10d 0307 	add.w	r3, sp, #7
 8007784:	461d      	mov	r5, r3
 8007786:	270a      	movs	r7, #10
 8007788:	461a      	mov	r2, r3
 800778a:	fbb1 f6f7 	udiv	r6, r1, r7
 800778e:	fb07 1416 	mls	r4, r7, r6, r1
 8007792:	3430      	adds	r4, #48	@ 0x30
 8007794:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007798:	460c      	mov	r4, r1
 800779a:	2c63      	cmp	r4, #99	@ 0x63
 800779c:	f103 33ff 	add.w	r3, r3, #4294967295
 80077a0:	4631      	mov	r1, r6
 80077a2:	dcf1      	bgt.n	8007788 <__exponent+0x1c>
 80077a4:	3130      	adds	r1, #48	@ 0x30
 80077a6:	1e94      	subs	r4, r2, #2
 80077a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077ac:	1c41      	adds	r1, r0, #1
 80077ae:	4623      	mov	r3, r4
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	d30a      	bcc.n	80077ca <__exponent+0x5e>
 80077b4:	f10d 0309 	add.w	r3, sp, #9
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	42ac      	cmp	r4, r5
 80077bc:	bf88      	it	hi
 80077be:	2300      	movhi	r3, #0
 80077c0:	3302      	adds	r3, #2
 80077c2:	4403      	add	r3, r0
 80077c4:	1a18      	subs	r0, r3, r0
 80077c6:	b003      	add	sp, #12
 80077c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077d2:	e7ed      	b.n	80077b0 <__exponent+0x44>
 80077d4:	2330      	movs	r3, #48	@ 0x30
 80077d6:	3130      	adds	r1, #48	@ 0x30
 80077d8:	7083      	strb	r3, [r0, #2]
 80077da:	70c1      	strb	r1, [r0, #3]
 80077dc:	1d03      	adds	r3, r0, #4
 80077de:	e7f1      	b.n	80077c4 <__exponent+0x58>

080077e0 <_printf_float>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	b08d      	sub	sp, #52	@ 0x34
 80077e6:	460c      	mov	r4, r1
 80077e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077ec:	4616      	mov	r6, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	4605      	mov	r5, r0
 80077f2:	f000 fdbd 	bl	8008370 <_localeconv_r>
 80077f6:	6803      	ldr	r3, [r0, #0]
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7f8 fd38 	bl	8000270 <strlen>
 8007800:	2300      	movs	r3, #0
 8007802:	930a      	str	r3, [sp, #40]	@ 0x28
 8007804:	f8d8 3000 	ldr.w	r3, [r8]
 8007808:	9005      	str	r0, [sp, #20]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	f103 0208 	add.w	r2, r3, #8
 8007814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007818:	f8d4 b000 	ldr.w	fp, [r4]
 800781c:	f8c8 2000 	str.w	r2, [r8]
 8007820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	f8cd 8018 	str.w	r8, [sp, #24]
 800782e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007836:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa8 <_printf_float+0x2c8>)
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	f7f9 f976 	bl	8000b2c <__aeabi_dcmpun>
 8007840:	bb70      	cbnz	r0, 80078a0 <_printf_float+0xc0>
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	4b98      	ldr	r3, [pc, #608]	@ (8007aa8 <_printf_float+0x2c8>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	f7f9 f950 	bl	8000af0 <__aeabi_dcmple>
 8007850:	bb30      	cbnz	r0, 80078a0 <_printf_float+0xc0>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f9 f93f 	bl	8000adc <__aeabi_dcmplt>
 800785e:	b110      	cbz	r0, 8007866 <_printf_float+0x86>
 8007860:	232d      	movs	r3, #45	@ 0x2d
 8007862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007866:	4a91      	ldr	r2, [pc, #580]	@ (8007aac <_printf_float+0x2cc>)
 8007868:	4b91      	ldr	r3, [pc, #580]	@ (8007ab0 <_printf_float+0x2d0>)
 800786a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800786e:	bf8c      	ite	hi
 8007870:	4690      	movhi	r8, r2
 8007872:	4698      	movls	r8, r3
 8007874:	2303      	movs	r3, #3
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	f02b 0304 	bic.w	r3, fp, #4
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	9700      	str	r7, [sp, #0]
 8007884:	4633      	mov	r3, r6
 8007886:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9d2 	bl	8007c34 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	f040 808d 	bne.w	80079b0 <_printf_float+0x1d0>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	b00d      	add	sp, #52	@ 0x34
 800789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	f7f9 f940 	bl	8000b2c <__aeabi_dcmpun>
 80078ac:	b140      	cbz	r0, 80078c0 <_printf_float+0xe0>
 80078ae:	464b      	mov	r3, r9
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bfbc      	itt	lt
 80078b4:	232d      	movlt	r3, #45	@ 0x2d
 80078b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078ba:	4a7e      	ldr	r2, [pc, #504]	@ (8007ab4 <_printf_float+0x2d4>)
 80078bc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ab8 <_printf_float+0x2d8>)
 80078be:	e7d4      	b.n	800786a <_printf_float+0x8a>
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078c6:	9206      	str	r2, [sp, #24]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	d13b      	bne.n	8007944 <_printf_float+0x164>
 80078cc:	2306      	movs	r3, #6
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078d4:	2300      	movs	r3, #0
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	9303      	str	r3, [sp, #12]
 80078da:	ab0a      	add	r3, sp, #40	@ 0x28
 80078dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078e0:	ab09      	add	r3, sp, #36	@ 0x24
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	ec49 8b10 	vmov	d0, r8, r9
 80078ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7ff fed7 	bl	80076a2 <__cvt>
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f8:	2b47      	cmp	r3, #71	@ 0x47
 80078fa:	4680      	mov	r8, r0
 80078fc:	d129      	bne.n	8007952 <_printf_float+0x172>
 80078fe:	1cc8      	adds	r0, r1, #3
 8007900:	db02      	blt.n	8007908 <_printf_float+0x128>
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	4299      	cmp	r1, r3
 8007906:	dd41      	ble.n	800798c <_printf_float+0x1ac>
 8007908:	f1aa 0a02 	sub.w	sl, sl, #2
 800790c:	fa5f fa8a 	uxtb.w	sl, sl
 8007910:	3901      	subs	r1, #1
 8007912:	4652      	mov	r2, sl
 8007914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007918:	9109      	str	r1, [sp, #36]	@ 0x24
 800791a:	f7ff ff27 	bl	800776c <__exponent>
 800791e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007920:	1813      	adds	r3, r2, r0
 8007922:	2a01      	cmp	r2, #1
 8007924:	4681      	mov	r9, r0
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	dc02      	bgt.n	8007930 <_printf_float+0x150>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	07d2      	lsls	r2, r2, #31
 800792e:	d501      	bpl.n	8007934 <_printf_float+0x154>
 8007930:	3301      	adds	r3, #1
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0a2      	beq.n	8007882 <_printf_float+0xa2>
 800793c:	232d      	movs	r3, #45	@ 0x2d
 800793e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007942:	e79e      	b.n	8007882 <_printf_float+0xa2>
 8007944:	9a06      	ldr	r2, [sp, #24]
 8007946:	2a47      	cmp	r2, #71	@ 0x47
 8007948:	d1c2      	bne.n	80078d0 <_printf_float+0xf0>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1c0      	bne.n	80078d0 <_printf_float+0xf0>
 800794e:	2301      	movs	r3, #1
 8007950:	e7bd      	b.n	80078ce <_printf_float+0xee>
 8007952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007956:	d9db      	bls.n	8007910 <_printf_float+0x130>
 8007958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800795c:	d118      	bne.n	8007990 <_printf_float+0x1b0>
 800795e:	2900      	cmp	r1, #0
 8007960:	6863      	ldr	r3, [r4, #4]
 8007962:	dd0b      	ble.n	800797c <_printf_float+0x19c>
 8007964:	6121      	str	r1, [r4, #16]
 8007966:	b913      	cbnz	r3, 800796e <_printf_float+0x18e>
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	07d0      	lsls	r0, r2, #31
 800796c:	d502      	bpl.n	8007974 <_printf_float+0x194>
 800796e:	3301      	adds	r3, #1
 8007970:	440b      	add	r3, r1
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	e7db      	b.n	8007934 <_printf_float+0x154>
 800797c:	b913      	cbnz	r3, 8007984 <_printf_float+0x1a4>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	07d2      	lsls	r2, r2, #31
 8007982:	d501      	bpl.n	8007988 <_printf_float+0x1a8>
 8007984:	3302      	adds	r3, #2
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x192>
 8007988:	2301      	movs	r3, #1
 800798a:	e7f2      	b.n	8007972 <_printf_float+0x192>
 800798c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007992:	4299      	cmp	r1, r3
 8007994:	db05      	blt.n	80079a2 <_printf_float+0x1c2>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	6121      	str	r1, [r4, #16]
 800799a:	07d8      	lsls	r0, r3, #31
 800799c:	d5ea      	bpl.n	8007974 <_printf_float+0x194>
 800799e:	1c4b      	adds	r3, r1, #1
 80079a0:	e7e7      	b.n	8007972 <_printf_float+0x192>
 80079a2:	2900      	cmp	r1, #0
 80079a4:	bfd4      	ite	le
 80079a6:	f1c1 0202 	rsble	r2, r1, #2
 80079aa:	2201      	movgt	r2, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	e7e0      	b.n	8007972 <_printf_float+0x192>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	055a      	lsls	r2, r3, #21
 80079b4:	d407      	bmi.n	80079c6 <_printf_float+0x1e6>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	4642      	mov	r2, r8
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	d12b      	bne.n	8007a1c <_printf_float+0x23c>
 80079c4:	e767      	b.n	8007896 <_printf_float+0xb6>
 80079c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ca:	f240 80dd 	bls.w	8007b88 <_printf_float+0x3a8>
 80079ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079d2:	2200      	movs	r2, #0
 80079d4:	2300      	movs	r3, #0
 80079d6:	f7f9 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d033      	beq.n	8007a46 <_printf_float+0x266>
 80079de:	4a37      	ldr	r2, [pc, #220]	@ (8007abc <_printf_float+0x2dc>)
 80079e0:	2301      	movs	r3, #1
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f af54 	beq.w	8007896 <_printf_float+0xb6>
 80079ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079f2:	4543      	cmp	r3, r8
 80079f4:	db02      	blt.n	80079fc <_printf_float+0x21c>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	07d8      	lsls	r0, r3, #31
 80079fa:	d50f      	bpl.n	8007a1c <_printf_float+0x23c>
 80079fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f af45 	beq.w	8007896 <_printf_float+0xb6>
 8007a0c:	f04f 0900 	mov.w	r9, #0
 8007a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a14:	f104 0a1a 	add.w	sl, r4, #26
 8007a18:	45c8      	cmp	r8, r9
 8007a1a:	dc09      	bgt.n	8007a30 <_printf_float+0x250>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	079b      	lsls	r3, r3, #30
 8007a20:	f100 8103 	bmi.w	8007c2a <_printf_float+0x44a>
 8007a24:	68e0      	ldr	r0, [r4, #12]
 8007a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a28:	4298      	cmp	r0, r3
 8007a2a:	bfb8      	it	lt
 8007a2c:	4618      	movlt	r0, r3
 8007a2e:	e734      	b.n	800789a <_printf_float+0xba>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4652      	mov	r2, sl
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f af2b 	beq.w	8007896 <_printf_float+0xb6>
 8007a40:	f109 0901 	add.w	r9, r9, #1
 8007a44:	e7e8      	b.n	8007a18 <_printf_float+0x238>
 8007a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dc39      	bgt.n	8007ac0 <_printf_float+0x2e0>
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007abc <_printf_float+0x2dc>)
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af1d 	beq.w	8007896 <_printf_float+0xb6>
 8007a5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a60:	ea59 0303 	orrs.w	r3, r9, r3
 8007a64:	d102      	bne.n	8007a6c <_printf_float+0x28c>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d5d7      	bpl.n	8007a1c <_printf_float+0x23c>
 8007a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af0d 	beq.w	8007896 <_printf_float+0xb6>
 8007a7c:	f04f 0a00 	mov.w	sl, #0
 8007a80:	f104 0b1a 	add.w	fp, r4, #26
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	425b      	negs	r3, r3
 8007a88:	4553      	cmp	r3, sl
 8007a8a:	dc01      	bgt.n	8007a90 <_printf_float+0x2b0>
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	e793      	b.n	80079b8 <_printf_float+0x1d8>
 8007a90:	2301      	movs	r3, #1
 8007a92:	465a      	mov	r2, fp
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f aefb 	beq.w	8007896 <_printf_float+0xb6>
 8007aa0:	f10a 0a01 	add.w	sl, sl, #1
 8007aa4:	e7ee      	b.n	8007a84 <_printf_float+0x2a4>
 8007aa6:	bf00      	nop
 8007aa8:	7fefffff 	.word	0x7fefffff
 8007aac:	0800a608 	.word	0x0800a608
 8007ab0:	0800a604 	.word	0x0800a604
 8007ab4:	0800a610 	.word	0x0800a610
 8007ab8:	0800a60c 	.word	0x0800a60c
 8007abc:	0800a614 	.word	0x0800a614
 8007ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ac6:	4553      	cmp	r3, sl
 8007ac8:	bfa8      	it	ge
 8007aca:	4653      	movge	r3, sl
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	4699      	mov	r9, r3
 8007ad0:	dc36      	bgt.n	8007b40 <_printf_float+0x360>
 8007ad2:	f04f 0b00 	mov.w	fp, #0
 8007ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ada:	f104 021a 	add.w	r2, r4, #26
 8007ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ae0:	9306      	str	r3, [sp, #24]
 8007ae2:	eba3 0309 	sub.w	r3, r3, r9
 8007ae6:	455b      	cmp	r3, fp
 8007ae8:	dc31      	bgt.n	8007b4e <_printf_float+0x36e>
 8007aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aec:	459a      	cmp	sl, r3
 8007aee:	dc3a      	bgt.n	8007b66 <_printf_float+0x386>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d437      	bmi.n	8007b66 <_printf_float+0x386>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	ebaa 0903 	sub.w	r9, sl, r3
 8007afc:	9b06      	ldr	r3, [sp, #24]
 8007afe:	ebaa 0303 	sub.w	r3, sl, r3
 8007b02:	4599      	cmp	r9, r3
 8007b04:	bfa8      	it	ge
 8007b06:	4699      	movge	r9, r3
 8007b08:	f1b9 0f00 	cmp.w	r9, #0
 8007b0c:	dc33      	bgt.n	8007b76 <_printf_float+0x396>
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b16:	f104 0b1a 	add.w	fp, r4, #26
 8007b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8007b20:	eba3 0309 	sub.w	r3, r3, r9
 8007b24:	4543      	cmp	r3, r8
 8007b26:	f77f af79 	ble.w	8007a1c <_printf_float+0x23c>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	465a      	mov	r2, fp
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	f43f aeae 	beq.w	8007896 <_printf_float+0xb6>
 8007b3a:	f108 0801 	add.w	r8, r8, #1
 8007b3e:	e7ec      	b.n	8007b1a <_printf_float+0x33a>
 8007b40:	4642      	mov	r2, r8
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d1c2      	bne.n	8007ad2 <_printf_float+0x2f2>
 8007b4c:	e6a3      	b.n	8007896 <_printf_float+0xb6>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	9206      	str	r2, [sp, #24]
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae9c 	beq.w	8007896 <_printf_float+0xb6>
 8007b5e:	9a06      	ldr	r2, [sp, #24]
 8007b60:	f10b 0b01 	add.w	fp, fp, #1
 8007b64:	e7bb      	b.n	8007ade <_printf_float+0x2fe>
 8007b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	d1c0      	bne.n	8007af6 <_printf_float+0x316>
 8007b74:	e68f      	b.n	8007896 <_printf_float+0xb6>
 8007b76:	9a06      	ldr	r2, [sp, #24]
 8007b78:	464b      	mov	r3, r9
 8007b7a:	4442      	add	r2, r8
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	d1c3      	bne.n	8007b0e <_printf_float+0x32e>
 8007b86:	e686      	b.n	8007896 <_printf_float+0xb6>
 8007b88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b8c:	f1ba 0f01 	cmp.w	sl, #1
 8007b90:	dc01      	bgt.n	8007b96 <_printf_float+0x3b6>
 8007b92:	07db      	lsls	r3, r3, #31
 8007b94:	d536      	bpl.n	8007c04 <_printf_float+0x424>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4642      	mov	r2, r8
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f43f ae78 	beq.w	8007896 <_printf_float+0xb6>
 8007ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f ae70 	beq.w	8007896 <_printf_float+0xb6>
 8007bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc2:	f7f8 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc6:	b9c0      	cbnz	r0, 8007bfa <_printf_float+0x41a>
 8007bc8:	4653      	mov	r3, sl
 8007bca:	f108 0201 	add.w	r2, r8, #1
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d10c      	bne.n	8007bf2 <_printf_float+0x412>
 8007bd8:	e65d      	b.n	8007896 <_printf_float+0xb6>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	465a      	mov	r2, fp
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae56 	beq.w	8007896 <_printf_float+0xb6>
 8007bea:	f108 0801 	add.w	r8, r8, #1
 8007bee:	45d0      	cmp	r8, sl
 8007bf0:	dbf3      	blt.n	8007bda <_printf_float+0x3fa>
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bf8:	e6df      	b.n	80079ba <_printf_float+0x1da>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	f104 0b1a 	add.w	fp, r4, #26
 8007c02:	e7f4      	b.n	8007bee <_printf_float+0x40e>
 8007c04:	2301      	movs	r3, #1
 8007c06:	4642      	mov	r2, r8
 8007c08:	e7e1      	b.n	8007bce <_printf_float+0x3ee>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	464a      	mov	r2, r9
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f ae3e 	beq.w	8007896 <_printf_float+0xb6>
 8007c1a:	f108 0801 	add.w	r8, r8, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	4543      	cmp	r3, r8
 8007c26:	dcf0      	bgt.n	8007c0a <_printf_float+0x42a>
 8007c28:	e6fc      	b.n	8007a24 <_printf_float+0x244>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	f104 0919 	add.w	r9, r4, #25
 8007c32:	e7f4      	b.n	8007c1e <_printf_float+0x43e>

08007c34 <_printf_common>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	4616      	mov	r6, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	688a      	ldr	r2, [r1, #8]
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	bfb8      	it	lt
 8007c48:	4613      	movlt	r3, r2
 8007c4a:	6033      	str	r3, [r6, #0]
 8007c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c50:	4607      	mov	r7, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	b10a      	cbz	r2, 8007c5a <_printf_common+0x26>
 8007c56:	3301      	adds	r3, #1
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	0699      	lsls	r1, r3, #26
 8007c5e:	bf42      	ittt	mi
 8007c60:	6833      	ldrmi	r3, [r6, #0]
 8007c62:	3302      	addmi	r3, #2
 8007c64:	6033      	strmi	r3, [r6, #0]
 8007c66:	6825      	ldr	r5, [r4, #0]
 8007c68:	f015 0506 	ands.w	r5, r5, #6
 8007c6c:	d106      	bne.n	8007c7c <_printf_common+0x48>
 8007c6e:	f104 0a19 	add.w	sl, r4, #25
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	6832      	ldr	r2, [r6, #0]
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dc26      	bgt.n	8007cca <_printf_common+0x96>
 8007c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	3b00      	subs	r3, #0
 8007c84:	bf18      	it	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	0692      	lsls	r2, r2, #26
 8007c8a:	d42b      	bmi.n	8007ce4 <_printf_common+0xb0>
 8007c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c90:	4641      	mov	r1, r8
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c8      	blx	r9
 8007c96:	3001      	adds	r0, #1
 8007c98:	d01e      	beq.n	8007cd8 <_printf_common+0xa4>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	f003 0306 	and.w	r3, r3, #6
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	bf02      	ittt	eq
 8007ca6:	68e5      	ldreq	r5, [r4, #12]
 8007ca8:	6833      	ldreq	r3, [r6, #0]
 8007caa:	1aed      	subeq	r5, r5, r3
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	bf0c      	ite	eq
 8007cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb4:	2500      	movne	r5, #0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bfc4      	itt	gt
 8007cba:	1a9b      	subgt	r3, r3, r2
 8007cbc:	18ed      	addgt	r5, r5, r3
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	341a      	adds	r4, #26
 8007cc2:	42b5      	cmp	r5, r6
 8007cc4:	d11a      	bne.n	8007cfc <_printf_common+0xc8>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e008      	b.n	8007cdc <_printf_common+0xa8>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4652      	mov	r2, sl
 8007cce:	4641      	mov	r1, r8
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	47c8      	blx	r9
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d103      	bne.n	8007ce0 <_printf_common+0xac>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	e7c6      	b.n	8007c72 <_printf_common+0x3e>
 8007ce4:	18e1      	adds	r1, r4, r3
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	2030      	movs	r0, #48	@ 0x30
 8007cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cee:	4422      	add	r2, r4
 8007cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	e7c7      	b.n	8007c8c <_printf_common+0x58>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d0e6      	beq.n	8007cd8 <_printf_common+0xa4>
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7d9      	b.n	8007cc2 <_printf_common+0x8e>
	...

08007d10 <_printf_i>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	7e0f      	ldrb	r7, [r1, #24]
 8007d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d18:	2f78      	cmp	r7, #120	@ 0x78
 8007d1a:	4691      	mov	r9, r2
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	469a      	mov	sl, r3
 8007d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d26:	d807      	bhi.n	8007d38 <_printf_i+0x28>
 8007d28:	2f62      	cmp	r7, #98	@ 0x62
 8007d2a:	d80a      	bhi.n	8007d42 <_printf_i+0x32>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f000 80d1 	beq.w	8007ed4 <_printf_i+0x1c4>
 8007d32:	2f58      	cmp	r7, #88	@ 0x58
 8007d34:	f000 80b8 	beq.w	8007ea8 <_printf_i+0x198>
 8007d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d40:	e03a      	b.n	8007db8 <_printf_i+0xa8>
 8007d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d46:	2b15      	cmp	r3, #21
 8007d48:	d8f6      	bhi.n	8007d38 <_printf_i+0x28>
 8007d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d50 <_printf_i+0x40>)
 8007d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007d39 	.word	0x08007d39
 8007d5c:	08007d39 	.word	0x08007d39
 8007d60:	08007d39 	.word	0x08007d39
 8007d64:	08007d39 	.word	0x08007d39
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d39 	.word	0x08007d39
 8007d70:	08007d39 	.word	0x08007d39
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007ebb 	.word	0x08007ebb
 8007d80:	08007de7 	.word	0x08007de7
 8007d84:	08007e75 	.word	0x08007e75
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007edd 	.word	0x08007edd
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7d 	.word	0x08007e7d
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db8:	2301      	movs	r3, #1
 8007dba:	e09c      	b.n	8007ef6 <_printf_i+0x1e6>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	0606      	lsls	r6, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xbc>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <_printf_i+0xc4>
 8007dcc:	0645      	lsls	r5, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xb8>
 8007dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xd0>
 8007dd8:	232d      	movs	r3, #45	@ 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de0:	4858      	ldr	r0, [pc, #352]	@ (8007f44 <_printf_i+0x234>)
 8007de2:	230a      	movs	r3, #10
 8007de4:	e011      	b.n	8007e0a <_printf_i+0xfa>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df0:	d402      	bmi.n	8007df8 <_printf_i+0xe8>
 8007df2:	0649      	lsls	r1, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b2ad      	uxthmi	r5, r5
 8007df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfa:	4852      	ldr	r0, [pc, #328]	@ (8007f44 <_printf_i+0x234>)
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	bf14      	ite	ne
 8007e00:	230a      	movne	r3, #10
 8007e02:	2308      	moveq	r3, #8
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	60a6      	str	r6, [r4, #8]
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	db05      	blt.n	8007e1e <_printf_i+0x10e>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	432e      	orrs	r6, r5
 8007e16:	f021 0104 	bic.w	r1, r1, #4
 8007e1a:	6021      	str	r1, [r4, #0]
 8007e1c:	d04b      	beq.n	8007eb6 <_printf_i+0x1a6>
 8007e1e:	4616      	mov	r6, r2
 8007e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e24:	fb03 5711 	mls	r7, r3, r1, r5
 8007e28:	5dc7      	ldrb	r7, [r0, r7]
 8007e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e2e:	462f      	mov	r7, r5
 8007e30:	42bb      	cmp	r3, r7
 8007e32:	460d      	mov	r5, r1
 8007e34:	d9f4      	bls.n	8007e20 <_printf_i+0x110>
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d10b      	bne.n	8007e52 <_printf_i+0x142>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	07df      	lsls	r7, r3, #31
 8007e3e:	d508      	bpl.n	8007e52 <_printf_i+0x142>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	6861      	ldr	r1, [r4, #4]
 8007e44:	4299      	cmp	r1, r3
 8007e46:	bfde      	ittt	le
 8007e48:	2330      	movle	r3, #48	@ 0x30
 8007e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e52:	1b92      	subs	r2, r2, r6
 8007e54:	6122      	str	r2, [r4, #16]
 8007e56:	f8cd a000 	str.w	sl, [sp]
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	aa03      	add	r2, sp, #12
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4640      	mov	r0, r8
 8007e62:	f7ff fee7 	bl	8007c34 <_printf_common>
 8007e66:	3001      	adds	r0, #1
 8007e68:	d14a      	bne.n	8007f00 <_printf_i+0x1f0>
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6e:	b004      	add	sp, #16
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	f043 0320 	orr.w	r3, r3, #32
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	4832      	ldr	r0, [pc, #200]	@ (8007f48 <_printf_i+0x238>)
 8007e7e:	2778      	movs	r7, #120	@ 0x78
 8007e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	6831      	ldr	r1, [r6, #0]
 8007e88:	061f      	lsls	r7, r3, #24
 8007e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e8e:	d402      	bmi.n	8007e96 <_printf_i+0x186>
 8007e90:	065f      	lsls	r7, r3, #25
 8007e92:	bf48      	it	mi
 8007e94:	b2ad      	uxthmi	r5, r5
 8007e96:	6031      	str	r1, [r6, #0]
 8007e98:	07d9      	lsls	r1, r3, #31
 8007e9a:	bf44      	itt	mi
 8007e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea0:	6023      	strmi	r3, [r4, #0]
 8007ea2:	b11d      	cbz	r5, 8007eac <_printf_i+0x19c>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	e7ad      	b.n	8007e04 <_printf_i+0xf4>
 8007ea8:	4826      	ldr	r0, [pc, #152]	@ (8007f44 <_printf_i+0x234>)
 8007eaa:	e7e9      	b.n	8007e80 <_printf_i+0x170>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	f023 0320 	bic.w	r3, r3, #32
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	e7f6      	b.n	8007ea4 <_printf_i+0x194>
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	e7bd      	b.n	8007e36 <_printf_i+0x126>
 8007eba:	6833      	ldr	r3, [r6, #0]
 8007ebc:	6825      	ldr	r5, [r4, #0]
 8007ebe:	6961      	ldr	r1, [r4, #20]
 8007ec0:	1d18      	adds	r0, r3, #4
 8007ec2:	6030      	str	r0, [r6, #0]
 8007ec4:	062e      	lsls	r6, r5, #24
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	d501      	bpl.n	8007ece <_printf_i+0x1be>
 8007eca:	6019      	str	r1, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <_printf_i+0x1c4>
 8007ece:	0668      	lsls	r0, r5, #25
 8007ed0:	d5fb      	bpl.n	8007eca <_printf_i+0x1ba>
 8007ed2:	8019      	strh	r1, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	4616      	mov	r6, r2
 8007eda:	e7bc      	b.n	8007e56 <_printf_i+0x146>
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	6032      	str	r2, [r6, #0]
 8007ee2:	681e      	ldr	r6, [r3, #0]
 8007ee4:	6862      	ldr	r2, [r4, #4]
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7f8 f971 	bl	80001d0 <memchr>
 8007eee:	b108      	cbz	r0, 8007ef4 <_printf_i+0x1e4>
 8007ef0:	1b80      	subs	r0, r0, r6
 8007ef2:	6060      	str	r0, [r4, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efe:	e7aa      	b.n	8007e56 <_printf_i+0x146>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	4632      	mov	r2, r6
 8007f04:	4649      	mov	r1, r9
 8007f06:	4640      	mov	r0, r8
 8007f08:	47d0      	blx	sl
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d0ad      	beq.n	8007e6a <_printf_i+0x15a>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	079b      	lsls	r3, r3, #30
 8007f12:	d413      	bmi.n	8007f3c <_printf_i+0x22c>
 8007f14:	68e0      	ldr	r0, [r4, #12]
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	4298      	cmp	r0, r3
 8007f1a:	bfb8      	it	lt
 8007f1c:	4618      	movlt	r0, r3
 8007f1e:	e7a6      	b.n	8007e6e <_printf_i+0x15e>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4632      	mov	r2, r6
 8007f24:	4649      	mov	r1, r9
 8007f26:	4640      	mov	r0, r8
 8007f28:	47d0      	blx	sl
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d09d      	beq.n	8007e6a <_printf_i+0x15a>
 8007f2e:	3501      	adds	r5, #1
 8007f30:	68e3      	ldr	r3, [r4, #12]
 8007f32:	9903      	ldr	r1, [sp, #12]
 8007f34:	1a5b      	subs	r3, r3, r1
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	dcf2      	bgt.n	8007f20 <_printf_i+0x210>
 8007f3a:	e7eb      	b.n	8007f14 <_printf_i+0x204>
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	f104 0619 	add.w	r6, r4, #25
 8007f42:	e7f5      	b.n	8007f30 <_printf_i+0x220>
 8007f44:	0800a616 	.word	0x0800a616
 8007f48:	0800a627 	.word	0x0800a627

08007f4c <std>:
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	4604      	mov	r4, r0
 8007f52:	e9c0 3300 	strd	r3, r3, [r0]
 8007f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5a:	6083      	str	r3, [r0, #8]
 8007f5c:	8181      	strh	r1, [r0, #12]
 8007f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f60:	81c2      	strh	r2, [r0, #14]
 8007f62:	6183      	str	r3, [r0, #24]
 8007f64:	4619      	mov	r1, r3
 8007f66:	2208      	movs	r2, #8
 8007f68:	305c      	adds	r0, #92	@ 0x5c
 8007f6a:	f000 f9f9 	bl	8008360 <memset>
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa4 <std+0x58>)
 8007f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <std+0x5c>)
 8007f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <std+0x60>)
 8007f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <std+0x64>)
 8007f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <std+0x68>)
 8007f80:	6224      	str	r4, [r4, #32]
 8007f82:	429c      	cmp	r4, r3
 8007f84:	d006      	beq.n	8007f94 <std+0x48>
 8007f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f8a:	4294      	cmp	r4, r2
 8007f8c:	d002      	beq.n	8007f94 <std+0x48>
 8007f8e:	33d0      	adds	r3, #208	@ 0xd0
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d105      	bne.n	8007fa0 <std+0x54>
 8007f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9c:	f000 ba5c 	b.w	8008458 <__retarget_lock_init_recursive>
 8007fa0:	bd10      	pop	{r4, pc}
 8007fa2:	bf00      	nop
 8007fa4:	080081b1 	.word	0x080081b1
 8007fa8:	080081d3 	.word	0x080081d3
 8007fac:	0800820b 	.word	0x0800820b
 8007fb0:	0800822f 	.word	0x0800822f
 8007fb4:	200004c8 	.word	0x200004c8

08007fb8 <stdio_exit_handler>:
 8007fb8:	4a02      	ldr	r2, [pc, #8]	@ (8007fc4 <stdio_exit_handler+0xc>)
 8007fba:	4903      	ldr	r1, [pc, #12]	@ (8007fc8 <stdio_exit_handler+0x10>)
 8007fbc:	4803      	ldr	r0, [pc, #12]	@ (8007fcc <stdio_exit_handler+0x14>)
 8007fbe:	f000 b869 	b.w	8008094 <_fwalk_sglue>
 8007fc2:	bf00      	nop
 8007fc4:	20000018 	.word	0x20000018
 8007fc8:	08009d91 	.word	0x08009d91
 8007fcc:	20000028 	.word	0x20000028

08007fd0 <cleanup_stdio>:
 8007fd0:	6841      	ldr	r1, [r0, #4]
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <cleanup_stdio+0x34>)
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	4604      	mov	r4, r0
 8007fda:	d001      	beq.n	8007fe0 <cleanup_stdio+0x10>
 8007fdc:	f001 fed8 	bl	8009d90 <_fflush_r>
 8007fe0:	68a1      	ldr	r1, [r4, #8]
 8007fe2:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <cleanup_stdio+0x38>)
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	d002      	beq.n	8007fee <cleanup_stdio+0x1e>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f001 fed1 	bl	8009d90 <_fflush_r>
 8007fee:	68e1      	ldr	r1, [r4, #12]
 8007ff0:	4b06      	ldr	r3, [pc, #24]	@ (800800c <cleanup_stdio+0x3c>)
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d004      	beq.n	8008000 <cleanup_stdio+0x30>
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffc:	f001 bec8 	b.w	8009d90 <_fflush_r>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	200004c8 	.word	0x200004c8
 8008008:	20000530 	.word	0x20000530
 800800c:	20000598 	.word	0x20000598

08008010 <global_stdio_init.part.0>:
 8008010:	b510      	push	{r4, lr}
 8008012:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <global_stdio_init.part.0+0x30>)
 8008014:	4c0b      	ldr	r4, [pc, #44]	@ (8008044 <global_stdio_init.part.0+0x34>)
 8008016:	4a0c      	ldr	r2, [pc, #48]	@ (8008048 <global_stdio_init.part.0+0x38>)
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	4620      	mov	r0, r4
 800801c:	2200      	movs	r2, #0
 800801e:	2104      	movs	r1, #4
 8008020:	f7ff ff94 	bl	8007f4c <std>
 8008024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008028:	2201      	movs	r2, #1
 800802a:	2109      	movs	r1, #9
 800802c:	f7ff ff8e 	bl	8007f4c <std>
 8008030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008034:	2202      	movs	r2, #2
 8008036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803a:	2112      	movs	r1, #18
 800803c:	f7ff bf86 	b.w	8007f4c <std>
 8008040:	20000600 	.word	0x20000600
 8008044:	200004c8 	.word	0x200004c8
 8008048:	08007fb9 	.word	0x08007fb9

0800804c <__sfp_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	@ (8008054 <__sfp_lock_acquire+0x8>)
 800804e:	f000 ba04 	b.w	800845a <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	20000609 	.word	0x20000609

08008058 <__sfp_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	@ (8008060 <__sfp_lock_release+0x8>)
 800805a:	f000 b9ff 	b.w	800845c <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	20000609 	.word	0x20000609

08008064 <__sinit>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	f7ff fff0 	bl	800804c <__sfp_lock_acquire>
 800806c:	6a23      	ldr	r3, [r4, #32]
 800806e:	b11b      	cbz	r3, 8008078 <__sinit+0x14>
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	f7ff bff0 	b.w	8008058 <__sfp_lock_release>
 8008078:	4b04      	ldr	r3, [pc, #16]	@ (800808c <__sinit+0x28>)
 800807a:	6223      	str	r3, [r4, #32]
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <__sinit+0x2c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1f5      	bne.n	8008070 <__sinit+0xc>
 8008084:	f7ff ffc4 	bl	8008010 <global_stdio_init.part.0>
 8008088:	e7f2      	b.n	8008070 <__sinit+0xc>
 800808a:	bf00      	nop
 800808c:	08007fd1 	.word	0x08007fd1
 8008090:	20000600 	.word	0x20000600

08008094 <_fwalk_sglue>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	4607      	mov	r7, r0
 800809a:	4688      	mov	r8, r1
 800809c:	4614      	mov	r4, r2
 800809e:	2600      	movs	r6, #0
 80080a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a4:	f1b9 0901 	subs.w	r9, r9, #1
 80080a8:	d505      	bpl.n	80080b6 <_fwalk_sglue+0x22>
 80080aa:	6824      	ldr	r4, [r4, #0]
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	d1f7      	bne.n	80080a0 <_fwalk_sglue+0xc>
 80080b0:	4630      	mov	r0, r6
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d907      	bls.n	80080cc <_fwalk_sglue+0x38>
 80080bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c0:	3301      	adds	r3, #1
 80080c2:	d003      	beq.n	80080cc <_fwalk_sglue+0x38>
 80080c4:	4629      	mov	r1, r5
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	4306      	orrs	r6, r0
 80080cc:	3568      	adds	r5, #104	@ 0x68
 80080ce:	e7e9      	b.n	80080a4 <_fwalk_sglue+0x10>

080080d0 <iprintf>:
 80080d0:	b40f      	push	{r0, r1, r2, r3}
 80080d2:	b507      	push	{r0, r1, r2, lr}
 80080d4:	4906      	ldr	r1, [pc, #24]	@ (80080f0 <iprintf+0x20>)
 80080d6:	ab04      	add	r3, sp, #16
 80080d8:	6808      	ldr	r0, [r1, #0]
 80080da:	f853 2b04 	ldr.w	r2, [r3], #4
 80080de:	6881      	ldr	r1, [r0, #8]
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	f001 fcb9 	bl	8009a58 <_vfiprintf_r>
 80080e6:	b003      	add	sp, #12
 80080e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080ec:	b004      	add	sp, #16
 80080ee:	4770      	bx	lr
 80080f0:	20000024 	.word	0x20000024

080080f4 <_puts_r>:
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	b570      	push	{r4, r5, r6, lr}
 80080f8:	6884      	ldr	r4, [r0, #8]
 80080fa:	4605      	mov	r5, r0
 80080fc:	460e      	mov	r6, r1
 80080fe:	b90b      	cbnz	r3, 8008104 <_puts_r+0x10>
 8008100:	f7ff ffb0 	bl	8008064 <__sinit>
 8008104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008106:	07db      	lsls	r3, r3, #31
 8008108:	d405      	bmi.n	8008116 <_puts_r+0x22>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	0598      	lsls	r0, r3, #22
 800810e:	d402      	bmi.n	8008116 <_puts_r+0x22>
 8008110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008112:	f000 f9a2 	bl	800845a <__retarget_lock_acquire_recursive>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	0719      	lsls	r1, r3, #28
 800811a:	d502      	bpl.n	8008122 <_puts_r+0x2e>
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d135      	bne.n	800818e <_puts_r+0x9a>
 8008122:	4621      	mov	r1, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f000 f8c5 	bl	80082b4 <__swsetup_r>
 800812a:	b380      	cbz	r0, 800818e <_puts_r+0x9a>
 800812c:	f04f 35ff 	mov.w	r5, #4294967295
 8008130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	d405      	bmi.n	8008142 <_puts_r+0x4e>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	059b      	lsls	r3, r3, #22
 800813a:	d402      	bmi.n	8008142 <_puts_r+0x4e>
 800813c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813e:	f000 f98d 	bl	800845c <__retarget_lock_release_recursive>
 8008142:	4628      	mov	r0, r5
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	2b00      	cmp	r3, #0
 8008148:	da04      	bge.n	8008154 <_puts_r+0x60>
 800814a:	69a2      	ldr	r2, [r4, #24]
 800814c:	429a      	cmp	r2, r3
 800814e:	dc17      	bgt.n	8008180 <_puts_r+0x8c>
 8008150:	290a      	cmp	r1, #10
 8008152:	d015      	beq.n	8008180 <_puts_r+0x8c>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	6022      	str	r2, [r4, #0]
 800815a:	7019      	strb	r1, [r3, #0]
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008162:	3b01      	subs	r3, #1
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	2900      	cmp	r1, #0
 8008168:	d1ed      	bne.n	8008146 <_puts_r+0x52>
 800816a:	2b00      	cmp	r3, #0
 800816c:	da11      	bge.n	8008192 <_puts_r+0x9e>
 800816e:	4622      	mov	r2, r4
 8008170:	210a      	movs	r1, #10
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f85f 	bl	8008236 <__swbuf_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d0d7      	beq.n	800812c <_puts_r+0x38>
 800817c:	250a      	movs	r5, #10
 800817e:	e7d7      	b.n	8008130 <_puts_r+0x3c>
 8008180:	4622      	mov	r2, r4
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f857 	bl	8008236 <__swbuf_r>
 8008188:	3001      	adds	r0, #1
 800818a:	d1e7      	bne.n	800815c <_puts_r+0x68>
 800818c:	e7ce      	b.n	800812c <_puts_r+0x38>
 800818e:	3e01      	subs	r6, #1
 8008190:	e7e4      	b.n	800815c <_puts_r+0x68>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	220a      	movs	r2, #10
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e7ee      	b.n	800817c <_puts_r+0x88>
	...

080081a0 <puts>:
 80081a0:	4b02      	ldr	r3, [pc, #8]	@ (80081ac <puts+0xc>)
 80081a2:	4601      	mov	r1, r0
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	f7ff bfa5 	b.w	80080f4 <_puts_r>
 80081aa:	bf00      	nop
 80081ac:	20000024 	.word	0x20000024

080081b0 <__sread>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	460c      	mov	r4, r1
 80081b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b8:	f000 f900 	bl	80083bc <_read_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	bfab      	itete	ge
 80081c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081c2:	89a3      	ldrhlt	r3, [r4, #12]
 80081c4:	181b      	addge	r3, r3, r0
 80081c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081ca:	bfac      	ite	ge
 80081cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081ce:	81a3      	strhlt	r3, [r4, #12]
 80081d0:	bd10      	pop	{r4, pc}

080081d2 <__swrite>:
 80081d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d6:	461f      	mov	r7, r3
 80081d8:	898b      	ldrh	r3, [r1, #12]
 80081da:	05db      	lsls	r3, r3, #23
 80081dc:	4605      	mov	r5, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4616      	mov	r6, r2
 80081e2:	d505      	bpl.n	80081f0 <__swrite+0x1e>
 80081e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e8:	2302      	movs	r3, #2
 80081ea:	2200      	movs	r2, #0
 80081ec:	f000 f8d4 	bl	8008398 <_lseek_r>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	4628      	mov	r0, r5
 8008202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008206:	f000 b8eb 	b.w	80083e0 <_write_r>

0800820a <__sseek>:
 800820a:	b510      	push	{r4, lr}
 800820c:	460c      	mov	r4, r1
 800820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008212:	f000 f8c1 	bl	8008398 <_lseek_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	bf15      	itete	ne
 800821c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800821e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008226:	81a3      	strheq	r3, [r4, #12]
 8008228:	bf18      	it	ne
 800822a:	81a3      	strhne	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__sclose>:
 800822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008232:	f000 b8a1 	b.w	8008378 <_close_r>

08008236 <__swbuf_r>:
 8008236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008238:	460e      	mov	r6, r1
 800823a:	4614      	mov	r4, r2
 800823c:	4605      	mov	r5, r0
 800823e:	b118      	cbz	r0, 8008248 <__swbuf_r+0x12>
 8008240:	6a03      	ldr	r3, [r0, #32]
 8008242:	b90b      	cbnz	r3, 8008248 <__swbuf_r+0x12>
 8008244:	f7ff ff0e 	bl	8008064 <__sinit>
 8008248:	69a3      	ldr	r3, [r4, #24]
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	071a      	lsls	r2, r3, #28
 8008250:	d501      	bpl.n	8008256 <__swbuf_r+0x20>
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	b943      	cbnz	r3, 8008268 <__swbuf_r+0x32>
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f000 f82b 	bl	80082b4 <__swsetup_r>
 800825e:	b118      	cbz	r0, 8008268 <__swbuf_r+0x32>
 8008260:	f04f 37ff 	mov.w	r7, #4294967295
 8008264:	4638      	mov	r0, r7
 8008266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	6922      	ldr	r2, [r4, #16]
 800826c:	1a98      	subs	r0, r3, r2
 800826e:	6963      	ldr	r3, [r4, #20]
 8008270:	b2f6      	uxtb	r6, r6
 8008272:	4283      	cmp	r3, r0
 8008274:	4637      	mov	r7, r6
 8008276:	dc05      	bgt.n	8008284 <__swbuf_r+0x4e>
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f001 fd88 	bl	8009d90 <_fflush_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	d1ed      	bne.n	8008260 <__swbuf_r+0x2a>
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	3b01      	subs	r3, #1
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	6022      	str	r2, [r4, #0]
 8008290:	701e      	strb	r6, [r3, #0]
 8008292:	6962      	ldr	r2, [r4, #20]
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	429a      	cmp	r2, r3
 8008298:	d004      	beq.n	80082a4 <__swbuf_r+0x6e>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	07db      	lsls	r3, r3, #31
 800829e:	d5e1      	bpl.n	8008264 <__swbuf_r+0x2e>
 80082a0:	2e0a      	cmp	r6, #10
 80082a2:	d1df      	bne.n	8008264 <__swbuf_r+0x2e>
 80082a4:	4621      	mov	r1, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	f001 fd72 	bl	8009d90 <_fflush_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0d9      	beq.n	8008264 <__swbuf_r+0x2e>
 80082b0:	e7d6      	b.n	8008260 <__swbuf_r+0x2a>
	...

080082b4 <__swsetup_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4b29      	ldr	r3, [pc, #164]	@ (800835c <__swsetup_r+0xa8>)
 80082b8:	4605      	mov	r5, r0
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	460c      	mov	r4, r1
 80082be:	b118      	cbz	r0, 80082c8 <__swsetup_r+0x14>
 80082c0:	6a03      	ldr	r3, [r0, #32]
 80082c2:	b90b      	cbnz	r3, 80082c8 <__swsetup_r+0x14>
 80082c4:	f7ff fece 	bl	8008064 <__sinit>
 80082c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082cc:	0719      	lsls	r1, r3, #28
 80082ce:	d422      	bmi.n	8008316 <__swsetup_r+0x62>
 80082d0:	06da      	lsls	r2, r3, #27
 80082d2:	d407      	bmi.n	80082e4 <__swsetup_r+0x30>
 80082d4:	2209      	movs	r2, #9
 80082d6:	602a      	str	r2, [r5, #0]
 80082d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082dc:	81a3      	strh	r3, [r4, #12]
 80082de:	f04f 30ff 	mov.w	r0, #4294967295
 80082e2:	e033      	b.n	800834c <__swsetup_r+0x98>
 80082e4:	0758      	lsls	r0, r3, #29
 80082e6:	d512      	bpl.n	800830e <__swsetup_r+0x5a>
 80082e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ea:	b141      	cbz	r1, 80082fe <__swsetup_r+0x4a>
 80082ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082f0:	4299      	cmp	r1, r3
 80082f2:	d002      	beq.n	80082fa <__swsetup_r+0x46>
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 ff0b 	bl	8009110 <_free_r>
 80082fa:	2300      	movs	r3, #0
 80082fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	2300      	movs	r3, #0
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	6923      	ldr	r3, [r4, #16]
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	b94b      	cbnz	r3, 800832e <__swsetup_r+0x7a>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008324:	d003      	beq.n	800832e <__swsetup_r+0x7a>
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f001 fd7f 	bl	8009e2c <__smakebuf_r>
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	f013 0201 	ands.w	r2, r3, #1
 8008336:	d00a      	beq.n	800834e <__swsetup_r+0x9a>
 8008338:	2200      	movs	r2, #0
 800833a:	60a2      	str	r2, [r4, #8]
 800833c:	6962      	ldr	r2, [r4, #20]
 800833e:	4252      	negs	r2, r2
 8008340:	61a2      	str	r2, [r4, #24]
 8008342:	6922      	ldr	r2, [r4, #16]
 8008344:	b942      	cbnz	r2, 8008358 <__swsetup_r+0xa4>
 8008346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800834a:	d1c5      	bne.n	80082d8 <__swsetup_r+0x24>
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	0799      	lsls	r1, r3, #30
 8008350:	bf58      	it	pl
 8008352:	6962      	ldrpl	r2, [r4, #20]
 8008354:	60a2      	str	r2, [r4, #8]
 8008356:	e7f4      	b.n	8008342 <__swsetup_r+0x8e>
 8008358:	2000      	movs	r0, #0
 800835a:	e7f7      	b.n	800834c <__swsetup_r+0x98>
 800835c:	20000024 	.word	0x20000024

08008360 <memset>:
 8008360:	4402      	add	r2, r0
 8008362:	4603      	mov	r3, r0
 8008364:	4293      	cmp	r3, r2
 8008366:	d100      	bne.n	800836a <memset+0xa>
 8008368:	4770      	bx	lr
 800836a:	f803 1b01 	strb.w	r1, [r3], #1
 800836e:	e7f9      	b.n	8008364 <memset+0x4>

08008370 <_localeconv_r>:
 8008370:	4800      	ldr	r0, [pc, #0]	@ (8008374 <_localeconv_r+0x4>)
 8008372:	4770      	bx	lr
 8008374:	20000164 	.word	0x20000164

08008378 <_close_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d06      	ldr	r5, [pc, #24]	@ (8008394 <_close_r+0x1c>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7fa f930 	bl	80025e8 <_close>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_close_r+0x1a>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_close_r+0x1a>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000604 	.word	0x20000604

08008398 <_lseek_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d07      	ldr	r5, [pc, #28]	@ (80083b8 <_lseek_r+0x20>)
 800839c:	4604      	mov	r4, r0
 800839e:	4608      	mov	r0, r1
 80083a0:	4611      	mov	r1, r2
 80083a2:	2200      	movs	r2, #0
 80083a4:	602a      	str	r2, [r5, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f7fa f945 	bl	8002636 <_lseek>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_lseek_r+0x1e>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_lseek_r+0x1e>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	20000604 	.word	0x20000604

080083bc <_read_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	@ (80083dc <_read_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7fa f8d3 	bl	8002576 <_read>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_read_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_read_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000604 	.word	0x20000604

080083e0 <_write_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d07      	ldr	r5, [pc, #28]	@ (8008400 <_write_r+0x20>)
 80083e4:	4604      	mov	r4, r0
 80083e6:	4608      	mov	r0, r1
 80083e8:	4611      	mov	r1, r2
 80083ea:	2200      	movs	r2, #0
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f7fa f8de 	bl	80025b0 <_write>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_write_r+0x1e>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_write_r+0x1e>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20000604 	.word	0x20000604

08008404 <__errno>:
 8008404:	4b01      	ldr	r3, [pc, #4]	@ (800840c <__errno+0x8>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000024 	.word	0x20000024

08008410 <__libc_init_array>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	4d0d      	ldr	r5, [pc, #52]	@ (8008448 <__libc_init_array+0x38>)
 8008414:	4c0d      	ldr	r4, [pc, #52]	@ (800844c <__libc_init_array+0x3c>)
 8008416:	1b64      	subs	r4, r4, r5
 8008418:	10a4      	asrs	r4, r4, #2
 800841a:	2600      	movs	r6, #0
 800841c:	42a6      	cmp	r6, r4
 800841e:	d109      	bne.n	8008434 <__libc_init_array+0x24>
 8008420:	4d0b      	ldr	r5, [pc, #44]	@ (8008450 <__libc_init_array+0x40>)
 8008422:	4c0c      	ldr	r4, [pc, #48]	@ (8008454 <__libc_init_array+0x44>)
 8008424:	f001 fe2e 	bl	800a084 <_init>
 8008428:	1b64      	subs	r4, r4, r5
 800842a:	10a4      	asrs	r4, r4, #2
 800842c:	2600      	movs	r6, #0
 800842e:	42a6      	cmp	r6, r4
 8008430:	d105      	bne.n	800843e <__libc_init_array+0x2e>
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	f855 3b04 	ldr.w	r3, [r5], #4
 8008438:	4798      	blx	r3
 800843a:	3601      	adds	r6, #1
 800843c:	e7ee      	b.n	800841c <__libc_init_array+0xc>
 800843e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008442:	4798      	blx	r3
 8008444:	3601      	adds	r6, #1
 8008446:	e7f2      	b.n	800842e <__libc_init_array+0x1e>
 8008448:	0800a984 	.word	0x0800a984
 800844c:	0800a984 	.word	0x0800a984
 8008450:	0800a984 	.word	0x0800a984
 8008454:	0800a988 	.word	0x0800a988

08008458 <__retarget_lock_init_recursive>:
 8008458:	4770      	bx	lr

0800845a <__retarget_lock_acquire_recursive>:
 800845a:	4770      	bx	lr

0800845c <__retarget_lock_release_recursive>:
 800845c:	4770      	bx	lr

0800845e <quorem>:
 800845e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008462:	6903      	ldr	r3, [r0, #16]
 8008464:	690c      	ldr	r4, [r1, #16]
 8008466:	42a3      	cmp	r3, r4
 8008468:	4607      	mov	r7, r0
 800846a:	db7e      	blt.n	800856a <quorem+0x10c>
 800846c:	3c01      	subs	r4, #1
 800846e:	f101 0814 	add.w	r8, r1, #20
 8008472:	00a3      	lsls	r3, r4, #2
 8008474:	f100 0514 	add.w	r5, r0, #20
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008488:	3301      	adds	r3, #1
 800848a:	429a      	cmp	r2, r3
 800848c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008490:	fbb2 f6f3 	udiv	r6, r2, r3
 8008494:	d32e      	bcc.n	80084f4 <quorem+0x96>
 8008496:	f04f 0a00 	mov.w	sl, #0
 800849a:	46c4      	mov	ip, r8
 800849c:	46ae      	mov	lr, r5
 800849e:	46d3      	mov	fp, sl
 80084a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084a4:	b298      	uxth	r0, r3
 80084a6:	fb06 a000 	mla	r0, r6, r0, sl
 80084aa:	0c02      	lsrs	r2, r0, #16
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	fb06 2303 	mla	r3, r6, r3, r2
 80084b2:	f8de 2000 	ldr.w	r2, [lr]
 80084b6:	b280      	uxth	r0, r0
 80084b8:	b292      	uxth	r2, r2
 80084ba:	1a12      	subs	r2, r2, r0
 80084bc:	445a      	add	r2, fp
 80084be:	f8de 0000 	ldr.w	r0, [lr]
 80084c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084d0:	b292      	uxth	r2, r2
 80084d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084d6:	45e1      	cmp	r9, ip
 80084d8:	f84e 2b04 	str.w	r2, [lr], #4
 80084dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084e0:	d2de      	bcs.n	80084a0 <quorem+0x42>
 80084e2:	9b00      	ldr	r3, [sp, #0]
 80084e4:	58eb      	ldr	r3, [r5, r3]
 80084e6:	b92b      	cbnz	r3, 80084f4 <quorem+0x96>
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	3b04      	subs	r3, #4
 80084ec:	429d      	cmp	r5, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	d32f      	bcc.n	8008552 <quorem+0xf4>
 80084f2:	613c      	str	r4, [r7, #16]
 80084f4:	4638      	mov	r0, r7
 80084f6:	f001 f97d 	bl	80097f4 <__mcmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	db25      	blt.n	800854a <quorem+0xec>
 80084fe:	4629      	mov	r1, r5
 8008500:	2000      	movs	r0, #0
 8008502:	f858 2b04 	ldr.w	r2, [r8], #4
 8008506:	f8d1 c000 	ldr.w	ip, [r1]
 800850a:	fa1f fe82 	uxth.w	lr, r2
 800850e:	fa1f f38c 	uxth.w	r3, ip
 8008512:	eba3 030e 	sub.w	r3, r3, lr
 8008516:	4403      	add	r3, r0
 8008518:	0c12      	lsrs	r2, r2, #16
 800851a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800851e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008528:	45c1      	cmp	r9, r8
 800852a:	f841 3b04 	str.w	r3, [r1], #4
 800852e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008532:	d2e6      	bcs.n	8008502 <quorem+0xa4>
 8008534:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008538:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800853c:	b922      	cbnz	r2, 8008548 <quorem+0xea>
 800853e:	3b04      	subs	r3, #4
 8008540:	429d      	cmp	r5, r3
 8008542:	461a      	mov	r2, r3
 8008544:	d30b      	bcc.n	800855e <quorem+0x100>
 8008546:	613c      	str	r4, [r7, #16]
 8008548:	3601      	adds	r6, #1
 800854a:	4630      	mov	r0, r6
 800854c:	b003      	add	sp, #12
 800854e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	3b04      	subs	r3, #4
 8008556:	2a00      	cmp	r2, #0
 8008558:	d1cb      	bne.n	80084f2 <quorem+0x94>
 800855a:	3c01      	subs	r4, #1
 800855c:	e7c6      	b.n	80084ec <quorem+0x8e>
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	3b04      	subs	r3, #4
 8008562:	2a00      	cmp	r2, #0
 8008564:	d1ef      	bne.n	8008546 <quorem+0xe8>
 8008566:	3c01      	subs	r4, #1
 8008568:	e7ea      	b.n	8008540 <quorem+0xe2>
 800856a:	2000      	movs	r0, #0
 800856c:	e7ee      	b.n	800854c <quorem+0xee>
	...

08008570 <_dtoa_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	69c7      	ldr	r7, [r0, #28]
 8008576:	b097      	sub	sp, #92	@ 0x5c
 8008578:	ed8d 0b04 	vstr	d0, [sp, #16]
 800857c:	ec55 4b10 	vmov	r4, r5, d0
 8008580:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008582:	9107      	str	r1, [sp, #28]
 8008584:	4681      	mov	r9, r0
 8008586:	920c      	str	r2, [sp, #48]	@ 0x30
 8008588:	9311      	str	r3, [sp, #68]	@ 0x44
 800858a:	b97f      	cbnz	r7, 80085ac <_dtoa_r+0x3c>
 800858c:	2010      	movs	r0, #16
 800858e:	f000 fe09 	bl	80091a4 <malloc>
 8008592:	4602      	mov	r2, r0
 8008594:	f8c9 001c 	str.w	r0, [r9, #28]
 8008598:	b920      	cbnz	r0, 80085a4 <_dtoa_r+0x34>
 800859a:	4ba9      	ldr	r3, [pc, #676]	@ (8008840 <_dtoa_r+0x2d0>)
 800859c:	21ef      	movs	r1, #239	@ 0xef
 800859e:	48a9      	ldr	r0, [pc, #676]	@ (8008844 <_dtoa_r+0x2d4>)
 80085a0:	f001 fcc0 	bl	8009f24 <__assert_func>
 80085a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085a8:	6007      	str	r7, [r0, #0]
 80085aa:	60c7      	str	r7, [r0, #12]
 80085ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085b0:	6819      	ldr	r1, [r3, #0]
 80085b2:	b159      	cbz	r1, 80085cc <_dtoa_r+0x5c>
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	604a      	str	r2, [r1, #4]
 80085b8:	2301      	movs	r3, #1
 80085ba:	4093      	lsls	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
 80085be:	4648      	mov	r0, r9
 80085c0:	f000 fee6 	bl	8009390 <_Bfree>
 80085c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	1e2b      	subs	r3, r5, #0
 80085ce:	bfb9      	ittee	lt
 80085d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085d4:	9305      	strlt	r3, [sp, #20]
 80085d6:	2300      	movge	r3, #0
 80085d8:	6033      	strge	r3, [r6, #0]
 80085da:	9f05      	ldr	r7, [sp, #20]
 80085dc:	4b9a      	ldr	r3, [pc, #616]	@ (8008848 <_dtoa_r+0x2d8>)
 80085de:	bfbc      	itt	lt
 80085e0:	2201      	movlt	r2, #1
 80085e2:	6032      	strlt	r2, [r6, #0]
 80085e4:	43bb      	bics	r3, r7
 80085e6:	d112      	bne.n	800860e <_dtoa_r+0x9e>
 80085e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085f4:	4323      	orrs	r3, r4
 80085f6:	f000 855a 	beq.w	80090ae <_dtoa_r+0xb3e>
 80085fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800885c <_dtoa_r+0x2ec>
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 855c 	beq.w	80090be <_dtoa_r+0xb4e>
 8008606:	f10a 0303 	add.w	r3, sl, #3
 800860a:	f000 bd56 	b.w	80090ba <_dtoa_r+0xb4a>
 800860e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	ec51 0b17 	vmov	r0, r1, d7
 8008618:	2300      	movs	r3, #0
 800861a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800861e:	f7f8 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8008622:	4680      	mov	r8, r0
 8008624:	b158      	cbz	r0, 800863e <_dtoa_r+0xce>
 8008626:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008628:	2301      	movs	r3, #1
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800862e:	b113      	cbz	r3, 8008636 <_dtoa_r+0xc6>
 8008630:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008632:	4b86      	ldr	r3, [pc, #536]	@ (800884c <_dtoa_r+0x2dc>)
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008860 <_dtoa_r+0x2f0>
 800863a:	f000 bd40 	b.w	80090be <_dtoa_r+0xb4e>
 800863e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008642:	aa14      	add	r2, sp, #80	@ 0x50
 8008644:	a915      	add	r1, sp, #84	@ 0x54
 8008646:	4648      	mov	r0, r9
 8008648:	f001 f984 	bl	8009954 <__d2b>
 800864c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008650:	9002      	str	r0, [sp, #8]
 8008652:	2e00      	cmp	r6, #0
 8008654:	d078      	beq.n	8008748 <_dtoa_r+0x1d8>
 8008656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008658:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008664:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008668:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800866c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008670:	4619      	mov	r1, r3
 8008672:	2200      	movs	r2, #0
 8008674:	4b76      	ldr	r3, [pc, #472]	@ (8008850 <_dtoa_r+0x2e0>)
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008828 <_dtoa_r+0x2b8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 ffba 	bl	80005f8 <__aeabi_dmul>
 8008684:	a36a      	add	r3, pc, #424	@ (adr r3, 8008830 <_dtoa_r+0x2c0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fdff 	bl	800028c <__adddf3>
 800868e:	4604      	mov	r4, r0
 8008690:	4630      	mov	r0, r6
 8008692:	460d      	mov	r5, r1
 8008694:	f7f7 ff46 	bl	8000524 <__aeabi_i2d>
 8008698:	a367      	add	r3, pc, #412	@ (adr r3, 8008838 <_dtoa_r+0x2c8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f7 fdef 	bl	800028c <__adddf3>
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	f7f8 fa51 	bl	8000b58 <__aeabi_d2iz>
 80086b6:	2200      	movs	r2, #0
 80086b8:	4607      	mov	r7, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f8 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80086c4:	b140      	cbz	r0, 80086d8 <_dtoa_r+0x168>
 80086c6:	4638      	mov	r0, r7
 80086c8:	f7f7 ff2c 	bl	8000524 <__aeabi_i2d>
 80086cc:	4622      	mov	r2, r4
 80086ce:	462b      	mov	r3, r5
 80086d0:	f7f8 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d4:	b900      	cbnz	r0, 80086d8 <_dtoa_r+0x168>
 80086d6:	3f01      	subs	r7, #1
 80086d8:	2f16      	cmp	r7, #22
 80086da:	d852      	bhi.n	8008782 <_dtoa_r+0x212>
 80086dc:	4b5d      	ldr	r3, [pc, #372]	@ (8008854 <_dtoa_r+0x2e4>)
 80086de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086ea:	f7f8 f9f7 	bl	8000adc <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d049      	beq.n	8008786 <_dtoa_r+0x216>
 80086f2:	3f01      	subs	r7, #1
 80086f4:	2300      	movs	r3, #0
 80086f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80086f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086fa:	1b9b      	subs	r3, r3, r6
 80086fc:	1e5a      	subs	r2, r3, #1
 80086fe:	bf45      	ittet	mi
 8008700:	f1c3 0301 	rsbmi	r3, r3, #1
 8008704:	9300      	strmi	r3, [sp, #0]
 8008706:	2300      	movpl	r3, #0
 8008708:	2300      	movmi	r3, #0
 800870a:	9206      	str	r2, [sp, #24]
 800870c:	bf54      	ite	pl
 800870e:	9300      	strpl	r3, [sp, #0]
 8008710:	9306      	strmi	r3, [sp, #24]
 8008712:	2f00      	cmp	r7, #0
 8008714:	db39      	blt.n	800878a <_dtoa_r+0x21a>
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	970d      	str	r7, [sp, #52]	@ 0x34
 800871a:	443b      	add	r3, r7
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	2300      	movs	r3, #0
 8008720:	9308      	str	r3, [sp, #32]
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	2b09      	cmp	r3, #9
 8008726:	d863      	bhi.n	80087f0 <_dtoa_r+0x280>
 8008728:	2b05      	cmp	r3, #5
 800872a:	bfc4      	itt	gt
 800872c:	3b04      	subgt	r3, #4
 800872e:	9307      	strgt	r3, [sp, #28]
 8008730:	9b07      	ldr	r3, [sp, #28]
 8008732:	f1a3 0302 	sub.w	r3, r3, #2
 8008736:	bfcc      	ite	gt
 8008738:	2400      	movgt	r4, #0
 800873a:	2401      	movle	r4, #1
 800873c:	2b03      	cmp	r3, #3
 800873e:	d863      	bhi.n	8008808 <_dtoa_r+0x298>
 8008740:	e8df f003 	tbb	[pc, r3]
 8008744:	2b375452 	.word	0x2b375452
 8008748:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800874c:	441e      	add	r6, r3
 800874e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008752:	2b20      	cmp	r3, #32
 8008754:	bfc1      	itttt	gt
 8008756:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800875a:	409f      	lslgt	r7, r3
 800875c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008760:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008764:	bfd6      	itet	le
 8008766:	f1c3 0320 	rsble	r3, r3, #32
 800876a:	ea47 0003 	orrgt.w	r0, r7, r3
 800876e:	fa04 f003 	lslle.w	r0, r4, r3
 8008772:	f7f7 fec7 	bl	8000504 <__aeabi_ui2d>
 8008776:	2201      	movs	r2, #1
 8008778:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800877c:	3e01      	subs	r6, #1
 800877e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008780:	e776      	b.n	8008670 <_dtoa_r+0x100>
 8008782:	2301      	movs	r3, #1
 8008784:	e7b7      	b.n	80086f6 <_dtoa_r+0x186>
 8008786:	9010      	str	r0, [sp, #64]	@ 0x40
 8008788:	e7b6      	b.n	80086f8 <_dtoa_r+0x188>
 800878a:	9b00      	ldr	r3, [sp, #0]
 800878c:	1bdb      	subs	r3, r3, r7
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	427b      	negs	r3, r7
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	2300      	movs	r3, #0
 8008796:	930d      	str	r3, [sp, #52]	@ 0x34
 8008798:	e7c3      	b.n	8008722 <_dtoa_r+0x1b2>
 800879a:	2301      	movs	r3, #1
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087a0:	eb07 0b03 	add.w	fp, r7, r3
 80087a4:	f10b 0301 	add.w	r3, fp, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	bfb8      	it	lt
 80087ae:	2301      	movlt	r3, #1
 80087b0:	e006      	b.n	80087c0 <_dtoa_r+0x250>
 80087b2:	2301      	movs	r3, #1
 80087b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dd28      	ble.n	800880e <_dtoa_r+0x29e>
 80087bc:	469b      	mov	fp, r3
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80087c4:	2100      	movs	r1, #0
 80087c6:	2204      	movs	r2, #4
 80087c8:	f102 0514 	add.w	r5, r2, #20
 80087cc:	429d      	cmp	r5, r3
 80087ce:	d926      	bls.n	800881e <_dtoa_r+0x2ae>
 80087d0:	6041      	str	r1, [r0, #4]
 80087d2:	4648      	mov	r0, r9
 80087d4:	f000 fd9c 	bl	8009310 <_Balloc>
 80087d8:	4682      	mov	sl, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	d142      	bne.n	8008864 <_dtoa_r+0x2f4>
 80087de:	4b1e      	ldr	r3, [pc, #120]	@ (8008858 <_dtoa_r+0x2e8>)
 80087e0:	4602      	mov	r2, r0
 80087e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80087e6:	e6da      	b.n	800859e <_dtoa_r+0x2e>
 80087e8:	2300      	movs	r3, #0
 80087ea:	e7e3      	b.n	80087b4 <_dtoa_r+0x244>
 80087ec:	2300      	movs	r3, #0
 80087ee:	e7d5      	b.n	800879c <_dtoa_r+0x22c>
 80087f0:	2401      	movs	r4, #1
 80087f2:	2300      	movs	r3, #0
 80087f4:	9307      	str	r3, [sp, #28]
 80087f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80087f8:	f04f 3bff 	mov.w	fp, #4294967295
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008802:	2312      	movs	r3, #18
 8008804:	920c      	str	r2, [sp, #48]	@ 0x30
 8008806:	e7db      	b.n	80087c0 <_dtoa_r+0x250>
 8008808:	2301      	movs	r3, #1
 800880a:	9309      	str	r3, [sp, #36]	@ 0x24
 800880c:	e7f4      	b.n	80087f8 <_dtoa_r+0x288>
 800880e:	f04f 0b01 	mov.w	fp, #1
 8008812:	f8cd b00c 	str.w	fp, [sp, #12]
 8008816:	465b      	mov	r3, fp
 8008818:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800881c:	e7d0      	b.n	80087c0 <_dtoa_r+0x250>
 800881e:	3101      	adds	r1, #1
 8008820:	0052      	lsls	r2, r2, #1
 8008822:	e7d1      	b.n	80087c8 <_dtoa_r+0x258>
 8008824:	f3af 8000 	nop.w
 8008828:	636f4361 	.word	0x636f4361
 800882c:	3fd287a7 	.word	0x3fd287a7
 8008830:	8b60c8b3 	.word	0x8b60c8b3
 8008834:	3fc68a28 	.word	0x3fc68a28
 8008838:	509f79fb 	.word	0x509f79fb
 800883c:	3fd34413 	.word	0x3fd34413
 8008840:	0800a645 	.word	0x0800a645
 8008844:	0800a65c 	.word	0x0800a65c
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	0800a615 	.word	0x0800a615
 8008850:	3ff80000 	.word	0x3ff80000
 8008854:	0800a7b0 	.word	0x0800a7b0
 8008858:	0800a6b4 	.word	0x0800a6b4
 800885c:	0800a641 	.word	0x0800a641
 8008860:	0800a614 	.word	0x0800a614
 8008864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008868:	6018      	str	r0, [r3, #0]
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	2b0e      	cmp	r3, #14
 800886e:	f200 80a1 	bhi.w	80089b4 <_dtoa_r+0x444>
 8008872:	2c00      	cmp	r4, #0
 8008874:	f000 809e 	beq.w	80089b4 <_dtoa_r+0x444>
 8008878:	2f00      	cmp	r7, #0
 800887a:	dd33      	ble.n	80088e4 <_dtoa_r+0x374>
 800887c:	4b9c      	ldr	r3, [pc, #624]	@ (8008af0 <_dtoa_r+0x580>)
 800887e:	f007 020f 	and.w	r2, r7, #15
 8008882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008886:	ed93 7b00 	vldr	d7, [r3]
 800888a:	05f8      	lsls	r0, r7, #23
 800888c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008894:	d516      	bpl.n	80088c4 <_dtoa_r+0x354>
 8008896:	4b97      	ldr	r3, [pc, #604]	@ (8008af4 <_dtoa_r+0x584>)
 8008898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800889c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088a0:	f7f7 ffd4 	bl	800084c <__aeabi_ddiv>
 80088a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a8:	f004 040f 	and.w	r4, r4, #15
 80088ac:	2603      	movs	r6, #3
 80088ae:	4d91      	ldr	r5, [pc, #580]	@ (8008af4 <_dtoa_r+0x584>)
 80088b0:	b954      	cbnz	r4, 80088c8 <_dtoa_r+0x358>
 80088b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ba:	f7f7 ffc7 	bl	800084c <__aeabi_ddiv>
 80088be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c2:	e028      	b.n	8008916 <_dtoa_r+0x3a6>
 80088c4:	2602      	movs	r6, #2
 80088c6:	e7f2      	b.n	80088ae <_dtoa_r+0x33e>
 80088c8:	07e1      	lsls	r1, r4, #31
 80088ca:	d508      	bpl.n	80088de <_dtoa_r+0x36e>
 80088cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088d4:	f7f7 fe90 	bl	80005f8 <__aeabi_dmul>
 80088d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088dc:	3601      	adds	r6, #1
 80088de:	1064      	asrs	r4, r4, #1
 80088e0:	3508      	adds	r5, #8
 80088e2:	e7e5      	b.n	80088b0 <_dtoa_r+0x340>
 80088e4:	f000 80af 	beq.w	8008a46 <_dtoa_r+0x4d6>
 80088e8:	427c      	negs	r4, r7
 80088ea:	4b81      	ldr	r3, [pc, #516]	@ (8008af0 <_dtoa_r+0x580>)
 80088ec:	4d81      	ldr	r5, [pc, #516]	@ (8008af4 <_dtoa_r+0x584>)
 80088ee:	f004 020f 	and.w	r2, r4, #15
 80088f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008906:	1124      	asrs	r4, r4, #4
 8008908:	2300      	movs	r3, #0
 800890a:	2602      	movs	r6, #2
 800890c:	2c00      	cmp	r4, #0
 800890e:	f040 808f 	bne.w	8008a30 <_dtoa_r+0x4c0>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d3      	bne.n	80088be <_dtoa_r+0x34e>
 8008916:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008918:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8094 	beq.w	8008a4a <_dtoa_r+0x4da>
 8008922:	4b75      	ldr	r3, [pc, #468]	@ (8008af8 <_dtoa_r+0x588>)
 8008924:	2200      	movs	r2, #0
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f8 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800892e:	2800      	cmp	r0, #0
 8008930:	f000 808b 	beq.w	8008a4a <_dtoa_r+0x4da>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8087 	beq.w	8008a4a <_dtoa_r+0x4da>
 800893c:	f1bb 0f00 	cmp.w	fp, #0
 8008940:	dd34      	ble.n	80089ac <_dtoa_r+0x43c>
 8008942:	4620      	mov	r0, r4
 8008944:	4b6d      	ldr	r3, [pc, #436]	@ (8008afc <_dtoa_r+0x58c>)
 8008946:	2200      	movs	r2, #0
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fe55 	bl	80005f8 <__aeabi_dmul>
 800894e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008952:	f107 38ff 	add.w	r8, r7, #4294967295
 8008956:	3601      	adds	r6, #1
 8008958:	465c      	mov	r4, fp
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fde2 	bl	8000524 <__aeabi_i2d>
 8008960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008964:	f7f7 fe48 	bl	80005f8 <__aeabi_dmul>
 8008968:	4b65      	ldr	r3, [pc, #404]	@ (8008b00 <_dtoa_r+0x590>)
 800896a:	2200      	movs	r2, #0
 800896c:	f7f7 fc8e 	bl	800028c <__adddf3>
 8008970:	4605      	mov	r5, r0
 8008972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008976:	2c00      	cmp	r4, #0
 8008978:	d16a      	bne.n	8008a50 <_dtoa_r+0x4e0>
 800897a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897e:	4b61      	ldr	r3, [pc, #388]	@ (8008b04 <_dtoa_r+0x594>)
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fc81 	bl	8000288 <__aeabi_dsub>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800898e:	462a      	mov	r2, r5
 8008990:	4633      	mov	r3, r6
 8008992:	f7f8 f8c1 	bl	8000b18 <__aeabi_dcmpgt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f040 8298 	bne.w	8008ecc <_dtoa_r+0x95c>
 800899c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089a0:	462a      	mov	r2, r5
 80089a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089a6:	f7f8 f899 	bl	8000adc <__aeabi_dcmplt>
 80089aa:	bb38      	cbnz	r0, 80089fc <_dtoa_r+0x48c>
 80089ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80089b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f2c0 8157 	blt.w	8008c6a <_dtoa_r+0x6fa>
 80089bc:	2f0e      	cmp	r7, #14
 80089be:	f300 8154 	bgt.w	8008c6a <_dtoa_r+0x6fa>
 80089c2:	4b4b      	ldr	r3, [pc, #300]	@ (8008af0 <_dtoa_r+0x580>)
 80089c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089c8:	ed93 7b00 	vldr	d7, [r3]
 80089cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	ed8d 7b00 	vstr	d7, [sp]
 80089d4:	f280 80e5 	bge.w	8008ba2 <_dtoa_r+0x632>
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f300 80e1 	bgt.w	8008ba2 <_dtoa_r+0x632>
 80089e0:	d10c      	bne.n	80089fc <_dtoa_r+0x48c>
 80089e2:	4b48      	ldr	r3, [pc, #288]	@ (8008b04 <_dtoa_r+0x594>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	ec51 0b17 	vmov	r0, r1, d7
 80089ea:	f7f7 fe05 	bl	80005f8 <__aeabi_dmul>
 80089ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f2:	f7f8 f887 	bl	8000b04 <__aeabi_dcmpge>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f000 8266 	beq.w	8008ec8 <_dtoa_r+0x958>
 80089fc:	2400      	movs	r4, #0
 80089fe:	4625      	mov	r5, r4
 8008a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a02:	4656      	mov	r6, sl
 8008a04:	ea6f 0803 	mvn.w	r8, r3
 8008a08:	2700      	movs	r7, #0
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4648      	mov	r0, r9
 8008a0e:	f000 fcbf 	bl	8009390 <_Bfree>
 8008a12:	2d00      	cmp	r5, #0
 8008a14:	f000 80bd 	beq.w	8008b92 <_dtoa_r+0x622>
 8008a18:	b12f      	cbz	r7, 8008a26 <_dtoa_r+0x4b6>
 8008a1a:	42af      	cmp	r7, r5
 8008a1c:	d003      	beq.n	8008a26 <_dtoa_r+0x4b6>
 8008a1e:	4639      	mov	r1, r7
 8008a20:	4648      	mov	r0, r9
 8008a22:	f000 fcb5 	bl	8009390 <_Bfree>
 8008a26:	4629      	mov	r1, r5
 8008a28:	4648      	mov	r0, r9
 8008a2a:	f000 fcb1 	bl	8009390 <_Bfree>
 8008a2e:	e0b0      	b.n	8008b92 <_dtoa_r+0x622>
 8008a30:	07e2      	lsls	r2, r4, #31
 8008a32:	d505      	bpl.n	8008a40 <_dtoa_r+0x4d0>
 8008a34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a38:	f7f7 fdde 	bl	80005f8 <__aeabi_dmul>
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	2301      	movs	r3, #1
 8008a40:	1064      	asrs	r4, r4, #1
 8008a42:	3508      	adds	r5, #8
 8008a44:	e762      	b.n	800890c <_dtoa_r+0x39c>
 8008a46:	2602      	movs	r6, #2
 8008a48:	e765      	b.n	8008916 <_dtoa_r+0x3a6>
 8008a4a:	9c03      	ldr	r4, [sp, #12]
 8008a4c:	46b8      	mov	r8, r7
 8008a4e:	e784      	b.n	800895a <_dtoa_r+0x3ea>
 8008a50:	4b27      	ldr	r3, [pc, #156]	@ (8008af0 <_dtoa_r+0x580>)
 8008a52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a5c:	4454      	add	r4, sl
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	d054      	beq.n	8008b0c <_dtoa_r+0x59c>
 8008a62:	4929      	ldr	r1, [pc, #164]	@ (8008b08 <_dtoa_r+0x598>)
 8008a64:	2000      	movs	r0, #0
 8008a66:	f7f7 fef1 	bl	800084c <__aeabi_ddiv>
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	462a      	mov	r2, r5
 8008a6e:	f7f7 fc0b 	bl	8000288 <__aeabi_dsub>
 8008a72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a76:	4656      	mov	r6, sl
 8008a78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a7c:	f7f8 f86c 	bl	8000b58 <__aeabi_d2iz>
 8008a80:	4605      	mov	r5, r0
 8008a82:	f7f7 fd4f 	bl	8000524 <__aeabi_i2d>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	3530      	adds	r5, #48	@ 0x30
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a9c:	f806 5b01 	strb.w	r5, [r6], #1
 8008aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aa4:	f7f8 f81a 	bl	8000adc <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d172      	bne.n	8008b92 <_dtoa_r+0x622>
 8008aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab0:	4911      	ldr	r1, [pc, #68]	@ (8008af8 <_dtoa_r+0x588>)
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008abc:	f7f8 f80e 	bl	8000adc <__aeabi_dcmplt>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f040 80b4 	bne.w	8008c2e <_dtoa_r+0x6be>
 8008ac6:	42a6      	cmp	r6, r4
 8008ac8:	f43f af70 	beq.w	80089ac <_dtoa_r+0x43c>
 8008acc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <_dtoa_r+0x58c>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	4b08      	ldr	r3, [pc, #32]	@ (8008afc <_dtoa_r+0x58c>)
 8008ada:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ade:	2200      	movs	r2, #0
 8008ae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aec:	e7c4      	b.n	8008a78 <_dtoa_r+0x508>
 8008aee:	bf00      	nop
 8008af0:	0800a7b0 	.word	0x0800a7b0
 8008af4:	0800a788 	.word	0x0800a788
 8008af8:	3ff00000 	.word	0x3ff00000
 8008afc:	40240000 	.word	0x40240000
 8008b00:	401c0000 	.word	0x401c0000
 8008b04:	40140000 	.word	0x40140000
 8008b08:	3fe00000 	.word	0x3fe00000
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7f7 fd72 	bl	80005f8 <__aeabi_dmul>
 8008b14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b1a:	4656      	mov	r6, sl
 8008b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b20:	f7f8 f81a 	bl	8000b58 <__aeabi_d2iz>
 8008b24:	4605      	mov	r5, r0
 8008b26:	f7f7 fcfd 	bl	8000524 <__aeabi_i2d>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b32:	f7f7 fba9 	bl	8000288 <__aeabi_dsub>
 8008b36:	3530      	adds	r5, #48	@ 0x30
 8008b38:	f806 5b01 	strb.w	r5, [r6], #1
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	d124      	bne.n	8008b96 <_dtoa_r+0x626>
 8008b4c:	4baf      	ldr	r3, [pc, #700]	@ (8008e0c <_dtoa_r+0x89c>)
 8008b4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b52:	f7f7 fb9b 	bl	800028c <__adddf3>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b5e:	f7f7 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d163      	bne.n	8008c2e <_dtoa_r+0x6be>
 8008b66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b6a:	49a8      	ldr	r1, [pc, #672]	@ (8008e0c <_dtoa_r+0x89c>)
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7f7 fb8b 	bl	8000288 <__aeabi_dsub>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b7a:	f7f7 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f43f af14 	beq.w	80089ac <_dtoa_r+0x43c>
 8008b84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b86:	1e73      	subs	r3, r6, #1
 8008b88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b8e:	2b30      	cmp	r3, #48	@ 0x30
 8008b90:	d0f8      	beq.n	8008b84 <_dtoa_r+0x614>
 8008b92:	4647      	mov	r7, r8
 8008b94:	e03b      	b.n	8008c0e <_dtoa_r+0x69e>
 8008b96:	4b9e      	ldr	r3, [pc, #632]	@ (8008e10 <_dtoa_r+0x8a0>)
 8008b98:	f7f7 fd2e 	bl	80005f8 <__aeabi_dmul>
 8008b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ba0:	e7bc      	b.n	8008b1c <_dtoa_r+0x5ac>
 8008ba2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ba6:	4656      	mov	r6, sl
 8008ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fe4c 	bl	800084c <__aeabi_ddiv>
 8008bb4:	f7f7 ffd0 	bl	8000b58 <__aeabi_d2iz>
 8008bb8:	4680      	mov	r8, r0
 8008bba:	f7f7 fcb3 	bl	8000524 <__aeabi_i2d>
 8008bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008bd2:	f7f7 fb59 	bl	8000288 <__aeabi_dsub>
 8008bd6:	f806 4b01 	strb.w	r4, [r6], #1
 8008bda:	9d03      	ldr	r5, [sp, #12]
 8008bdc:	eba6 040a 	sub.w	r4, r6, sl
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	d133      	bne.n	8008c50 <_dtoa_r+0x6e0>
 8008be8:	f7f7 fb50 	bl	800028c <__adddf3>
 8008bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	f7f7 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8008bf8:	b9c0      	cbnz	r0, 8008c2c <_dtoa_r+0x6bc>
 8008bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4629      	mov	r1, r5
 8008c02:	f7f7 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c06:	b110      	cbz	r0, 8008c0e <_dtoa_r+0x69e>
 8008c08:	f018 0f01 	tst.w	r8, #1
 8008c0c:	d10e      	bne.n	8008c2c <_dtoa_r+0x6bc>
 8008c0e:	9902      	ldr	r1, [sp, #8]
 8008c10:	4648      	mov	r0, r9
 8008c12:	f000 fbbd 	bl	8009390 <_Bfree>
 8008c16:	2300      	movs	r3, #0
 8008c18:	7033      	strb	r3, [r6, #0]
 8008c1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c1c:	3701      	adds	r7, #1
 8008c1e:	601f      	str	r7, [r3, #0]
 8008c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 824b 	beq.w	80090be <_dtoa_r+0xb4e>
 8008c28:	601e      	str	r6, [r3, #0]
 8008c2a:	e248      	b.n	80090be <_dtoa_r+0xb4e>
 8008c2c:	46b8      	mov	r8, r7
 8008c2e:	4633      	mov	r3, r6
 8008c30:	461e      	mov	r6, r3
 8008c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c36:	2a39      	cmp	r2, #57	@ 0x39
 8008c38:	d106      	bne.n	8008c48 <_dtoa_r+0x6d8>
 8008c3a:	459a      	cmp	sl, r3
 8008c3c:	d1f8      	bne.n	8008c30 <_dtoa_r+0x6c0>
 8008c3e:	2230      	movs	r2, #48	@ 0x30
 8008c40:	f108 0801 	add.w	r8, r8, #1
 8008c44:	f88a 2000 	strb.w	r2, [sl]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	3201      	adds	r2, #1
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	e7a0      	b.n	8008b92 <_dtoa_r+0x622>
 8008c50:	4b6f      	ldr	r3, [pc, #444]	@ (8008e10 <_dtoa_r+0x8a0>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	f7f7 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d09f      	beq.n	8008ba8 <_dtoa_r+0x638>
 8008c68:	e7d1      	b.n	8008c0e <_dtoa_r+0x69e>
 8008c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	f000 80ea 	beq.w	8008e46 <_dtoa_r+0x8d6>
 8008c72:	9a07      	ldr	r2, [sp, #28]
 8008c74:	2a01      	cmp	r2, #1
 8008c76:	f300 80cd 	bgt.w	8008e14 <_dtoa_r+0x8a4>
 8008c7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c7c:	2a00      	cmp	r2, #0
 8008c7e:	f000 80c1 	beq.w	8008e04 <_dtoa_r+0x894>
 8008c82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c86:	9c08      	ldr	r4, [sp, #32]
 8008c88:	9e00      	ldr	r6, [sp, #0]
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	441a      	add	r2, r3
 8008c8e:	9200      	str	r2, [sp, #0]
 8008c90:	9a06      	ldr	r2, [sp, #24]
 8008c92:	2101      	movs	r1, #1
 8008c94:	441a      	add	r2, r3
 8008c96:	4648      	mov	r0, r9
 8008c98:	9206      	str	r2, [sp, #24]
 8008c9a:	f000 fc2d 	bl	80094f8 <__i2b>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b166      	cbz	r6, 8008cbc <_dtoa_r+0x74c>
 8008ca2:	9b06      	ldr	r3, [sp, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd09      	ble.n	8008cbc <_dtoa_r+0x74c>
 8008ca8:	42b3      	cmp	r3, r6
 8008caa:	9a00      	ldr	r2, [sp, #0]
 8008cac:	bfa8      	it	ge
 8008cae:	4633      	movge	r3, r6
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	9200      	str	r2, [sp, #0]
 8008cb4:	9a06      	ldr	r2, [sp, #24]
 8008cb6:	1af6      	subs	r6, r6, r3
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	9306      	str	r3, [sp, #24]
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	b30b      	cbz	r3, 8008d04 <_dtoa_r+0x794>
 8008cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80c6 	beq.w	8008e54 <_dtoa_r+0x8e4>
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	f000 80c0 	beq.w	8008e4e <_dtoa_r+0x8de>
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4648      	mov	r0, r9
 8008cd4:	f000 fcc8 	bl	8009668 <__pow5mult>
 8008cd8:	9a02      	ldr	r2, [sp, #8]
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4605      	mov	r5, r0
 8008cde:	4648      	mov	r0, r9
 8008ce0:	f000 fc20 	bl	8009524 <__multiply>
 8008ce4:	9902      	ldr	r1, [sp, #8]
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4648      	mov	r0, r9
 8008cea:	f000 fb51 	bl	8009390 <_Bfree>
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	1b1b      	subs	r3, r3, r4
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	f000 80b1 	beq.w	8008e5a <_dtoa_r+0x8ea>
 8008cf8:	9a08      	ldr	r2, [sp, #32]
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	f000 fcb3 	bl	8009668 <__pow5mult>
 8008d02:	9002      	str	r0, [sp, #8]
 8008d04:	2101      	movs	r1, #1
 8008d06:	4648      	mov	r0, r9
 8008d08:	f000 fbf6 	bl	80094f8 <__i2b>
 8008d0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d0e:	4604      	mov	r4, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 81d8 	beq.w	80090c6 <_dtoa_r+0xb56>
 8008d16:	461a      	mov	r2, r3
 8008d18:	4601      	mov	r1, r0
 8008d1a:	4648      	mov	r0, r9
 8008d1c:	f000 fca4 	bl	8009668 <__pow5mult>
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	4604      	mov	r4, r0
 8008d26:	f300 809f 	bgt.w	8008e68 <_dtoa_r+0x8f8>
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8097 	bne.w	8008e60 <_dtoa_r+0x8f0>
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 8093 	bne.w	8008e64 <_dtoa_r+0x8f4>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d44:	0d1b      	lsrs	r3, r3, #20
 8008d46:	051b      	lsls	r3, r3, #20
 8008d48:	b133      	cbz	r3, 8008d58 <_dtoa_r+0x7e8>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	9b06      	ldr	r3, [sp, #24]
 8008d52:	3301      	adds	r3, #1
 8008d54:	9306      	str	r3, [sp, #24]
 8008d56:	2301      	movs	r3, #1
 8008d58:	9308      	str	r3, [sp, #32]
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 81b8 	beq.w	80090d2 <_dtoa_r+0xb62>
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d68:	6918      	ldr	r0, [r3, #16]
 8008d6a:	f000 fb79 	bl	8009460 <__hi0bits>
 8008d6e:	f1c0 0020 	rsb	r0, r0, #32
 8008d72:	9b06      	ldr	r3, [sp, #24]
 8008d74:	4418      	add	r0, r3
 8008d76:	f010 001f 	ands.w	r0, r0, #31
 8008d7a:	f000 8082 	beq.w	8008e82 <_dtoa_r+0x912>
 8008d7e:	f1c0 0320 	rsb	r3, r0, #32
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	dd73      	ble.n	8008e6e <_dtoa_r+0x8fe>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	f1c0 001c 	rsb	r0, r0, #28
 8008d8c:	4403      	add	r3, r0
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	4403      	add	r3, r0
 8008d94:	4406      	add	r6, r0
 8008d96:	9306      	str	r3, [sp, #24]
 8008d98:	9b00      	ldr	r3, [sp, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dd05      	ble.n	8008daa <_dtoa_r+0x83a>
 8008d9e:	9902      	ldr	r1, [sp, #8]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4648      	mov	r0, r9
 8008da4:	f000 fcba 	bl	800971c <__lshift>
 8008da8:	9002      	str	r0, [sp, #8]
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dd05      	ble.n	8008dbc <_dtoa_r+0x84c>
 8008db0:	4621      	mov	r1, r4
 8008db2:	461a      	mov	r2, r3
 8008db4:	4648      	mov	r0, r9
 8008db6:	f000 fcb1 	bl	800971c <__lshift>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d061      	beq.n	8008e86 <_dtoa_r+0x916>
 8008dc2:	9802      	ldr	r0, [sp, #8]
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f000 fd15 	bl	80097f4 <__mcmp>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	da5b      	bge.n	8008e86 <_dtoa_r+0x916>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9902      	ldr	r1, [sp, #8]
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	f000 fafd 	bl	80093d4 <__multadd>
 8008dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ddc:	9002      	str	r0, [sp, #8]
 8008dde:	f107 38ff 	add.w	r8, r7, #4294967295
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8177 	beq.w	80090d6 <_dtoa_r+0xb66>
 8008de8:	4629      	mov	r1, r5
 8008dea:	2300      	movs	r3, #0
 8008dec:	220a      	movs	r2, #10
 8008dee:	4648      	mov	r0, r9
 8008df0:	f000 faf0 	bl	80093d4 <__multadd>
 8008df4:	f1bb 0f00 	cmp.w	fp, #0
 8008df8:	4605      	mov	r5, r0
 8008dfa:	dc6f      	bgt.n	8008edc <_dtoa_r+0x96c>
 8008dfc:	9b07      	ldr	r3, [sp, #28]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	dc49      	bgt.n	8008e96 <_dtoa_r+0x926>
 8008e02:	e06b      	b.n	8008edc <_dtoa_r+0x96c>
 8008e04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e0a:	e73c      	b.n	8008c86 <_dtoa_r+0x716>
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	40240000 	.word	0x40240000
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	1e5c      	subs	r4, r3, #1
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	db09      	blt.n	8008e32 <_dtoa_r+0x8c2>
 8008e1e:	1b1c      	subs	r4, r3, r4
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f6bf af30 	bge.w	8008c88 <_dtoa_r+0x718>
 8008e28:	9b00      	ldr	r3, [sp, #0]
 8008e2a:	9a03      	ldr	r2, [sp, #12]
 8008e2c:	1a9e      	subs	r6, r3, r2
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e72b      	b.n	8008c8a <_dtoa_r+0x71a>
 8008e32:	9b08      	ldr	r3, [sp, #32]
 8008e34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e36:	9408      	str	r4, [sp, #32]
 8008e38:	1ae3      	subs	r3, r4, r3
 8008e3a:	441a      	add	r2, r3
 8008e3c:	9e00      	ldr	r6, [sp, #0]
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e42:	2400      	movs	r4, #0
 8008e44:	e721      	b.n	8008c8a <_dtoa_r+0x71a>
 8008e46:	9c08      	ldr	r4, [sp, #32]
 8008e48:	9e00      	ldr	r6, [sp, #0]
 8008e4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e4c:	e728      	b.n	8008ca0 <_dtoa_r+0x730>
 8008e4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e52:	e751      	b.n	8008cf8 <_dtoa_r+0x788>
 8008e54:	9a08      	ldr	r2, [sp, #32]
 8008e56:	9902      	ldr	r1, [sp, #8]
 8008e58:	e750      	b.n	8008cfc <_dtoa_r+0x78c>
 8008e5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e5e:	e751      	b.n	8008d04 <_dtoa_r+0x794>
 8008e60:	2300      	movs	r3, #0
 8008e62:	e779      	b.n	8008d58 <_dtoa_r+0x7e8>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	e777      	b.n	8008d58 <_dtoa_r+0x7e8>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	e779      	b.n	8008d62 <_dtoa_r+0x7f2>
 8008e6e:	d093      	beq.n	8008d98 <_dtoa_r+0x828>
 8008e70:	9a00      	ldr	r2, [sp, #0]
 8008e72:	331c      	adds	r3, #28
 8008e74:	441a      	add	r2, r3
 8008e76:	9200      	str	r2, [sp, #0]
 8008e78:	9a06      	ldr	r2, [sp, #24]
 8008e7a:	441a      	add	r2, r3
 8008e7c:	441e      	add	r6, r3
 8008e7e:	9206      	str	r2, [sp, #24]
 8008e80:	e78a      	b.n	8008d98 <_dtoa_r+0x828>
 8008e82:	4603      	mov	r3, r0
 8008e84:	e7f4      	b.n	8008e70 <_dtoa_r+0x900>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	46b8      	mov	r8, r7
 8008e8c:	dc20      	bgt.n	8008ed0 <_dtoa_r+0x960>
 8008e8e:	469b      	mov	fp, r3
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	dd1e      	ble.n	8008ed4 <_dtoa_r+0x964>
 8008e96:	f1bb 0f00 	cmp.w	fp, #0
 8008e9a:	f47f adb1 	bne.w	8008a00 <_dtoa_r+0x490>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	465b      	mov	r3, fp
 8008ea2:	2205      	movs	r2, #5
 8008ea4:	4648      	mov	r0, r9
 8008ea6:	f000 fa95 	bl	80093d4 <__multadd>
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4604      	mov	r4, r0
 8008eae:	9802      	ldr	r0, [sp, #8]
 8008eb0:	f000 fca0 	bl	80097f4 <__mcmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f77f ada3 	ble.w	8008a00 <_dtoa_r+0x490>
 8008eba:	4656      	mov	r6, sl
 8008ebc:	2331      	movs	r3, #49	@ 0x31
 8008ebe:	f806 3b01 	strb.w	r3, [r6], #1
 8008ec2:	f108 0801 	add.w	r8, r8, #1
 8008ec6:	e59f      	b.n	8008a08 <_dtoa_r+0x498>
 8008ec8:	9c03      	ldr	r4, [sp, #12]
 8008eca:	46b8      	mov	r8, r7
 8008ecc:	4625      	mov	r5, r4
 8008ece:	e7f4      	b.n	8008eba <_dtoa_r+0x94a>
 8008ed0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8101 	beq.w	80090de <_dtoa_r+0xb6e>
 8008edc:	2e00      	cmp	r6, #0
 8008ede:	dd05      	ble.n	8008eec <_dtoa_r+0x97c>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4632      	mov	r2, r6
 8008ee4:	4648      	mov	r0, r9
 8008ee6:	f000 fc19 	bl	800971c <__lshift>
 8008eea:	4605      	mov	r5, r0
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d05c      	beq.n	8008fac <_dtoa_r+0xa3c>
 8008ef2:	6869      	ldr	r1, [r5, #4]
 8008ef4:	4648      	mov	r0, r9
 8008ef6:	f000 fa0b 	bl	8009310 <_Balloc>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <_dtoa_r+0x99a>
 8008efe:	4b82      	ldr	r3, [pc, #520]	@ (8009108 <_dtoa_r+0xb98>)
 8008f00:	4602      	mov	r2, r0
 8008f02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f06:	f7ff bb4a 	b.w	800859e <_dtoa_r+0x2e>
 8008f0a:	692a      	ldr	r2, [r5, #16]
 8008f0c:	3202      	adds	r2, #2
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	f105 010c 	add.w	r1, r5, #12
 8008f14:	300c      	adds	r0, #12
 8008f16:	f000 fff7 	bl	8009f08 <memcpy>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4648      	mov	r0, r9
 8008f20:	f000 fbfc 	bl	800971c <__lshift>
 8008f24:	f10a 0301 	add.w	r3, sl, #1
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	eb0a 030b 	add.w	r3, sl, fp
 8008f2e:	9308      	str	r3, [sp, #32]
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	462f      	mov	r7, r5
 8008f38:	9306      	str	r3, [sp, #24]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	9802      	ldr	r0, [sp, #8]
 8008f40:	4621      	mov	r1, r4
 8008f42:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f46:	f7ff fa8a 	bl	800845e <quorem>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	3330      	adds	r3, #48	@ 0x30
 8008f4e:	9003      	str	r0, [sp, #12]
 8008f50:	4639      	mov	r1, r7
 8008f52:	9802      	ldr	r0, [sp, #8]
 8008f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f56:	f000 fc4d 	bl	80097f4 <__mcmp>
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	9004      	str	r0, [sp, #16]
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4648      	mov	r0, r9
 8008f62:	f000 fc63 	bl	800982c <__mdiff>
 8008f66:	68c2      	ldr	r2, [r0, #12]
 8008f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	bb02      	cbnz	r2, 8008fb0 <_dtoa_r+0xa40>
 8008f6e:	4601      	mov	r1, r0
 8008f70:	9802      	ldr	r0, [sp, #8]
 8008f72:	f000 fc3f 	bl	80097f4 <__mcmp>
 8008f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f78:	4602      	mov	r2, r0
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4648      	mov	r0, r9
 8008f7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f82:	f000 fa05 	bl	8009390 <_Bfree>
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f8a:	9e00      	ldr	r6, [sp, #0]
 8008f8c:	ea42 0103 	orr.w	r1, r2, r3
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	4319      	orrs	r1, r3
 8008f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f96:	d10d      	bne.n	8008fb4 <_dtoa_r+0xa44>
 8008f98:	2b39      	cmp	r3, #57	@ 0x39
 8008f9a:	d027      	beq.n	8008fec <_dtoa_r+0xa7c>
 8008f9c:	9a04      	ldr	r2, [sp, #16]
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	dd01      	ble.n	8008fa6 <_dtoa_r+0xa36>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	3331      	adds	r3, #49	@ 0x31
 8008fa6:	f88b 3000 	strb.w	r3, [fp]
 8008faa:	e52e      	b.n	8008a0a <_dtoa_r+0x49a>
 8008fac:	4628      	mov	r0, r5
 8008fae:	e7b9      	b.n	8008f24 <_dtoa_r+0x9b4>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	e7e2      	b.n	8008f7a <_dtoa_r+0xa0a>
 8008fb4:	9904      	ldr	r1, [sp, #16]
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	db04      	blt.n	8008fc4 <_dtoa_r+0xa54>
 8008fba:	9807      	ldr	r0, [sp, #28]
 8008fbc:	4301      	orrs	r1, r0
 8008fbe:	9806      	ldr	r0, [sp, #24]
 8008fc0:	4301      	orrs	r1, r0
 8008fc2:	d120      	bne.n	8009006 <_dtoa_r+0xa96>
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	ddee      	ble.n	8008fa6 <_dtoa_r+0xa36>
 8008fc8:	9902      	ldr	r1, [sp, #8]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	4648      	mov	r0, r9
 8008fd0:	f000 fba4 	bl	800971c <__lshift>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	9002      	str	r0, [sp, #8]
 8008fd8:	f000 fc0c 	bl	80097f4 <__mcmp>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	9b00      	ldr	r3, [sp, #0]
 8008fe0:	dc02      	bgt.n	8008fe8 <_dtoa_r+0xa78>
 8008fe2:	d1e0      	bne.n	8008fa6 <_dtoa_r+0xa36>
 8008fe4:	07da      	lsls	r2, r3, #31
 8008fe6:	d5de      	bpl.n	8008fa6 <_dtoa_r+0xa36>
 8008fe8:	2b39      	cmp	r3, #57	@ 0x39
 8008fea:	d1da      	bne.n	8008fa2 <_dtoa_r+0xa32>
 8008fec:	2339      	movs	r3, #57	@ 0x39
 8008fee:	f88b 3000 	strb.w	r3, [fp]
 8008ff2:	4633      	mov	r3, r6
 8008ff4:	461e      	mov	r6, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ffc:	2a39      	cmp	r2, #57	@ 0x39
 8008ffe:	d04e      	beq.n	800909e <_dtoa_r+0xb2e>
 8009000:	3201      	adds	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
 8009004:	e501      	b.n	8008a0a <_dtoa_r+0x49a>
 8009006:	2a00      	cmp	r2, #0
 8009008:	dd03      	ble.n	8009012 <_dtoa_r+0xaa2>
 800900a:	2b39      	cmp	r3, #57	@ 0x39
 800900c:	d0ee      	beq.n	8008fec <_dtoa_r+0xa7c>
 800900e:	3301      	adds	r3, #1
 8009010:	e7c9      	b.n	8008fa6 <_dtoa_r+0xa36>
 8009012:	9a00      	ldr	r2, [sp, #0]
 8009014:	9908      	ldr	r1, [sp, #32]
 8009016:	f802 3c01 	strb.w	r3, [r2, #-1]
 800901a:	428a      	cmp	r2, r1
 800901c:	d028      	beq.n	8009070 <_dtoa_r+0xb00>
 800901e:	9902      	ldr	r1, [sp, #8]
 8009020:	2300      	movs	r3, #0
 8009022:	220a      	movs	r2, #10
 8009024:	4648      	mov	r0, r9
 8009026:	f000 f9d5 	bl	80093d4 <__multadd>
 800902a:	42af      	cmp	r7, r5
 800902c:	9002      	str	r0, [sp, #8]
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	f04f 020a 	mov.w	r2, #10
 8009036:	4639      	mov	r1, r7
 8009038:	4648      	mov	r0, r9
 800903a:	d107      	bne.n	800904c <_dtoa_r+0xadc>
 800903c:	f000 f9ca 	bl	80093d4 <__multadd>
 8009040:	4607      	mov	r7, r0
 8009042:	4605      	mov	r5, r0
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	e777      	b.n	8008f3c <_dtoa_r+0x9cc>
 800904c:	f000 f9c2 	bl	80093d4 <__multadd>
 8009050:	4629      	mov	r1, r5
 8009052:	4607      	mov	r7, r0
 8009054:	2300      	movs	r3, #0
 8009056:	220a      	movs	r2, #10
 8009058:	4648      	mov	r0, r9
 800905a:	f000 f9bb 	bl	80093d4 <__multadd>
 800905e:	4605      	mov	r5, r0
 8009060:	e7f0      	b.n	8009044 <_dtoa_r+0xad4>
 8009062:	f1bb 0f00 	cmp.w	fp, #0
 8009066:	bfcc      	ite	gt
 8009068:	465e      	movgt	r6, fp
 800906a:	2601      	movle	r6, #1
 800906c:	4456      	add	r6, sl
 800906e:	2700      	movs	r7, #0
 8009070:	9902      	ldr	r1, [sp, #8]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	2201      	movs	r2, #1
 8009076:	4648      	mov	r0, r9
 8009078:	f000 fb50 	bl	800971c <__lshift>
 800907c:	4621      	mov	r1, r4
 800907e:	9002      	str	r0, [sp, #8]
 8009080:	f000 fbb8 	bl	80097f4 <__mcmp>
 8009084:	2800      	cmp	r0, #0
 8009086:	dcb4      	bgt.n	8008ff2 <_dtoa_r+0xa82>
 8009088:	d102      	bne.n	8009090 <_dtoa_r+0xb20>
 800908a:	9b00      	ldr	r3, [sp, #0]
 800908c:	07db      	lsls	r3, r3, #31
 800908e:	d4b0      	bmi.n	8008ff2 <_dtoa_r+0xa82>
 8009090:	4633      	mov	r3, r6
 8009092:	461e      	mov	r6, r3
 8009094:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009098:	2a30      	cmp	r2, #48	@ 0x30
 800909a:	d0fa      	beq.n	8009092 <_dtoa_r+0xb22>
 800909c:	e4b5      	b.n	8008a0a <_dtoa_r+0x49a>
 800909e:	459a      	cmp	sl, r3
 80090a0:	d1a8      	bne.n	8008ff4 <_dtoa_r+0xa84>
 80090a2:	2331      	movs	r3, #49	@ 0x31
 80090a4:	f108 0801 	add.w	r8, r8, #1
 80090a8:	f88a 3000 	strb.w	r3, [sl]
 80090ac:	e4ad      	b.n	8008a0a <_dtoa_r+0x49a>
 80090ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800910c <_dtoa_r+0xb9c>
 80090b4:	b11b      	cbz	r3, 80090be <_dtoa_r+0xb4e>
 80090b6:	f10a 0308 	add.w	r3, sl, #8
 80090ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	4650      	mov	r0, sl
 80090c0:	b017      	add	sp, #92	@ 0x5c
 80090c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	f77f ae2e 	ble.w	8008d2a <_dtoa_r+0x7ba>
 80090ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	2001      	movs	r0, #1
 80090d4:	e64d      	b.n	8008d72 <_dtoa_r+0x802>
 80090d6:	f1bb 0f00 	cmp.w	fp, #0
 80090da:	f77f aed9 	ble.w	8008e90 <_dtoa_r+0x920>
 80090de:	4656      	mov	r6, sl
 80090e0:	9802      	ldr	r0, [sp, #8]
 80090e2:	4621      	mov	r1, r4
 80090e4:	f7ff f9bb 	bl	800845e <quorem>
 80090e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80090ec:	f806 3b01 	strb.w	r3, [r6], #1
 80090f0:	eba6 020a 	sub.w	r2, r6, sl
 80090f4:	4593      	cmp	fp, r2
 80090f6:	ddb4      	ble.n	8009062 <_dtoa_r+0xaf2>
 80090f8:	9902      	ldr	r1, [sp, #8]
 80090fa:	2300      	movs	r3, #0
 80090fc:	220a      	movs	r2, #10
 80090fe:	4648      	mov	r0, r9
 8009100:	f000 f968 	bl	80093d4 <__multadd>
 8009104:	9002      	str	r0, [sp, #8]
 8009106:	e7eb      	b.n	80090e0 <_dtoa_r+0xb70>
 8009108:	0800a6b4 	.word	0x0800a6b4
 800910c:	0800a638 	.word	0x0800a638

08009110 <_free_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4605      	mov	r5, r0
 8009114:	2900      	cmp	r1, #0
 8009116:	d041      	beq.n	800919c <_free_r+0x8c>
 8009118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911c:	1f0c      	subs	r4, r1, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfb8      	it	lt
 8009122:	18e4      	addlt	r4, r4, r3
 8009124:	f000 f8e8 	bl	80092f8 <__malloc_lock>
 8009128:	4a1d      	ldr	r2, [pc, #116]	@ (80091a0 <_free_r+0x90>)
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	b933      	cbnz	r3, 800913c <_free_r+0x2c>
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6014      	str	r4, [r2, #0]
 8009132:	4628      	mov	r0, r5
 8009134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009138:	f000 b8e4 	b.w	8009304 <__malloc_unlock>
 800913c:	42a3      	cmp	r3, r4
 800913e:	d908      	bls.n	8009152 <_free_r+0x42>
 8009140:	6820      	ldr	r0, [r4, #0]
 8009142:	1821      	adds	r1, r4, r0
 8009144:	428b      	cmp	r3, r1
 8009146:	bf01      	itttt	eq
 8009148:	6819      	ldreq	r1, [r3, #0]
 800914a:	685b      	ldreq	r3, [r3, #4]
 800914c:	1809      	addeq	r1, r1, r0
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	e7ed      	b.n	800912e <_free_r+0x1e>
 8009152:	461a      	mov	r2, r3
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	b10b      	cbz	r3, 800915c <_free_r+0x4c>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d9fa      	bls.n	8009152 <_free_r+0x42>
 800915c:	6811      	ldr	r1, [r2, #0]
 800915e:	1850      	adds	r0, r2, r1
 8009160:	42a0      	cmp	r0, r4
 8009162:	d10b      	bne.n	800917c <_free_r+0x6c>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	4401      	add	r1, r0
 8009168:	1850      	adds	r0, r2, r1
 800916a:	4283      	cmp	r3, r0
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	d1e0      	bne.n	8009132 <_free_r+0x22>
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	6053      	str	r3, [r2, #4]
 8009176:	4408      	add	r0, r1
 8009178:	6010      	str	r0, [r2, #0]
 800917a:	e7da      	b.n	8009132 <_free_r+0x22>
 800917c:	d902      	bls.n	8009184 <_free_r+0x74>
 800917e:	230c      	movs	r3, #12
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	e7d6      	b.n	8009132 <_free_r+0x22>
 8009184:	6820      	ldr	r0, [r4, #0]
 8009186:	1821      	adds	r1, r4, r0
 8009188:	428b      	cmp	r3, r1
 800918a:	bf04      	itt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	bf04      	itt	eq
 8009194:	1809      	addeq	r1, r1, r0
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	6054      	str	r4, [r2, #4]
 800919a:	e7ca      	b.n	8009132 <_free_r+0x22>
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	bf00      	nop
 80091a0:	20000610 	.word	0x20000610

080091a4 <malloc>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	@ (80091b0 <malloc+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f000 b825 	b.w	80091f8 <_malloc_r>
 80091ae:	bf00      	nop
 80091b0:	20000024 	.word	0x20000024

080091b4 <sbrk_aligned>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4e0f      	ldr	r6, [pc, #60]	@ (80091f4 <sbrk_aligned+0x40>)
 80091b8:	460c      	mov	r4, r1
 80091ba:	6831      	ldr	r1, [r6, #0]
 80091bc:	4605      	mov	r5, r0
 80091be:	b911      	cbnz	r1, 80091c6 <sbrk_aligned+0x12>
 80091c0:	f000 fe92 	bl	8009ee8 <_sbrk_r>
 80091c4:	6030      	str	r0, [r6, #0]
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 fe8d 	bl	8009ee8 <_sbrk_r>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d103      	bne.n	80091da <sbrk_aligned+0x26>
 80091d2:	f04f 34ff 	mov.w	r4, #4294967295
 80091d6:	4620      	mov	r0, r4
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	1cc4      	adds	r4, r0, #3
 80091dc:	f024 0403 	bic.w	r4, r4, #3
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d0f8      	beq.n	80091d6 <sbrk_aligned+0x22>
 80091e4:	1a21      	subs	r1, r4, r0
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 fe7e 	bl	8009ee8 <_sbrk_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	d1f2      	bne.n	80091d6 <sbrk_aligned+0x22>
 80091f0:	e7ef      	b.n	80091d2 <sbrk_aligned+0x1e>
 80091f2:	bf00      	nop
 80091f4:	2000060c 	.word	0x2000060c

080091f8 <_malloc_r>:
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	1ccd      	adds	r5, r1, #3
 80091fe:	f025 0503 	bic.w	r5, r5, #3
 8009202:	3508      	adds	r5, #8
 8009204:	2d0c      	cmp	r5, #12
 8009206:	bf38      	it	cc
 8009208:	250c      	movcc	r5, #12
 800920a:	2d00      	cmp	r5, #0
 800920c:	4606      	mov	r6, r0
 800920e:	db01      	blt.n	8009214 <_malloc_r+0x1c>
 8009210:	42a9      	cmp	r1, r5
 8009212:	d904      	bls.n	800921e <_malloc_r+0x26>
 8009214:	230c      	movs	r3, #12
 8009216:	6033      	str	r3, [r6, #0]
 8009218:	2000      	movs	r0, #0
 800921a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092f4 <_malloc_r+0xfc>
 8009222:	f000 f869 	bl	80092f8 <__malloc_lock>
 8009226:	f8d8 3000 	ldr.w	r3, [r8]
 800922a:	461c      	mov	r4, r3
 800922c:	bb44      	cbnz	r4, 8009280 <_malloc_r+0x88>
 800922e:	4629      	mov	r1, r5
 8009230:	4630      	mov	r0, r6
 8009232:	f7ff ffbf 	bl	80091b4 <sbrk_aligned>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	4604      	mov	r4, r0
 800923a:	d158      	bne.n	80092ee <_malloc_r+0xf6>
 800923c:	f8d8 4000 	ldr.w	r4, [r8]
 8009240:	4627      	mov	r7, r4
 8009242:	2f00      	cmp	r7, #0
 8009244:	d143      	bne.n	80092ce <_malloc_r+0xd6>
 8009246:	2c00      	cmp	r4, #0
 8009248:	d04b      	beq.n	80092e2 <_malloc_r+0xea>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	4639      	mov	r1, r7
 800924e:	4630      	mov	r0, r6
 8009250:	eb04 0903 	add.w	r9, r4, r3
 8009254:	f000 fe48 	bl	8009ee8 <_sbrk_r>
 8009258:	4581      	cmp	r9, r0
 800925a:	d142      	bne.n	80092e2 <_malloc_r+0xea>
 800925c:	6821      	ldr	r1, [r4, #0]
 800925e:	1a6d      	subs	r5, r5, r1
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff ffa6 	bl	80091b4 <sbrk_aligned>
 8009268:	3001      	adds	r0, #1
 800926a:	d03a      	beq.n	80092e2 <_malloc_r+0xea>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	442b      	add	r3, r5
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	f8d8 3000 	ldr.w	r3, [r8]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	bb62      	cbnz	r2, 80092d4 <_malloc_r+0xdc>
 800927a:	f8c8 7000 	str.w	r7, [r8]
 800927e:	e00f      	b.n	80092a0 <_malloc_r+0xa8>
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	1b52      	subs	r2, r2, r5
 8009284:	d420      	bmi.n	80092c8 <_malloc_r+0xd0>
 8009286:	2a0b      	cmp	r2, #11
 8009288:	d917      	bls.n	80092ba <_malloc_r+0xc2>
 800928a:	1961      	adds	r1, r4, r5
 800928c:	42a3      	cmp	r3, r4
 800928e:	6025      	str	r5, [r4, #0]
 8009290:	bf18      	it	ne
 8009292:	6059      	strne	r1, [r3, #4]
 8009294:	6863      	ldr	r3, [r4, #4]
 8009296:	bf08      	it	eq
 8009298:	f8c8 1000 	streq.w	r1, [r8]
 800929c:	5162      	str	r2, [r4, r5]
 800929e:	604b      	str	r3, [r1, #4]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f82f 	bl	8009304 <__malloc_unlock>
 80092a6:	f104 000b 	add.w	r0, r4, #11
 80092aa:	1d23      	adds	r3, r4, #4
 80092ac:	f020 0007 	bic.w	r0, r0, #7
 80092b0:	1ac2      	subs	r2, r0, r3
 80092b2:	bf1c      	itt	ne
 80092b4:	1a1b      	subne	r3, r3, r0
 80092b6:	50a3      	strne	r3, [r4, r2]
 80092b8:	e7af      	b.n	800921a <_malloc_r+0x22>
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	42a3      	cmp	r3, r4
 80092be:	bf0c      	ite	eq
 80092c0:	f8c8 2000 	streq.w	r2, [r8]
 80092c4:	605a      	strne	r2, [r3, #4]
 80092c6:	e7eb      	b.n	80092a0 <_malloc_r+0xa8>
 80092c8:	4623      	mov	r3, r4
 80092ca:	6864      	ldr	r4, [r4, #4]
 80092cc:	e7ae      	b.n	800922c <_malloc_r+0x34>
 80092ce:	463c      	mov	r4, r7
 80092d0:	687f      	ldr	r7, [r7, #4]
 80092d2:	e7b6      	b.n	8009242 <_malloc_r+0x4a>
 80092d4:	461a      	mov	r2, r3
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	d1fb      	bne.n	80092d4 <_malloc_r+0xdc>
 80092dc:	2300      	movs	r3, #0
 80092de:	6053      	str	r3, [r2, #4]
 80092e0:	e7de      	b.n	80092a0 <_malloc_r+0xa8>
 80092e2:	230c      	movs	r3, #12
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	4630      	mov	r0, r6
 80092e8:	f000 f80c 	bl	8009304 <__malloc_unlock>
 80092ec:	e794      	b.n	8009218 <_malloc_r+0x20>
 80092ee:	6005      	str	r5, [r0, #0]
 80092f0:	e7d6      	b.n	80092a0 <_malloc_r+0xa8>
 80092f2:	bf00      	nop
 80092f4:	20000610 	.word	0x20000610

080092f8 <__malloc_lock>:
 80092f8:	4801      	ldr	r0, [pc, #4]	@ (8009300 <__malloc_lock+0x8>)
 80092fa:	f7ff b8ae 	b.w	800845a <__retarget_lock_acquire_recursive>
 80092fe:	bf00      	nop
 8009300:	20000608 	.word	0x20000608

08009304 <__malloc_unlock>:
 8009304:	4801      	ldr	r0, [pc, #4]	@ (800930c <__malloc_unlock+0x8>)
 8009306:	f7ff b8a9 	b.w	800845c <__retarget_lock_release_recursive>
 800930a:	bf00      	nop
 800930c:	20000608 	.word	0x20000608

08009310 <_Balloc>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	69c6      	ldr	r6, [r0, #28]
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	b976      	cbnz	r6, 8009338 <_Balloc+0x28>
 800931a:	2010      	movs	r0, #16
 800931c:	f7ff ff42 	bl	80091a4 <malloc>
 8009320:	4602      	mov	r2, r0
 8009322:	61e0      	str	r0, [r4, #28]
 8009324:	b920      	cbnz	r0, 8009330 <_Balloc+0x20>
 8009326:	4b18      	ldr	r3, [pc, #96]	@ (8009388 <_Balloc+0x78>)
 8009328:	4818      	ldr	r0, [pc, #96]	@ (800938c <_Balloc+0x7c>)
 800932a:	216b      	movs	r1, #107	@ 0x6b
 800932c:	f000 fdfa 	bl	8009f24 <__assert_func>
 8009330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009334:	6006      	str	r6, [r0, #0]
 8009336:	60c6      	str	r6, [r0, #12]
 8009338:	69e6      	ldr	r6, [r4, #28]
 800933a:	68f3      	ldr	r3, [r6, #12]
 800933c:	b183      	cbz	r3, 8009360 <_Balloc+0x50>
 800933e:	69e3      	ldr	r3, [r4, #28]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009346:	b9b8      	cbnz	r0, 8009378 <_Balloc+0x68>
 8009348:	2101      	movs	r1, #1
 800934a:	fa01 f605 	lsl.w	r6, r1, r5
 800934e:	1d72      	adds	r2, r6, #5
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fe04 	bl	8009f60 <_calloc_r>
 8009358:	b160      	cbz	r0, 8009374 <_Balloc+0x64>
 800935a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800935e:	e00e      	b.n	800937e <_Balloc+0x6e>
 8009360:	2221      	movs	r2, #33	@ 0x21
 8009362:	2104      	movs	r1, #4
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fdfb 	bl	8009f60 <_calloc_r>
 800936a:	69e3      	ldr	r3, [r4, #28]
 800936c:	60f0      	str	r0, [r6, #12]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e4      	bne.n	800933e <_Balloc+0x2e>
 8009374:	2000      	movs	r0, #0
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	6802      	ldr	r2, [r0, #0]
 800937a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800937e:	2300      	movs	r3, #0
 8009380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009384:	e7f7      	b.n	8009376 <_Balloc+0x66>
 8009386:	bf00      	nop
 8009388:	0800a645 	.word	0x0800a645
 800938c:	0800a6c5 	.word	0x0800a6c5

08009390 <_Bfree>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	69c6      	ldr	r6, [r0, #28]
 8009394:	4605      	mov	r5, r0
 8009396:	460c      	mov	r4, r1
 8009398:	b976      	cbnz	r6, 80093b8 <_Bfree+0x28>
 800939a:	2010      	movs	r0, #16
 800939c:	f7ff ff02 	bl	80091a4 <malloc>
 80093a0:	4602      	mov	r2, r0
 80093a2:	61e8      	str	r0, [r5, #28]
 80093a4:	b920      	cbnz	r0, 80093b0 <_Bfree+0x20>
 80093a6:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <_Bfree+0x3c>)
 80093a8:	4809      	ldr	r0, [pc, #36]	@ (80093d0 <_Bfree+0x40>)
 80093aa:	218f      	movs	r1, #143	@ 0x8f
 80093ac:	f000 fdba 	bl	8009f24 <__assert_func>
 80093b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093b4:	6006      	str	r6, [r0, #0]
 80093b6:	60c6      	str	r6, [r0, #12]
 80093b8:	b13c      	cbz	r4, 80093ca <_Bfree+0x3a>
 80093ba:	69eb      	ldr	r3, [r5, #28]
 80093bc:	6862      	ldr	r2, [r4, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c4:	6021      	str	r1, [r4, #0]
 80093c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	0800a645 	.word	0x0800a645
 80093d0:	0800a6c5 	.word	0x0800a6c5

080093d4 <__multadd>:
 80093d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d8:	690d      	ldr	r5, [r1, #16]
 80093da:	4607      	mov	r7, r0
 80093dc:	460c      	mov	r4, r1
 80093de:	461e      	mov	r6, r3
 80093e0:	f101 0c14 	add.w	ip, r1, #20
 80093e4:	2000      	movs	r0, #0
 80093e6:	f8dc 3000 	ldr.w	r3, [ip]
 80093ea:	b299      	uxth	r1, r3
 80093ec:	fb02 6101 	mla	r1, r2, r1, r6
 80093f0:	0c1e      	lsrs	r6, r3, #16
 80093f2:	0c0b      	lsrs	r3, r1, #16
 80093f4:	fb02 3306 	mla	r3, r2, r6, r3
 80093f8:	b289      	uxth	r1, r1
 80093fa:	3001      	adds	r0, #1
 80093fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009400:	4285      	cmp	r5, r0
 8009402:	f84c 1b04 	str.w	r1, [ip], #4
 8009406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800940a:	dcec      	bgt.n	80093e6 <__multadd+0x12>
 800940c:	b30e      	cbz	r6, 8009452 <__multadd+0x7e>
 800940e:	68a3      	ldr	r3, [r4, #8]
 8009410:	42ab      	cmp	r3, r5
 8009412:	dc19      	bgt.n	8009448 <__multadd+0x74>
 8009414:	6861      	ldr	r1, [r4, #4]
 8009416:	4638      	mov	r0, r7
 8009418:	3101      	adds	r1, #1
 800941a:	f7ff ff79 	bl	8009310 <_Balloc>
 800941e:	4680      	mov	r8, r0
 8009420:	b928      	cbnz	r0, 800942e <__multadd+0x5a>
 8009422:	4602      	mov	r2, r0
 8009424:	4b0c      	ldr	r3, [pc, #48]	@ (8009458 <__multadd+0x84>)
 8009426:	480d      	ldr	r0, [pc, #52]	@ (800945c <__multadd+0x88>)
 8009428:	21ba      	movs	r1, #186	@ 0xba
 800942a:	f000 fd7b 	bl	8009f24 <__assert_func>
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	3202      	adds	r2, #2
 8009432:	f104 010c 	add.w	r1, r4, #12
 8009436:	0092      	lsls	r2, r2, #2
 8009438:	300c      	adds	r0, #12
 800943a:	f000 fd65 	bl	8009f08 <memcpy>
 800943e:	4621      	mov	r1, r4
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ffa5 	bl	8009390 <_Bfree>
 8009446:	4644      	mov	r4, r8
 8009448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800944c:	3501      	adds	r5, #1
 800944e:	615e      	str	r6, [r3, #20]
 8009450:	6125      	str	r5, [r4, #16]
 8009452:	4620      	mov	r0, r4
 8009454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009458:	0800a6b4 	.word	0x0800a6b4
 800945c:	0800a6c5 	.word	0x0800a6c5

08009460 <__hi0bits>:
 8009460:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009464:	4603      	mov	r3, r0
 8009466:	bf36      	itet	cc
 8009468:	0403      	lslcc	r3, r0, #16
 800946a:	2000      	movcs	r0, #0
 800946c:	2010      	movcc	r0, #16
 800946e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009472:	bf3c      	itt	cc
 8009474:	021b      	lslcc	r3, r3, #8
 8009476:	3008      	addcc	r0, #8
 8009478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800947c:	bf3c      	itt	cc
 800947e:	011b      	lslcc	r3, r3, #4
 8009480:	3004      	addcc	r0, #4
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009486:	bf3c      	itt	cc
 8009488:	009b      	lslcc	r3, r3, #2
 800948a:	3002      	addcc	r0, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	db05      	blt.n	800949c <__hi0bits+0x3c>
 8009490:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009494:	f100 0001 	add.w	r0, r0, #1
 8009498:	bf08      	it	eq
 800949a:	2020      	moveq	r0, #32
 800949c:	4770      	bx	lr

0800949e <__lo0bits>:
 800949e:	6803      	ldr	r3, [r0, #0]
 80094a0:	4602      	mov	r2, r0
 80094a2:	f013 0007 	ands.w	r0, r3, #7
 80094a6:	d00b      	beq.n	80094c0 <__lo0bits+0x22>
 80094a8:	07d9      	lsls	r1, r3, #31
 80094aa:	d421      	bmi.n	80094f0 <__lo0bits+0x52>
 80094ac:	0798      	lsls	r0, r3, #30
 80094ae:	bf49      	itett	mi
 80094b0:	085b      	lsrmi	r3, r3, #1
 80094b2:	089b      	lsrpl	r3, r3, #2
 80094b4:	2001      	movmi	r0, #1
 80094b6:	6013      	strmi	r3, [r2, #0]
 80094b8:	bf5c      	itt	pl
 80094ba:	6013      	strpl	r3, [r2, #0]
 80094bc:	2002      	movpl	r0, #2
 80094be:	4770      	bx	lr
 80094c0:	b299      	uxth	r1, r3
 80094c2:	b909      	cbnz	r1, 80094c8 <__lo0bits+0x2a>
 80094c4:	0c1b      	lsrs	r3, r3, #16
 80094c6:	2010      	movs	r0, #16
 80094c8:	b2d9      	uxtb	r1, r3
 80094ca:	b909      	cbnz	r1, 80094d0 <__lo0bits+0x32>
 80094cc:	3008      	adds	r0, #8
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	0719      	lsls	r1, r3, #28
 80094d2:	bf04      	itt	eq
 80094d4:	091b      	lsreq	r3, r3, #4
 80094d6:	3004      	addeq	r0, #4
 80094d8:	0799      	lsls	r1, r3, #30
 80094da:	bf04      	itt	eq
 80094dc:	089b      	lsreq	r3, r3, #2
 80094de:	3002      	addeq	r0, #2
 80094e0:	07d9      	lsls	r1, r3, #31
 80094e2:	d403      	bmi.n	80094ec <__lo0bits+0x4e>
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	f100 0001 	add.w	r0, r0, #1
 80094ea:	d003      	beq.n	80094f4 <__lo0bits+0x56>
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	4770      	bx	lr
 80094f0:	2000      	movs	r0, #0
 80094f2:	4770      	bx	lr
 80094f4:	2020      	movs	r0, #32
 80094f6:	4770      	bx	lr

080094f8 <__i2b>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	460c      	mov	r4, r1
 80094fc:	2101      	movs	r1, #1
 80094fe:	f7ff ff07 	bl	8009310 <_Balloc>
 8009502:	4602      	mov	r2, r0
 8009504:	b928      	cbnz	r0, 8009512 <__i2b+0x1a>
 8009506:	4b05      	ldr	r3, [pc, #20]	@ (800951c <__i2b+0x24>)
 8009508:	4805      	ldr	r0, [pc, #20]	@ (8009520 <__i2b+0x28>)
 800950a:	f240 1145 	movw	r1, #325	@ 0x145
 800950e:	f000 fd09 	bl	8009f24 <__assert_func>
 8009512:	2301      	movs	r3, #1
 8009514:	6144      	str	r4, [r0, #20]
 8009516:	6103      	str	r3, [r0, #16]
 8009518:	bd10      	pop	{r4, pc}
 800951a:	bf00      	nop
 800951c:	0800a6b4 	.word	0x0800a6b4
 8009520:	0800a6c5 	.word	0x0800a6c5

08009524 <__multiply>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	4617      	mov	r7, r2
 800952a:	690a      	ldr	r2, [r1, #16]
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	429a      	cmp	r2, r3
 8009530:	bfa8      	it	ge
 8009532:	463b      	movge	r3, r7
 8009534:	4689      	mov	r9, r1
 8009536:	bfa4      	itt	ge
 8009538:	460f      	movge	r7, r1
 800953a:	4699      	movge	r9, r3
 800953c:	693d      	ldr	r5, [r7, #16]
 800953e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	eb05 060a 	add.w	r6, r5, sl
 800954a:	42b3      	cmp	r3, r6
 800954c:	b085      	sub	sp, #20
 800954e:	bfb8      	it	lt
 8009550:	3101      	addlt	r1, #1
 8009552:	f7ff fedd 	bl	8009310 <_Balloc>
 8009556:	b930      	cbnz	r0, 8009566 <__multiply+0x42>
 8009558:	4602      	mov	r2, r0
 800955a:	4b41      	ldr	r3, [pc, #260]	@ (8009660 <__multiply+0x13c>)
 800955c:	4841      	ldr	r0, [pc, #260]	@ (8009664 <__multiply+0x140>)
 800955e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009562:	f000 fcdf 	bl	8009f24 <__assert_func>
 8009566:	f100 0414 	add.w	r4, r0, #20
 800956a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800956e:	4623      	mov	r3, r4
 8009570:	2200      	movs	r2, #0
 8009572:	4573      	cmp	r3, lr
 8009574:	d320      	bcc.n	80095b8 <__multiply+0x94>
 8009576:	f107 0814 	add.w	r8, r7, #20
 800957a:	f109 0114 	add.w	r1, r9, #20
 800957e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009582:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009586:	9302      	str	r3, [sp, #8]
 8009588:	1beb      	subs	r3, r5, r7
 800958a:	3b15      	subs	r3, #21
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	3715      	adds	r7, #21
 8009594:	42bd      	cmp	r5, r7
 8009596:	bf38      	it	cc
 8009598:	2304      	movcc	r3, #4
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	9103      	str	r1, [sp, #12]
 80095a0:	428b      	cmp	r3, r1
 80095a2:	d80c      	bhi.n	80095be <__multiply+0x9a>
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	dd03      	ble.n	80095b0 <__multiply+0x8c>
 80095a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d055      	beq.n	800965c <__multiply+0x138>
 80095b0:	6106      	str	r6, [r0, #16]
 80095b2:	b005      	add	sp, #20
 80095b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b8:	f843 2b04 	str.w	r2, [r3], #4
 80095bc:	e7d9      	b.n	8009572 <__multiply+0x4e>
 80095be:	f8b1 a000 	ldrh.w	sl, [r1]
 80095c2:	f1ba 0f00 	cmp.w	sl, #0
 80095c6:	d01f      	beq.n	8009608 <__multiply+0xe4>
 80095c8:	46c4      	mov	ip, r8
 80095ca:	46a1      	mov	r9, r4
 80095cc:	2700      	movs	r7, #0
 80095ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095d2:	f8d9 3000 	ldr.w	r3, [r9]
 80095d6:	fa1f fb82 	uxth.w	fp, r2
 80095da:	b29b      	uxth	r3, r3
 80095dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80095e0:	443b      	add	r3, r7
 80095e2:	f8d9 7000 	ldr.w	r7, [r9]
 80095e6:	0c12      	lsrs	r2, r2, #16
 80095e8:	0c3f      	lsrs	r7, r7, #16
 80095ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80095ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f8:	4565      	cmp	r5, ip
 80095fa:	f849 3b04 	str.w	r3, [r9], #4
 80095fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009602:	d8e4      	bhi.n	80095ce <__multiply+0xaa>
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	50e7      	str	r7, [r4, r3]
 8009608:	9b03      	ldr	r3, [sp, #12]
 800960a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800960e:	3104      	adds	r1, #4
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	d020      	beq.n	8009658 <__multiply+0x134>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	4647      	mov	r7, r8
 800961a:	46a4      	mov	ip, r4
 800961c:	f04f 0a00 	mov.w	sl, #0
 8009620:	f8b7 b000 	ldrh.w	fp, [r7]
 8009624:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009628:	fb09 220b 	mla	r2, r9, fp, r2
 800962c:	4452      	add	r2, sl
 800962e:	b29b      	uxth	r3, r3
 8009630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009634:	f84c 3b04 	str.w	r3, [ip], #4
 8009638:	f857 3b04 	ldr.w	r3, [r7], #4
 800963c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009640:	f8bc 3000 	ldrh.w	r3, [ip]
 8009644:	fb09 330a 	mla	r3, r9, sl, r3
 8009648:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800964c:	42bd      	cmp	r5, r7
 800964e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009652:	d8e5      	bhi.n	8009620 <__multiply+0xfc>
 8009654:	9a01      	ldr	r2, [sp, #4]
 8009656:	50a3      	str	r3, [r4, r2]
 8009658:	3404      	adds	r4, #4
 800965a:	e79f      	b.n	800959c <__multiply+0x78>
 800965c:	3e01      	subs	r6, #1
 800965e:	e7a1      	b.n	80095a4 <__multiply+0x80>
 8009660:	0800a6b4 	.word	0x0800a6b4
 8009664:	0800a6c5 	.word	0x0800a6c5

08009668 <__pow5mult>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4615      	mov	r5, r2
 800966e:	f012 0203 	ands.w	r2, r2, #3
 8009672:	4607      	mov	r7, r0
 8009674:	460e      	mov	r6, r1
 8009676:	d007      	beq.n	8009688 <__pow5mult+0x20>
 8009678:	4c25      	ldr	r4, [pc, #148]	@ (8009710 <__pow5mult+0xa8>)
 800967a:	3a01      	subs	r2, #1
 800967c:	2300      	movs	r3, #0
 800967e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009682:	f7ff fea7 	bl	80093d4 <__multadd>
 8009686:	4606      	mov	r6, r0
 8009688:	10ad      	asrs	r5, r5, #2
 800968a:	d03d      	beq.n	8009708 <__pow5mult+0xa0>
 800968c:	69fc      	ldr	r4, [r7, #28]
 800968e:	b97c      	cbnz	r4, 80096b0 <__pow5mult+0x48>
 8009690:	2010      	movs	r0, #16
 8009692:	f7ff fd87 	bl	80091a4 <malloc>
 8009696:	4602      	mov	r2, r0
 8009698:	61f8      	str	r0, [r7, #28]
 800969a:	b928      	cbnz	r0, 80096a8 <__pow5mult+0x40>
 800969c:	4b1d      	ldr	r3, [pc, #116]	@ (8009714 <__pow5mult+0xac>)
 800969e:	481e      	ldr	r0, [pc, #120]	@ (8009718 <__pow5mult+0xb0>)
 80096a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80096a4:	f000 fc3e 	bl	8009f24 <__assert_func>
 80096a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096ac:	6004      	str	r4, [r0, #0]
 80096ae:	60c4      	str	r4, [r0, #12]
 80096b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80096b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096b8:	b94c      	cbnz	r4, 80096ce <__pow5mult+0x66>
 80096ba:	f240 2171 	movw	r1, #625	@ 0x271
 80096be:	4638      	mov	r0, r7
 80096c0:	f7ff ff1a 	bl	80094f8 <__i2b>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ca:	4604      	mov	r4, r0
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	f04f 0900 	mov.w	r9, #0
 80096d2:	07eb      	lsls	r3, r5, #31
 80096d4:	d50a      	bpl.n	80096ec <__pow5mult+0x84>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4622      	mov	r2, r4
 80096da:	4638      	mov	r0, r7
 80096dc:	f7ff ff22 	bl	8009524 <__multiply>
 80096e0:	4631      	mov	r1, r6
 80096e2:	4680      	mov	r8, r0
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff fe53 	bl	8009390 <_Bfree>
 80096ea:	4646      	mov	r6, r8
 80096ec:	106d      	asrs	r5, r5, #1
 80096ee:	d00b      	beq.n	8009708 <__pow5mult+0xa0>
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	b938      	cbnz	r0, 8009704 <__pow5mult+0x9c>
 80096f4:	4622      	mov	r2, r4
 80096f6:	4621      	mov	r1, r4
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff ff13 	bl	8009524 <__multiply>
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	f8c0 9000 	str.w	r9, [r0]
 8009704:	4604      	mov	r4, r0
 8009706:	e7e4      	b.n	80096d2 <__pow5mult+0x6a>
 8009708:	4630      	mov	r0, r6
 800970a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970e:	bf00      	nop
 8009710:	0800a778 	.word	0x0800a778
 8009714:	0800a645 	.word	0x0800a645
 8009718:	0800a6c5 	.word	0x0800a6c5

0800971c <__lshift>:
 800971c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	6849      	ldr	r1, [r1, #4]
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800972a:	68a3      	ldr	r3, [r4, #8]
 800972c:	4607      	mov	r7, r0
 800972e:	4691      	mov	r9, r2
 8009730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009734:	f108 0601 	add.w	r6, r8, #1
 8009738:	42b3      	cmp	r3, r6
 800973a:	db0b      	blt.n	8009754 <__lshift+0x38>
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff fde7 	bl	8009310 <_Balloc>
 8009742:	4605      	mov	r5, r0
 8009744:	b948      	cbnz	r0, 800975a <__lshift+0x3e>
 8009746:	4602      	mov	r2, r0
 8009748:	4b28      	ldr	r3, [pc, #160]	@ (80097ec <__lshift+0xd0>)
 800974a:	4829      	ldr	r0, [pc, #164]	@ (80097f0 <__lshift+0xd4>)
 800974c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009750:	f000 fbe8 	bl	8009f24 <__assert_func>
 8009754:	3101      	adds	r1, #1
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	e7ee      	b.n	8009738 <__lshift+0x1c>
 800975a:	2300      	movs	r3, #0
 800975c:	f100 0114 	add.w	r1, r0, #20
 8009760:	f100 0210 	add.w	r2, r0, #16
 8009764:	4618      	mov	r0, r3
 8009766:	4553      	cmp	r3, sl
 8009768:	db33      	blt.n	80097d2 <__lshift+0xb6>
 800976a:	6920      	ldr	r0, [r4, #16]
 800976c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009770:	f104 0314 	add.w	r3, r4, #20
 8009774:	f019 091f 	ands.w	r9, r9, #31
 8009778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800977c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009780:	d02b      	beq.n	80097da <__lshift+0xbe>
 8009782:	f1c9 0e20 	rsb	lr, r9, #32
 8009786:	468a      	mov	sl, r1
 8009788:	2200      	movs	r2, #0
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	fa00 f009 	lsl.w	r0, r0, r9
 8009790:	4310      	orrs	r0, r2
 8009792:	f84a 0b04 	str.w	r0, [sl], #4
 8009796:	f853 2b04 	ldr.w	r2, [r3], #4
 800979a:	459c      	cmp	ip, r3
 800979c:	fa22 f20e 	lsr.w	r2, r2, lr
 80097a0:	d8f3      	bhi.n	800978a <__lshift+0x6e>
 80097a2:	ebac 0304 	sub.w	r3, ip, r4
 80097a6:	3b15      	subs	r3, #21
 80097a8:	f023 0303 	bic.w	r3, r3, #3
 80097ac:	3304      	adds	r3, #4
 80097ae:	f104 0015 	add.w	r0, r4, #21
 80097b2:	4560      	cmp	r0, ip
 80097b4:	bf88      	it	hi
 80097b6:	2304      	movhi	r3, #4
 80097b8:	50ca      	str	r2, [r1, r3]
 80097ba:	b10a      	cbz	r2, 80097c0 <__lshift+0xa4>
 80097bc:	f108 0602 	add.w	r6, r8, #2
 80097c0:	3e01      	subs	r6, #1
 80097c2:	4638      	mov	r0, r7
 80097c4:	612e      	str	r6, [r5, #16]
 80097c6:	4621      	mov	r1, r4
 80097c8:	f7ff fde2 	bl	8009390 <_Bfree>
 80097cc:	4628      	mov	r0, r5
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80097d6:	3301      	adds	r3, #1
 80097d8:	e7c5      	b.n	8009766 <__lshift+0x4a>
 80097da:	3904      	subs	r1, #4
 80097dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e4:	459c      	cmp	ip, r3
 80097e6:	d8f9      	bhi.n	80097dc <__lshift+0xc0>
 80097e8:	e7ea      	b.n	80097c0 <__lshift+0xa4>
 80097ea:	bf00      	nop
 80097ec:	0800a6b4 	.word	0x0800a6b4
 80097f0:	0800a6c5 	.word	0x0800a6c5

080097f4 <__mcmp>:
 80097f4:	690a      	ldr	r2, [r1, #16]
 80097f6:	4603      	mov	r3, r0
 80097f8:	6900      	ldr	r0, [r0, #16]
 80097fa:	1a80      	subs	r0, r0, r2
 80097fc:	b530      	push	{r4, r5, lr}
 80097fe:	d10e      	bne.n	800981e <__mcmp+0x2a>
 8009800:	3314      	adds	r3, #20
 8009802:	3114      	adds	r1, #20
 8009804:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009808:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800980c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009810:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009814:	4295      	cmp	r5, r2
 8009816:	d003      	beq.n	8009820 <__mcmp+0x2c>
 8009818:	d205      	bcs.n	8009826 <__mcmp+0x32>
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	bd30      	pop	{r4, r5, pc}
 8009820:	42a3      	cmp	r3, r4
 8009822:	d3f3      	bcc.n	800980c <__mcmp+0x18>
 8009824:	e7fb      	b.n	800981e <__mcmp+0x2a>
 8009826:	2001      	movs	r0, #1
 8009828:	e7f9      	b.n	800981e <__mcmp+0x2a>
	...

0800982c <__mdiff>:
 800982c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	4689      	mov	r9, r1
 8009832:	4606      	mov	r6, r0
 8009834:	4611      	mov	r1, r2
 8009836:	4648      	mov	r0, r9
 8009838:	4614      	mov	r4, r2
 800983a:	f7ff ffdb 	bl	80097f4 <__mcmp>
 800983e:	1e05      	subs	r5, r0, #0
 8009840:	d112      	bne.n	8009868 <__mdiff+0x3c>
 8009842:	4629      	mov	r1, r5
 8009844:	4630      	mov	r0, r6
 8009846:	f7ff fd63 	bl	8009310 <_Balloc>
 800984a:	4602      	mov	r2, r0
 800984c:	b928      	cbnz	r0, 800985a <__mdiff+0x2e>
 800984e:	4b3f      	ldr	r3, [pc, #252]	@ (800994c <__mdiff+0x120>)
 8009850:	f240 2137 	movw	r1, #567	@ 0x237
 8009854:	483e      	ldr	r0, [pc, #248]	@ (8009950 <__mdiff+0x124>)
 8009856:	f000 fb65 	bl	8009f24 <__assert_func>
 800985a:	2301      	movs	r3, #1
 800985c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009860:	4610      	mov	r0, r2
 8009862:	b003      	add	sp, #12
 8009864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	bfbc      	itt	lt
 800986a:	464b      	movlt	r3, r9
 800986c:	46a1      	movlt	r9, r4
 800986e:	4630      	mov	r0, r6
 8009870:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009874:	bfba      	itte	lt
 8009876:	461c      	movlt	r4, r3
 8009878:	2501      	movlt	r5, #1
 800987a:	2500      	movge	r5, #0
 800987c:	f7ff fd48 	bl	8009310 <_Balloc>
 8009880:	4602      	mov	r2, r0
 8009882:	b918      	cbnz	r0, 800988c <__mdiff+0x60>
 8009884:	4b31      	ldr	r3, [pc, #196]	@ (800994c <__mdiff+0x120>)
 8009886:	f240 2145 	movw	r1, #581	@ 0x245
 800988a:	e7e3      	b.n	8009854 <__mdiff+0x28>
 800988c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009890:	6926      	ldr	r6, [r4, #16]
 8009892:	60c5      	str	r5, [r0, #12]
 8009894:	f109 0310 	add.w	r3, r9, #16
 8009898:	f109 0514 	add.w	r5, r9, #20
 800989c:	f104 0e14 	add.w	lr, r4, #20
 80098a0:	f100 0b14 	add.w	fp, r0, #20
 80098a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80098a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	46d9      	mov	r9, fp
 80098b0:	f04f 0c00 	mov.w	ip, #0
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80098ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	fa1f f38a 	uxth.w	r3, sl
 80098c4:	4619      	mov	r1, r3
 80098c6:	b283      	uxth	r3, r0
 80098c8:	1acb      	subs	r3, r1, r3
 80098ca:	0c00      	lsrs	r0, r0, #16
 80098cc:	4463      	add	r3, ip
 80098ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098dc:	4576      	cmp	r6, lr
 80098de:	f849 3b04 	str.w	r3, [r9], #4
 80098e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098e6:	d8e5      	bhi.n	80098b4 <__mdiff+0x88>
 80098e8:	1b33      	subs	r3, r6, r4
 80098ea:	3b15      	subs	r3, #21
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	3415      	adds	r4, #21
 80098f2:	3304      	adds	r3, #4
 80098f4:	42a6      	cmp	r6, r4
 80098f6:	bf38      	it	cc
 80098f8:	2304      	movcc	r3, #4
 80098fa:	441d      	add	r5, r3
 80098fc:	445b      	add	r3, fp
 80098fe:	461e      	mov	r6, r3
 8009900:	462c      	mov	r4, r5
 8009902:	4544      	cmp	r4, r8
 8009904:	d30e      	bcc.n	8009924 <__mdiff+0xf8>
 8009906:	f108 0103 	add.w	r1, r8, #3
 800990a:	1b49      	subs	r1, r1, r5
 800990c:	f021 0103 	bic.w	r1, r1, #3
 8009910:	3d03      	subs	r5, #3
 8009912:	45a8      	cmp	r8, r5
 8009914:	bf38      	it	cc
 8009916:	2100      	movcc	r1, #0
 8009918:	440b      	add	r3, r1
 800991a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800991e:	b191      	cbz	r1, 8009946 <__mdiff+0x11a>
 8009920:	6117      	str	r7, [r2, #16]
 8009922:	e79d      	b.n	8009860 <__mdiff+0x34>
 8009924:	f854 1b04 	ldr.w	r1, [r4], #4
 8009928:	46e6      	mov	lr, ip
 800992a:	0c08      	lsrs	r0, r1, #16
 800992c:	fa1c fc81 	uxtah	ip, ip, r1
 8009930:	4471      	add	r1, lr
 8009932:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009936:	b289      	uxth	r1, r1
 8009938:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800993c:	f846 1b04 	str.w	r1, [r6], #4
 8009940:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009944:	e7dd      	b.n	8009902 <__mdiff+0xd6>
 8009946:	3f01      	subs	r7, #1
 8009948:	e7e7      	b.n	800991a <__mdiff+0xee>
 800994a:	bf00      	nop
 800994c:	0800a6b4 	.word	0x0800a6b4
 8009950:	0800a6c5 	.word	0x0800a6c5

08009954 <__d2b>:
 8009954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009958:	460f      	mov	r7, r1
 800995a:	2101      	movs	r1, #1
 800995c:	ec59 8b10 	vmov	r8, r9, d0
 8009960:	4616      	mov	r6, r2
 8009962:	f7ff fcd5 	bl	8009310 <_Balloc>
 8009966:	4604      	mov	r4, r0
 8009968:	b930      	cbnz	r0, 8009978 <__d2b+0x24>
 800996a:	4602      	mov	r2, r0
 800996c:	4b23      	ldr	r3, [pc, #140]	@ (80099fc <__d2b+0xa8>)
 800996e:	4824      	ldr	r0, [pc, #144]	@ (8009a00 <__d2b+0xac>)
 8009970:	f240 310f 	movw	r1, #783	@ 0x30f
 8009974:	f000 fad6 	bl	8009f24 <__assert_func>
 8009978:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800997c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009980:	b10d      	cbz	r5, 8009986 <__d2b+0x32>
 8009982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	f1b8 0300 	subs.w	r3, r8, #0
 800998c:	d023      	beq.n	80099d6 <__d2b+0x82>
 800998e:	4668      	mov	r0, sp
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	f7ff fd84 	bl	800949e <__lo0bits>
 8009996:	e9dd 1200 	ldrd	r1, r2, [sp]
 800999a:	b1d0      	cbz	r0, 80099d2 <__d2b+0x7e>
 800999c:	f1c0 0320 	rsb	r3, r0, #32
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	430b      	orrs	r3, r1
 80099a6:	40c2      	lsrs	r2, r0
 80099a8:	6163      	str	r3, [r4, #20]
 80099aa:	9201      	str	r2, [sp, #4]
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	61a3      	str	r3, [r4, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bf0c      	ite	eq
 80099b4:	2201      	moveq	r2, #1
 80099b6:	2202      	movne	r2, #2
 80099b8:	6122      	str	r2, [r4, #16]
 80099ba:	b1a5      	cbz	r5, 80099e6 <__d2b+0x92>
 80099bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099c0:	4405      	add	r5, r0
 80099c2:	603d      	str	r5, [r7, #0]
 80099c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099c8:	6030      	str	r0, [r6, #0]
 80099ca:	4620      	mov	r0, r4
 80099cc:	b003      	add	sp, #12
 80099ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d2:	6161      	str	r1, [r4, #20]
 80099d4:	e7ea      	b.n	80099ac <__d2b+0x58>
 80099d6:	a801      	add	r0, sp, #4
 80099d8:	f7ff fd61 	bl	800949e <__lo0bits>
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	6163      	str	r3, [r4, #20]
 80099e0:	3020      	adds	r0, #32
 80099e2:	2201      	movs	r2, #1
 80099e4:	e7e8      	b.n	80099b8 <__d2b+0x64>
 80099e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099ee:	6038      	str	r0, [r7, #0]
 80099f0:	6918      	ldr	r0, [r3, #16]
 80099f2:	f7ff fd35 	bl	8009460 <__hi0bits>
 80099f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099fa:	e7e5      	b.n	80099c8 <__d2b+0x74>
 80099fc:	0800a6b4 	.word	0x0800a6b4
 8009a00:	0800a6c5 	.word	0x0800a6c5

08009a04 <__sfputc_r>:
 8009a04:	6893      	ldr	r3, [r2, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	b410      	push	{r4}
 8009a0c:	6093      	str	r3, [r2, #8]
 8009a0e:	da08      	bge.n	8009a22 <__sfputc_r+0x1e>
 8009a10:	6994      	ldr	r4, [r2, #24]
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	db01      	blt.n	8009a1a <__sfputc_r+0x16>
 8009a16:	290a      	cmp	r1, #10
 8009a18:	d103      	bne.n	8009a22 <__sfputc_r+0x1e>
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1e:	f7fe bc0a 	b.w	8008236 <__swbuf_r>
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	1c58      	adds	r0, r3, #1
 8009a26:	6010      	str	r0, [r2, #0]
 8009a28:	7019      	strb	r1, [r3, #0]
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <__sfputs_r>:
 8009a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a34:	4606      	mov	r6, r0
 8009a36:	460f      	mov	r7, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	18d5      	adds	r5, r2, r3
 8009a3c:	42ac      	cmp	r4, r5
 8009a3e:	d101      	bne.n	8009a44 <__sfputs_r+0x12>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e007      	b.n	8009a54 <__sfputs_r+0x22>
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	463a      	mov	r2, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffda 	bl	8009a04 <__sfputc_r>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d1f3      	bne.n	8009a3c <__sfputs_r+0xa>
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	@ 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6a03      	ldr	r3, [r0, #32]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f7fe fafa 	bl	8008064 <__sinit>
 8009a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a72:	07d9      	lsls	r1, r3, #31
 8009a74:	d405      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	059a      	lsls	r2, r3, #22
 8009a7a:	d402      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a7e:	f7fe fcec 	bl	800845a <__retarget_lock_acquire_recursive>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	071b      	lsls	r3, r3, #28
 8009a86:	d501      	bpl.n	8009a8c <_vfiprintf_r+0x34>
 8009a88:	692b      	ldr	r3, [r5, #16]
 8009a8a:	b99b      	cbnz	r3, 8009ab4 <_vfiprintf_r+0x5c>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7fe fc10 	bl	80082b4 <__swsetup_r>
 8009a94:	b170      	cbz	r0, 8009ab4 <_vfiprintf_r+0x5c>
 8009a96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a98:	07dc      	lsls	r4, r3, #31
 8009a9a:	d504      	bpl.n	8009aa6 <_vfiprintf_r+0x4e>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b01d      	add	sp, #116	@ 0x74
 8009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	0598      	lsls	r0, r3, #22
 8009aaa:	d4f7      	bmi.n	8009a9c <_vfiprintf_r+0x44>
 8009aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aae:	f7fe fcd5 	bl	800845c <__retarget_lock_release_recursive>
 8009ab2:	e7f3      	b.n	8009a9c <_vfiprintf_r+0x44>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac2:	2330      	movs	r3, #48	@ 0x30
 8009ac4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c74 <_vfiprintf_r+0x21c>
 8009ac8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009acc:	f04f 0901 	mov.w	r9, #1
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	469a      	mov	sl, r3
 8009ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad8:	b10a      	cbz	r2, 8009ade <_vfiprintf_r+0x86>
 8009ada:	2a25      	cmp	r2, #37	@ 0x25
 8009adc:	d1f9      	bne.n	8009ad2 <_vfiprintf_r+0x7a>
 8009ade:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae2:	d00b      	beq.n	8009afc <_vfiprintf_r+0xa4>
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ffa1 	bl	8009a32 <__sfputs_r>
 8009af0:	3001      	adds	r0, #1
 8009af2:	f000 80a7 	beq.w	8009c44 <_vfiprintf_r+0x1ec>
 8009af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009af8:	445a      	add	r2, fp
 8009afa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009afc:	f89a 3000 	ldrb.w	r3, [sl]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 809f 	beq.w	8009c44 <_vfiprintf_r+0x1ec>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b10:	f10a 0a01 	add.w	sl, sl, #1
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b1e:	4654      	mov	r4, sl
 8009b20:	2205      	movs	r2, #5
 8009b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b26:	4853      	ldr	r0, [pc, #332]	@ (8009c74 <_vfiprintf_r+0x21c>)
 8009b28:	f7f6 fb52 	bl	80001d0 <memchr>
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	b9d8      	cbnz	r0, 8009b68 <_vfiprintf_r+0x110>
 8009b30:	06d1      	lsls	r1, r2, #27
 8009b32:	bf44      	itt	mi
 8009b34:	2320      	movmi	r3, #32
 8009b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b3a:	0713      	lsls	r3, r2, #28
 8009b3c:	bf44      	itt	mi
 8009b3e:	232b      	movmi	r3, #43	@ 0x2b
 8009b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b44:	f89a 3000 	ldrb.w	r3, [sl]
 8009b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b4a:	d015      	beq.n	8009b78 <_vfiprintf_r+0x120>
 8009b4c:	9a07      	ldr	r2, [sp, #28]
 8009b4e:	4654      	mov	r4, sl
 8009b50:	2000      	movs	r0, #0
 8009b52:	f04f 0c0a 	mov.w	ip, #10
 8009b56:	4621      	mov	r1, r4
 8009b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b5c:	3b30      	subs	r3, #48	@ 0x30
 8009b5e:	2b09      	cmp	r3, #9
 8009b60:	d94b      	bls.n	8009bfa <_vfiprintf_r+0x1a2>
 8009b62:	b1b0      	cbz	r0, 8009b92 <_vfiprintf_r+0x13a>
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	e014      	b.n	8009b92 <_vfiprintf_r+0x13a>
 8009b68:	eba0 0308 	sub.w	r3, r0, r8
 8009b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	46a2      	mov	sl, r4
 8009b76:	e7d2      	b.n	8009b1e <_vfiprintf_r+0xc6>
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	1d19      	adds	r1, r3, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	9103      	str	r1, [sp, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfbb      	ittet	lt
 8009b84:	425b      	neglt	r3, r3
 8009b86:	f042 0202 	orrlt.w	r2, r2, #2
 8009b8a:	9307      	strge	r3, [sp, #28]
 8009b8c:	9307      	strlt	r3, [sp, #28]
 8009b8e:	bfb8      	it	lt
 8009b90:	9204      	strlt	r2, [sp, #16]
 8009b92:	7823      	ldrb	r3, [r4, #0]
 8009b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b96:	d10a      	bne.n	8009bae <_vfiprintf_r+0x156>
 8009b98:	7863      	ldrb	r3, [r4, #1]
 8009b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b9c:	d132      	bne.n	8009c04 <_vfiprintf_r+0x1ac>
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	9203      	str	r2, [sp, #12]
 8009ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009baa:	3402      	adds	r4, #2
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c84 <_vfiprintf_r+0x22c>
 8009bb2:	7821      	ldrb	r1, [r4, #0]
 8009bb4:	2203      	movs	r2, #3
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	f7f6 fb0a 	bl	80001d0 <memchr>
 8009bbc:	b138      	cbz	r0, 8009bce <_vfiprintf_r+0x176>
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	eba0 000a 	sub.w	r0, r0, sl
 8009bc4:	2240      	movs	r2, #64	@ 0x40
 8009bc6:	4082      	lsls	r2, r0
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	3401      	adds	r4, #1
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd2:	4829      	ldr	r0, [pc, #164]	@ (8009c78 <_vfiprintf_r+0x220>)
 8009bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bd8:	2206      	movs	r2, #6
 8009bda:	f7f6 faf9 	bl	80001d0 <memchr>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d03f      	beq.n	8009c62 <_vfiprintf_r+0x20a>
 8009be2:	4b26      	ldr	r3, [pc, #152]	@ (8009c7c <_vfiprintf_r+0x224>)
 8009be4:	bb1b      	cbnz	r3, 8009c2e <_vfiprintf_r+0x1d6>
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	3307      	adds	r3, #7
 8009bea:	f023 0307 	bic.w	r3, r3, #7
 8009bee:	3308      	adds	r3, #8
 8009bf0:	9303      	str	r3, [sp, #12]
 8009bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf4:	443b      	add	r3, r7
 8009bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf8:	e76a      	b.n	8009ad0 <_vfiprintf_r+0x78>
 8009bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bfe:	460c      	mov	r4, r1
 8009c00:	2001      	movs	r0, #1
 8009c02:	e7a8      	b.n	8009b56 <_vfiprintf_r+0xfe>
 8009c04:	2300      	movs	r3, #0
 8009c06:	3401      	adds	r4, #1
 8009c08:	9305      	str	r3, [sp, #20]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	f04f 0c0a 	mov.w	ip, #10
 8009c10:	4620      	mov	r0, r4
 8009c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c16:	3a30      	subs	r2, #48	@ 0x30
 8009c18:	2a09      	cmp	r2, #9
 8009c1a:	d903      	bls.n	8009c24 <_vfiprintf_r+0x1cc>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0c6      	beq.n	8009bae <_vfiprintf_r+0x156>
 8009c20:	9105      	str	r1, [sp, #20]
 8009c22:	e7c4      	b.n	8009bae <_vfiprintf_r+0x156>
 8009c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c28:	4604      	mov	r4, r0
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7f0      	b.n	8009c10 <_vfiprintf_r+0x1b8>
 8009c2e:	ab03      	add	r3, sp, #12
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	462a      	mov	r2, r5
 8009c34:	4b12      	ldr	r3, [pc, #72]	@ (8009c80 <_vfiprintf_r+0x228>)
 8009c36:	a904      	add	r1, sp, #16
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7fd fdd1 	bl	80077e0 <_printf_float>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	1c78      	adds	r0, r7, #1
 8009c42:	d1d6      	bne.n	8009bf2 <_vfiprintf_r+0x19a>
 8009c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c46:	07d9      	lsls	r1, r3, #31
 8009c48:	d405      	bmi.n	8009c56 <_vfiprintf_r+0x1fe>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	059a      	lsls	r2, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_vfiprintf_r+0x1fe>
 8009c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c52:	f7fe fc03 	bl	800845c <__retarget_lock_release_recursive>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	065b      	lsls	r3, r3, #25
 8009c5a:	f53f af1f 	bmi.w	8009a9c <_vfiprintf_r+0x44>
 8009c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c60:	e71e      	b.n	8009aa0 <_vfiprintf_r+0x48>
 8009c62:	ab03      	add	r3, sp, #12
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	462a      	mov	r2, r5
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <_vfiprintf_r+0x228>)
 8009c6a:	a904      	add	r1, sp, #16
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7fe f84f 	bl	8007d10 <_printf_i>
 8009c72:	e7e4      	b.n	8009c3e <_vfiprintf_r+0x1e6>
 8009c74:	0800a71e 	.word	0x0800a71e
 8009c78:	0800a728 	.word	0x0800a728
 8009c7c:	080077e1 	.word	0x080077e1
 8009c80:	08009a33 	.word	0x08009a33
 8009c84:	0800a724 	.word	0x0800a724

08009c88 <__sflush_r>:
 8009c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	0716      	lsls	r6, r2, #28
 8009c92:	4605      	mov	r5, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	d454      	bmi.n	8009d42 <__sflush_r+0xba>
 8009c98:	684b      	ldr	r3, [r1, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dc02      	bgt.n	8009ca4 <__sflush_r+0x1c>
 8009c9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dd48      	ble.n	8009d36 <__sflush_r+0xae>
 8009ca4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	d045      	beq.n	8009d36 <__sflush_r+0xae>
 8009caa:	2300      	movs	r3, #0
 8009cac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cb0:	682f      	ldr	r7, [r5, #0]
 8009cb2:	6a21      	ldr	r1, [r4, #32]
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	d030      	beq.n	8009d1a <__sflush_r+0x92>
 8009cb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	0759      	lsls	r1, r3, #29
 8009cbe:	d505      	bpl.n	8009ccc <__sflush_r+0x44>
 8009cc0:	6863      	ldr	r3, [r4, #4]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cc6:	b10b      	cbz	r3, 8009ccc <__sflush_r+0x44>
 8009cc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cd0:	6a21      	ldr	r1, [r4, #32]
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	47b0      	blx	r6
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	d106      	bne.n	8009cea <__sflush_r+0x62>
 8009cdc:	6829      	ldr	r1, [r5, #0]
 8009cde:	291d      	cmp	r1, #29
 8009ce0:	d82b      	bhi.n	8009d3a <__sflush_r+0xb2>
 8009ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d8c <__sflush_r+0x104>)
 8009ce4:	40ca      	lsrs	r2, r1
 8009ce6:	07d6      	lsls	r6, r2, #31
 8009ce8:	d527      	bpl.n	8009d3a <__sflush_r+0xb2>
 8009cea:	2200      	movs	r2, #0
 8009cec:	6062      	str	r2, [r4, #4]
 8009cee:	04d9      	lsls	r1, r3, #19
 8009cf0:	6922      	ldr	r2, [r4, #16]
 8009cf2:	6022      	str	r2, [r4, #0]
 8009cf4:	d504      	bpl.n	8009d00 <__sflush_r+0x78>
 8009cf6:	1c42      	adds	r2, r0, #1
 8009cf8:	d101      	bne.n	8009cfe <__sflush_r+0x76>
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	b903      	cbnz	r3, 8009d00 <__sflush_r+0x78>
 8009cfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d02:	602f      	str	r7, [r5, #0]
 8009d04:	b1b9      	cbz	r1, 8009d36 <__sflush_r+0xae>
 8009d06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d002      	beq.n	8009d14 <__sflush_r+0x8c>
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f7ff f9fe 	bl	8009110 <_free_r>
 8009d14:	2300      	movs	r3, #0
 8009d16:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d18:	e00d      	b.n	8009d36 <__sflush_r+0xae>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	4602      	mov	r2, r0
 8009d22:	1c50      	adds	r0, r2, #1
 8009d24:	d1c9      	bne.n	8009cba <__sflush_r+0x32>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0c6      	beq.n	8009cba <__sflush_r+0x32>
 8009d2c:	2b1d      	cmp	r3, #29
 8009d2e:	d001      	beq.n	8009d34 <__sflush_r+0xac>
 8009d30:	2b16      	cmp	r3, #22
 8009d32:	d11e      	bne.n	8009d72 <__sflush_r+0xea>
 8009d34:	602f      	str	r7, [r5, #0]
 8009d36:	2000      	movs	r0, #0
 8009d38:	e022      	b.n	8009d80 <__sflush_r+0xf8>
 8009d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d3e:	b21b      	sxth	r3, r3
 8009d40:	e01b      	b.n	8009d7a <__sflush_r+0xf2>
 8009d42:	690f      	ldr	r7, [r1, #16]
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	d0f6      	beq.n	8009d36 <__sflush_r+0xae>
 8009d48:	0793      	lsls	r3, r2, #30
 8009d4a:	680e      	ldr	r6, [r1, #0]
 8009d4c:	bf08      	it	eq
 8009d4e:	694b      	ldreq	r3, [r1, #20]
 8009d50:	600f      	str	r7, [r1, #0]
 8009d52:	bf18      	it	ne
 8009d54:	2300      	movne	r3, #0
 8009d56:	eba6 0807 	sub.w	r8, r6, r7
 8009d5a:	608b      	str	r3, [r1, #8]
 8009d5c:	f1b8 0f00 	cmp.w	r8, #0
 8009d60:	dde9      	ble.n	8009d36 <__sflush_r+0xae>
 8009d62:	6a21      	ldr	r1, [r4, #32]
 8009d64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d66:	4643      	mov	r3, r8
 8009d68:	463a      	mov	r2, r7
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b0      	blx	r6
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	dc08      	bgt.n	8009d84 <__sflush_r+0xfc>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d84:	4407      	add	r7, r0
 8009d86:	eba8 0800 	sub.w	r8, r8, r0
 8009d8a:	e7e7      	b.n	8009d5c <__sflush_r+0xd4>
 8009d8c:	20400001 	.word	0x20400001

08009d90 <_fflush_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	690b      	ldr	r3, [r1, #16]
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b913      	cbnz	r3, 8009da0 <_fflush_r+0x10>
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	b118      	cbz	r0, 8009daa <_fflush_r+0x1a>
 8009da2:	6a03      	ldr	r3, [r0, #32]
 8009da4:	b90b      	cbnz	r3, 8009daa <_fflush_r+0x1a>
 8009da6:	f7fe f95d 	bl	8008064 <__sinit>
 8009daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0f3      	beq.n	8009d9a <_fflush_r+0xa>
 8009db2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009db4:	07d0      	lsls	r0, r2, #31
 8009db6:	d404      	bmi.n	8009dc2 <_fflush_r+0x32>
 8009db8:	0599      	lsls	r1, r3, #22
 8009dba:	d402      	bmi.n	8009dc2 <_fflush_r+0x32>
 8009dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dbe:	f7fe fb4c 	bl	800845a <__retarget_lock_acquire_recursive>
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	f7ff ff5f 	bl	8009c88 <__sflush_r>
 8009dca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dcc:	07da      	lsls	r2, r3, #31
 8009dce:	4605      	mov	r5, r0
 8009dd0:	d4e4      	bmi.n	8009d9c <_fflush_r+0xc>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	059b      	lsls	r3, r3, #22
 8009dd6:	d4e1      	bmi.n	8009d9c <_fflush_r+0xc>
 8009dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dda:	f7fe fb3f 	bl	800845c <__retarget_lock_release_recursive>
 8009dde:	e7dd      	b.n	8009d9c <_fflush_r+0xc>

08009de0 <__swhatbuf_r>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	460c      	mov	r4, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2900      	cmp	r1, #0
 8009dea:	b096      	sub	sp, #88	@ 0x58
 8009dec:	4615      	mov	r5, r2
 8009dee:	461e      	mov	r6, r3
 8009df0:	da0d      	bge.n	8009e0e <__swhatbuf_r+0x2e>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009df8:	f04f 0100 	mov.w	r1, #0
 8009dfc:	bf14      	ite	ne
 8009dfe:	2340      	movne	r3, #64	@ 0x40
 8009e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e04:	2000      	movs	r0, #0
 8009e06:	6031      	str	r1, [r6, #0]
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	b016      	add	sp, #88	@ 0x58
 8009e0c:	bd70      	pop	{r4, r5, r6, pc}
 8009e0e:	466a      	mov	r2, sp
 8009e10:	f000 f848 	bl	8009ea4 <_fstat_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dbec      	blt.n	8009df2 <__swhatbuf_r+0x12>
 8009e18:	9901      	ldr	r1, [sp, #4]
 8009e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e22:	4259      	negs	r1, r3
 8009e24:	4159      	adcs	r1, r3
 8009e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e2a:	e7eb      	b.n	8009e04 <__swhatbuf_r+0x24>

08009e2c <__smakebuf_r>:
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e30:	079d      	lsls	r5, r3, #30
 8009e32:	4606      	mov	r6, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	d507      	bpl.n	8009e48 <__smakebuf_r+0x1c>
 8009e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	2301      	movs	r3, #1
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	b003      	add	sp, #12
 8009e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e48:	ab01      	add	r3, sp, #4
 8009e4a:	466a      	mov	r2, sp
 8009e4c:	f7ff ffc8 	bl	8009de0 <__swhatbuf_r>
 8009e50:	9f00      	ldr	r7, [sp, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	4639      	mov	r1, r7
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff f9ce 	bl	80091f8 <_malloc_r>
 8009e5c:	b948      	cbnz	r0, 8009e72 <__smakebuf_r+0x46>
 8009e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e62:	059a      	lsls	r2, r3, #22
 8009e64:	d4ee      	bmi.n	8009e44 <__smakebuf_r+0x18>
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	f043 0302 	orr.w	r3, r3, #2
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	e7e2      	b.n	8009e38 <__smakebuf_r+0xc>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	6020      	str	r0, [r4, #0]
 8009e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	9b01      	ldr	r3, [sp, #4]
 8009e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e82:	b15b      	cbz	r3, 8009e9c <__smakebuf_r+0x70>
 8009e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f81d 	bl	8009ec8 <_isatty_r>
 8009e8e:	b128      	cbz	r0, 8009e9c <__smakebuf_r+0x70>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	431d      	orrs	r5, r3
 8009ea0:	81a5      	strh	r5, [r4, #12]
 8009ea2:	e7cf      	b.n	8009e44 <__smakebuf_r+0x18>

08009ea4 <_fstat_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	@ (8009ec4 <_fstat_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7f8 fba5 	bl	8002600 <_fstat>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_fstat_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_fstat_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000604 	.word	0x20000604

08009ec8 <_isatty_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	@ (8009ee4 <_isatty_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f8 fba4 	bl	8002620 <_isatty>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_isatty_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_isatty_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20000604 	.word	0x20000604

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	@ (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 fbac 	bl	8002650 <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000604 	.word	0x20000604

08009f08 <memcpy>:
 8009f08:	440a      	add	r2, r1
 8009f0a:	4291      	cmp	r1, r2
 8009f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f10:	d100      	bne.n	8009f14 <memcpy+0xc>
 8009f12:	4770      	bx	lr
 8009f14:	b510      	push	{r4, lr}
 8009f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	d1f9      	bne.n	8009f16 <memcpy+0xe>
 8009f22:	bd10      	pop	{r4, pc}

08009f24 <__assert_func>:
 8009f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f26:	4614      	mov	r4, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <__assert_func+0x2c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4605      	mov	r5, r0
 8009f30:	68d8      	ldr	r0, [r3, #12]
 8009f32:	b14c      	cbz	r4, 8009f48 <__assert_func+0x24>
 8009f34:	4b07      	ldr	r3, [pc, #28]	@ (8009f54 <__assert_func+0x30>)
 8009f36:	9100      	str	r1, [sp, #0]
 8009f38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f3c:	4906      	ldr	r1, [pc, #24]	@ (8009f58 <__assert_func+0x34>)
 8009f3e:	462b      	mov	r3, r5
 8009f40:	f000 f842 	bl	8009fc8 <fiprintf>
 8009f44:	f000 f852 	bl	8009fec <abort>
 8009f48:	4b04      	ldr	r3, [pc, #16]	@ (8009f5c <__assert_func+0x38>)
 8009f4a:	461c      	mov	r4, r3
 8009f4c:	e7f3      	b.n	8009f36 <__assert_func+0x12>
 8009f4e:	bf00      	nop
 8009f50:	20000024 	.word	0x20000024
 8009f54:	0800a739 	.word	0x0800a739
 8009f58:	0800a746 	.word	0x0800a746
 8009f5c:	0800a774 	.word	0x0800a774

08009f60 <_calloc_r>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	fba1 5402 	umull	r5, r4, r1, r2
 8009f66:	b934      	cbnz	r4, 8009f76 <_calloc_r+0x16>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7ff f945 	bl	80091f8 <_malloc_r>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	b928      	cbnz	r0, 8009f7e <_calloc_r+0x1e>
 8009f72:	4630      	mov	r0, r6
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
 8009f76:	220c      	movs	r2, #12
 8009f78:	6002      	str	r2, [r0, #0]
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	e7f9      	b.n	8009f72 <_calloc_r+0x12>
 8009f7e:	462a      	mov	r2, r5
 8009f80:	4621      	mov	r1, r4
 8009f82:	f7fe f9ed 	bl	8008360 <memset>
 8009f86:	e7f4      	b.n	8009f72 <_calloc_r+0x12>

08009f88 <__ascii_mbtowc>:
 8009f88:	b082      	sub	sp, #8
 8009f8a:	b901      	cbnz	r1, 8009f8e <__ascii_mbtowc+0x6>
 8009f8c:	a901      	add	r1, sp, #4
 8009f8e:	b142      	cbz	r2, 8009fa2 <__ascii_mbtowc+0x1a>
 8009f90:	b14b      	cbz	r3, 8009fa6 <__ascii_mbtowc+0x1e>
 8009f92:	7813      	ldrb	r3, [r2, #0]
 8009f94:	600b      	str	r3, [r1, #0]
 8009f96:	7812      	ldrb	r2, [r2, #0]
 8009f98:	1e10      	subs	r0, r2, #0
 8009f9a:	bf18      	it	ne
 8009f9c:	2001      	movne	r0, #1
 8009f9e:	b002      	add	sp, #8
 8009fa0:	4770      	bx	lr
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	e7fb      	b.n	8009f9e <__ascii_mbtowc+0x16>
 8009fa6:	f06f 0001 	mvn.w	r0, #1
 8009faa:	e7f8      	b.n	8009f9e <__ascii_mbtowc+0x16>

08009fac <__ascii_wctomb>:
 8009fac:	4603      	mov	r3, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	b141      	cbz	r1, 8009fc4 <__ascii_wctomb+0x18>
 8009fb2:	2aff      	cmp	r2, #255	@ 0xff
 8009fb4:	d904      	bls.n	8009fc0 <__ascii_wctomb+0x14>
 8009fb6:	228a      	movs	r2, #138	@ 0x8a
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	4770      	bx	lr
 8009fc0:	700a      	strb	r2, [r1, #0]
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	4770      	bx	lr
	...

08009fc8 <fiprintf>:
 8009fc8:	b40e      	push	{r1, r2, r3}
 8009fca:	b503      	push	{r0, r1, lr}
 8009fcc:	4601      	mov	r1, r0
 8009fce:	ab03      	add	r3, sp, #12
 8009fd0:	4805      	ldr	r0, [pc, #20]	@ (8009fe8 <fiprintf+0x20>)
 8009fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd6:	6800      	ldr	r0, [r0, #0]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f7ff fd3d 	bl	8009a58 <_vfiprintf_r>
 8009fde:	b002      	add	sp, #8
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	4770      	bx	lr
 8009fe8:	20000024 	.word	0x20000024

08009fec <abort>:
 8009fec:	b508      	push	{r3, lr}
 8009fee:	2006      	movs	r0, #6
 8009ff0:	f000 f82c 	bl	800a04c <raise>
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7f8 fab3 	bl	8002560 <_exit>

08009ffa <_raise_r>:
 8009ffa:	291f      	cmp	r1, #31
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4605      	mov	r5, r0
 800a000:	460c      	mov	r4, r1
 800a002:	d904      	bls.n	800a00e <_raise_r+0x14>
 800a004:	2316      	movs	r3, #22
 800a006:	6003      	str	r3, [r0, #0]
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a010:	b112      	cbz	r2, 800a018 <_raise_r+0x1e>
 800a012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a016:	b94b      	cbnz	r3, 800a02c <_raise_r+0x32>
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f831 	bl	800a080 <_getpid_r>
 800a01e:	4622      	mov	r2, r4
 800a020:	4601      	mov	r1, r0
 800a022:	4628      	mov	r0, r5
 800a024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a028:	f000 b818 	b.w	800a05c <_kill_r>
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d00a      	beq.n	800a046 <_raise_r+0x4c>
 800a030:	1c59      	adds	r1, r3, #1
 800a032:	d103      	bne.n	800a03c <_raise_r+0x42>
 800a034:	2316      	movs	r3, #22
 800a036:	6003      	str	r3, [r0, #0]
 800a038:	2001      	movs	r0, #1
 800a03a:	e7e7      	b.n	800a00c <_raise_r+0x12>
 800a03c:	2100      	movs	r1, #0
 800a03e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a042:	4620      	mov	r0, r4
 800a044:	4798      	blx	r3
 800a046:	2000      	movs	r0, #0
 800a048:	e7e0      	b.n	800a00c <_raise_r+0x12>
	...

0800a04c <raise>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	@ (800a058 <raise+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f7ff bfd2 	b.w	8009ffa <_raise_r>
 800a056:	bf00      	nop
 800a058:	20000024 	.word	0x20000024

0800a05c <_kill_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	@ (800a07c <_kill_r+0x20>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	4611      	mov	r1, r2
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	f7f8 fa69 	bl	8002540 <_kill>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	d102      	bne.n	800a078 <_kill_r+0x1c>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	b103      	cbz	r3, 800a078 <_kill_r+0x1c>
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	bd38      	pop	{r3, r4, r5, pc}
 800a07a:	bf00      	nop
 800a07c:	20000604 	.word	0x20000604

0800a080 <_getpid_r>:
 800a080:	f7f8 ba56 	b.w	8002530 <_getpid>

0800a084 <_init>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr

0800a090 <_fini>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	bf00      	nop
 800a094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a096:	bc08      	pop	{r3}
 800a098:	469e      	mov	lr, r3
 800a09a:	4770      	bx	lr
