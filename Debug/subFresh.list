
subFresh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800a808  0800a808  0000b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b11c  0800b11c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b124  0800b124  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b124  0800b124  0000c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b128  0800b128  0000c128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b12c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001e0  0800b30c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800b30c  0000d5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015855  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  00022a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00025388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001075  00000000  00000000  00026818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226af  00000000  00000000  0002788d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6b  00000000  00000000  00049f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1037  00000000  00000000  00060ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  00131d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00138644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7ec 	.word	0x0800a7ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a7ec 	.word	0x0800a7ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b988 	b.w	80010ec <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <pwm_val_increase>:
	__HAL_TIM_SET_COMPARE(&htim2, channel, MIN_PWM_VAL);
	HAL_Delay(5000);
	printf("thruster initialized \r\n");
}

void pwm_val_increase(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET < MAX_PWM_VAL){
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <pwm_val_increase+0x2c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <pwm_val_increase+0x30>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	da04      	bge.n	800110a <pwm_val_increase+0x1a>
		PWM_VAL_SET++;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <pwm_val_increase+0x2c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a05      	ldr	r2, [pc, #20]	@ (800111c <pwm_val_increase+0x2c>)
 8001108:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val increased to %d \r\n", PWM_VAL_SET);
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <pwm_val_increase+0x2c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <pwm_val_increase+0x34>)
 8001112:	f007 fb8f 	bl	8008834 <iprintf>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000004 	.word	0x20000004
 8001124:	0800a820 	.word	0x0800a820

08001128 <pwm_val_decrease>:

void pwm_val_decrease(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	if(PWM_VAL_SET > MIN_PWM_VAL){
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <pwm_val_decrease+0x2c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <pwm_val_decrease+0x30>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	dd04      	ble.n	8001142 <pwm_val_decrease+0x1a>
		PWM_VAL_SET--;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <pwm_val_decrease+0x2c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3b01      	subs	r3, #1
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <pwm_val_decrease+0x2c>)
 8001140:	6013      	str	r3, [r2, #0]
	}
	printf("PWM val decreased to %d \r\n", PWM_VAL_SET);
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <pwm_val_decrease+0x2c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <pwm_val_decrease+0x34>)
 800114a:	f007 fb73 	bl	8008834 <iprintf>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	0800a83c 	.word	0x0800a83c

08001160 <init_thruster>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PWM_VAL);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	HAL_Delay(5000);
}

void init_thruster(int thruster) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	//uint32_t channel;
	//int PWM_Val;
	if(thruster){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <init_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <init_thruster+0x34>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <init_thruster+0x38>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001178:	e004      	b.n	8001184 <init_thruster+0x24>
		//channel = TIM_CHANNEL_3; //right thruster
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <init_thruster+0x34>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <init_thruster+0x3c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	639a      	str	r2, [r3, #56]	@ 0x38
		//channel = TIM_CHANNEL_2; //left thruster
	}
	HAL_Delay(5000);
 8001184:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001188:	f001 fee2 	bl	8002f50 <HAL_Delay>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000248 	.word	0x20000248
 800119c:	200001fc 	.word	0x200001fc

080011a0 <set_thruster>:

void set_thruster(int thruster) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(thruster){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <set_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_VAL_SET);
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <set_thruster+0x30>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <set_thruster+0x34>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
	}
	return;
 80011b8:	e005      	b.n	80011c6 <set_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_VAL_SET);
 80011ba:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <set_thruster+0x30>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <set_thruster+0x38>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 80011c4:	bf00      	nop
}
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000248 	.word	0x20000248
 80011d8:	200001fc 	.word	0x200001fc

080011dc <stop_thruster>:
		HAL_Delay(1000);
	}
}


void stop_thruster(int thruster) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(thruster){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <stop_thruster+0x1a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MIN_PWM_VAL);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <stop_thruster+0x30>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <stop_thruster+0x34>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
	}
	return;
 80011f4:	e005      	b.n	8001202 <stop_thruster+0x26>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MIN_PWM_VAL);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <stop_thruster+0x30>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <stop_thruster+0x38>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38
	return;
 8001200:	bf00      	nop
}
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000
 8001210:	20000248 	.word	0x20000248
 8001214:	200001fc 	.word	0x200001fc

08001218 <goUp>:
 *  Created on: Mar 21, 2025
 *      Author: elainamn
 */


void goUp() {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOX, GPIO_PIN_XX,  pin_state);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f002 ff83 	bl	8004130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001234:	f002 ff7c 	bl	8004130 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <goDown>:

void goDown() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124a:	f002 ff71 	bl	8004130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f002 ff6a 	bl	8004130 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <stop>:

void stop() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f002 ff5f 	bl	8004130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f002 ff58 	bl	8004130 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_CAN_RxFifo0MsgPendingCallback>:
int datacheck;

uint8_t sensorPacket[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001290:	2100      	movs	r1, #0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f002 f959 	bl	800354a <HAL_CAN_GetRxMessage>
	//printf("triggered\n");

	if(RxHeader.StdId == 0x128)
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80012a0:	d102      	bne.n	80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		//printf("match\n");
		datacheck = 1;
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000318 	.word	0x20000318
 80012b4:	200002d4 	.word	0x200002d4
 80012b8:	2000032c 	.word	0x2000032c

080012bc <can_setup>:

void can_setup(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
	 canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <can_setup+0x94>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	621a      	str	r2, [r3, #32]
	 canfilterconfig.FilterBank = 5;  // which filter bank to use from the assigned ones
 80012c8:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <can_setup+0x94>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	615a      	str	r2, [r3, #20]
	 canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <can_setup+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
	 canfilterconfig.FilterIdHigh = 0x128<<5;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <can_setup+0x94>)
 80012d6:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 80012da:	601a      	str	r2, [r3, #0]
	 canfilterconfig.FilterIdLow = 0;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <can_setup+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
	 canfilterconfig.FilterMaskIdHigh = 0x128<<5;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <can_setup+0x94>)
 80012e4:	f44f 5214 	mov.w	r2, #9472	@ 0x2500
 80012e8:	609a      	str	r2, [r3, #8]
	 canfilterconfig.FilterMaskIdLow = 0x0000;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <can_setup+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
	 canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <can_setup+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
	 canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <can_setup+0x94>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	61da      	str	r2, [r3, #28]
	 canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <can_setup+0x94>)
 80012fe:	220a      	movs	r2, #10
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24


	 HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001302:	4913      	ldr	r1, [pc, #76]	@ (8001350 <can_setup+0x94>)
 8001304:	4813      	ldr	r0, [pc, #76]	@ (8001354 <can_setup+0x98>)
 8001306:	f001 ff42 	bl	800318e <HAL_CAN_ConfigFilter>


	 //using standard ID (don't need extended)
	 TxHeader.IDE = CAN_ID_STD;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <can_setup+0x9c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]

	 //ID of transmitter
	 TxHeader.StdId = 0x256;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <can_setup+0x9c>)
 8001312:	f240 2256 	movw	r2, #598	@ 0x256
 8001316:	601a      	str	r2, [r3, #0]

	 //Set it to send a data frame
	 TxHeader.RTR = CAN_RTR_DATA;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <can_setup+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]

	 //length of message
	 TxHeader.DLC = 8;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <can_setup+0x9c>)
 8001320:	2208      	movs	r2, #8
 8001322:	611a      	str	r2, [r3, #16]

	 TxData[0] = 0x69;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <can_setup+0xa0>)
 8001326:	2269      	movs	r2, #105	@ 0x69
 8001328:	701a      	strb	r2, [r3, #0]

	HAL_CAN_Start(&hcan1);
 800132a:	480a      	ldr	r0, [pc, #40]	@ (8001354 <can_setup+0x98>)
 800132c:	f001 fff9 	bl	8003322 <HAL_CAN_Start>

	HAL_StatusTypeDef activate_return = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001330:	2102      	movs	r1, #2
 8001332:	4808      	ldr	r0, [pc, #32]	@ (8001354 <can_setup+0x98>)
 8001334:	f002 fa2b 	bl	800378e <HAL_CAN_ActivateNotification>
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]

	printf("notification output: %d\n", activate_return);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <can_setup+0xa4>)
 8001342:	f007 fa77 	bl	8008834 <iprintf>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002f0 	.word	0x200002f0
 8001354:	20000294 	.word	0x20000294
 8001358:	200002bc 	.word	0x200002bc
 800135c:	20000320 	.word	0x20000320
 8001360:	0800a868 	.word	0x0800a868

08001364 <read_control_from_CAN>:

uint8_t read_control_from_CAN(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	//  printf("reading = %d\r\n", RxHeader.StdId);
	  static uint8_t control = 0;
	  if(datacheck)
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <read_control_from_CAN+0x28>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <read_control_from_CAN+0x1a>
	  {
		  control = RxData[0];
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <read_control_from_CAN+0x2c>)
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <read_control_from_CAN+0x30>)
 8001376:	701a      	strb	r2, [r3, #0]
		  datacheck = 0;
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <read_control_from_CAN+0x28>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
	  }
	  //printf("controller command is  = %d\r\n", control);
	  return control;
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <read_control_from_CAN+0x30>)
 8001380:	781b      	ldrb	r3, [r3, #0]
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	2000032c 	.word	0x2000032c
 8001390:	20000318 	.word	0x20000318
 8001394:	20000478 	.word	0x20000478

08001398 <transmit_sensor_packet>:

void transmit_sensor_packet(uint16_t gyroReading, uint32_t presTempReading, uint16_t flowReading){
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80bb      	strh	r3, [r7, #4]
	// Gyro
	uint8_t gyroMSB, gyroLSB;
	gyroMSB = (gyroReading >> 8) & 0xFF;
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	75fb      	strb	r3, [r7, #23]
	gyroLSB = gyroReading & 0xFF;
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	75bb      	strb	r3, [r7, #22]

	printf("gyro reading is  = %d\r\n", gyroReading);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	4619      	mov	r1, r3
 80013b8:	482a      	ldr	r0, [pc, #168]	@ (8001464 <transmit_sensor_packet+0xcc>)
 80013ba:	f007 fa3b 	bl	8008834 <iprintf>
	printf("pulse reading is  = %d\r\n", flowReading);
 80013be:	88bb      	ldrh	r3, [r7, #4]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4829      	ldr	r0, [pc, #164]	@ (8001468 <transmit_sensor_packet+0xd0>)
 80013c4:	f007 fa36 	bl	8008834 <iprintf>

	TxData[0] = gyroMSB;
 80013c8:	4a28      	ldr	r2, [pc, #160]	@ (800146c <transmit_sensor_packet+0xd4>)
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	7013      	strb	r3, [r2, #0]
	TxData[1] = gyroLSB;
 80013ce:	4a27      	ldr	r2, [pc, #156]	@ (800146c <transmit_sensor_packet+0xd4>)
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	7053      	strb	r3, [r2, #1]

	// Pressure sensor
	uint16_t pres, temp;
	pres = (presTempReading >> 16) & 0xFFFF;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	82bb      	strh	r3, [r7, #20]
	temp = presTempReading & 0xFFFF;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	827b      	strh	r3, [r7, #18]

	printf("pressure reading is  = %d\r\n", pres);
 80013de:	8abb      	ldrh	r3, [r7, #20]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4823      	ldr	r0, [pc, #140]	@ (8001470 <transmit_sensor_packet+0xd8>)
 80013e4:	f007 fa26 	bl	8008834 <iprintf>
	printf("temp reading is  = %d\r\n", temp);
 80013e8:	8a7b      	ldrh	r3, [r7, #18]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4821      	ldr	r0, [pc, #132]	@ (8001474 <transmit_sensor_packet+0xdc>)
 80013ee:	f007 fa21 	bl	8008834 <iprintf>

	uint8_t presLSB, presMSB, tempLSB, tempMSB;
	presMSB = (pres >> 8) & 0xFF;
 80013f2:	8abb      	ldrh	r3, [r7, #20]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	747b      	strb	r3, [r7, #17]
	presLSB = pres & 0xFF;
 80013fa:	8abb      	ldrh	r3, [r7, #20]
 80013fc:	743b      	strb	r3, [r7, #16]
	tempMSB = (temp >> 8) & 0xFF;
 80013fe:	8a7b      	ldrh	r3, [r7, #18]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
	tempLSB = temp & 0xFF;
 8001406:	8a7b      	ldrh	r3, [r7, #18]
 8001408:	73bb      	strb	r3, [r7, #14]

	TxData[2] = presMSB;
 800140a:	4a18      	ldr	r2, [pc, #96]	@ (800146c <transmit_sensor_packet+0xd4>)
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	7093      	strb	r3, [r2, #2]
	TxData[3] = presLSB;
 8001410:	4a16      	ldr	r2, [pc, #88]	@ (800146c <transmit_sensor_packet+0xd4>)
 8001412:	7c3b      	ldrb	r3, [r7, #16]
 8001414:	70d3      	strb	r3, [r2, #3]
	TxData[4] = tempMSB;
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <transmit_sensor_packet+0xd4>)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	7113      	strb	r3, [r2, #4]
	TxData[5] = tempLSB;
 800141c:	4a13      	ldr	r2, [pc, #76]	@ (800146c <transmit_sensor_packet+0xd4>)
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	7153      	strb	r3, [r2, #5]

	// Flow sensor
	uint8_t flowMSB, flowLSB;

	flowMSB = (flowReading >> 8) & 0xFF;
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]
	flowLSB = flowReading & 0xFF;
 800142a:	88bb      	ldrh	r3, [r7, #4]
 800142c:	733b      	strb	r3, [r7, #12]

	TxData[6] = flowMSB;
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <transmit_sensor_packet+0xd4>)
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	7193      	strb	r3, [r2, #6]
	TxData[7] = flowLSB;
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <transmit_sensor_packet+0xd4>)
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	71d3      	strb	r3, [r2, #7]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <transmit_sensor_packet+0xe0>)
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <transmit_sensor_packet+0xd4>)
 800143e:	490f      	ldr	r1, [pc, #60]	@ (800147c <transmit_sensor_packet+0xe4>)
 8001440:	480f      	ldr	r0, [pc, #60]	@ (8001480 <transmit_sensor_packet+0xe8>)
 8001442:	f001 ffb2 	bl	80033aa <HAL_CAN_AddTxMessage>
	printf("HAL CAN Transmit Result: %d\r\n", HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox));
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <transmit_sensor_packet+0xe0>)
 8001448:	4a08      	ldr	r2, [pc, #32]	@ (800146c <transmit_sensor_packet+0xd4>)
 800144a:	490c      	ldr	r1, [pc, #48]	@ (800147c <transmit_sensor_packet+0xe4>)
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <transmit_sensor_packet+0xe8>)
 800144e:	f001 ffac 	bl	80033aa <HAL_CAN_AddTxMessage>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <transmit_sensor_packet+0xec>)
 8001458:	f007 f9ec 	bl	8008834 <iprintf>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0800a884 	.word	0x0800a884
 8001468:	0800a89c 	.word	0x0800a89c
 800146c:	20000320 	.word	0x20000320
 8001470:	0800a8b8 	.word	0x0800a8b8
 8001474:	0800a8d4 	.word	0x0800a8d4
 8001478:	20000328 	.word	0x20000328
 800147c:	200002bc 	.word	0x200002bc
 8001480:	20000294 	.word	0x20000294
 8001484:	0800a8ec 	.word	0x0800a8ec

08001488 <controlThrusterStateCAN>:

void controlThrusterStateCAN(uint8_t controllerCommand){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	// turn right
	if(controllerCommand & 0b1){
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <controlThrusterStateCAN+0x28>
			printf("turn right (activate left thruster) \r\n");
 800149c:	481a      	ldr	r0, [pc, #104]	@ (8001508 <controlThrusterStateCAN+0x80>)
 800149e:	f007 fa31 	bl	8008904 <puts>
			set_thruster(0);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe7c 	bl	80011a0 <set_thruster>
			stop_thruster(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fe97 	bl	80011dc <stop_thruster>
	else {
		stop_thruster(0);
		stop_thruster(1);
	}

}
 80014ae:	e027      	b.n	8001500 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 1) & 0b1){
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <controlThrusterStateCAN+0x4a>
		printf("turn right (activate right thruster) \r\n");
 80014be:	4813      	ldr	r0, [pc, #76]	@ (800150c <controlThrusterStateCAN+0x84>)
 80014c0:	f007 fa20 	bl	8008904 <puts>
		set_thruster(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff fe6b 	bl	80011a0 <set_thruster>
		stop_thruster(0);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fe86 	bl	80011dc <stop_thruster>
}
 80014d0:	e016      	b.n	8001500 <controlThrusterStateCAN+0x78>
	else if((controllerCommand >> 3) & 0b1){
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d009      	beq.n	80014f4 <controlThrusterStateCAN+0x6c>
		printf("forwards \r\n");
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <controlThrusterStateCAN+0x88>)
 80014e2:	f007 fa0f 	bl	8008904 <puts>
		set_thruster(0);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fe5a 	bl	80011a0 <set_thruster>
		set_thruster(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fe57 	bl	80011a0 <set_thruster>
}
 80014f2:	e005      	b.n	8001500 <controlThrusterStateCAN+0x78>
		stop_thruster(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fe71 	bl	80011dc <stop_thruster>
		stop_thruster(1);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fe6e 	bl	80011dc <stop_thruster>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800a90c 	.word	0x0800a90c
 800150c:	0800a934 	.word	0x0800a934
 8001510:	0800a95c 	.word	0x0800a95c

08001514 <controlThrusterSpeedCAN>:

void controlThrusterSpeedCAN(uint8_t controllerCommand) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	// decrease speed
	if(((controllerCommand >> 5) & 0b1) && !((controllerCommand >> 4) & 0b1)){
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <controlThrusterSpeedCAN+0x2c>
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <controlThrusterSpeedCAN+0x2c>
		pwm_val_decrease();
 800153a:	f7ff fdf5 	bl	8001128 <pwm_val_decrease>
	}
	// increase speed
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
		pwm_val_increase();
	}
}
 800153e:	e00f      	b.n	8001560 <controlThrusterSpeedCAN+0x4c>
	else if(((controllerCommand >> 4) & 0b1) && !((controllerCommand >> 5) & 0b1)){
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <controlThrusterSpeedCAN+0x4c>
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <controlThrusterSpeedCAN+0x4c>
		pwm_val_increase();
 800155c:	f7ff fdc8 	bl	80010f0 <pwm_val_increase>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <controlLinearActuatorCAN>:


void controlLinearActuatorCAN(uint8_t controllerCommand) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	// decrease speed
		if((controllerCommand >> 7) & 0b1 && !((controllerCommand >> 6) & 0b1)){//up
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	09db      	lsrs	r3, r3, #7
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <controlLinearActuatorCAN+0x30>
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	099b      	lsrs	r3, r3, #6
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d104      	bne.n	8001598 <controlLinearActuatorCAN+0x30>
			printf("syringe up\r\n");
 800158e:	4815      	ldr	r0, [pc, #84]	@ (80015e4 <controlLinearActuatorCAN+0x7c>)
 8001590:	f007 f9b8 	bl	8008904 <puts>
			goUp();
 8001594:	f7ff fe40 	bl	8001218 <goUp>
		 }
		 if(!((controllerCommand >> 7) & 0b1) && (controllerCommand >> 6) & 0b1){//down
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	09db      	lsrs	r3, r3, #7
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10b      	bne.n	80015be <controlLinearActuatorCAN+0x56>
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <controlLinearActuatorCAN+0x56>
			 printf("syringe down\r\n");
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <controlLinearActuatorCAN+0x80>)
 80015b6:	f007 f9a5 	bl	8008904 <puts>
			 goDown();
 80015ba:	f7ff fe3f 	bl	800123c <goDown>
		 }
		 if(!((controllerCommand >> 7) & 0b1) && !((controllerCommand >> 6)) & 0b1){//down
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	09db      	lsrs	r3, r3, #7
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <controlLinearActuatorCAN+0x72>
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	099b      	lsrs	r3, r3, #6
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <controlLinearActuatorCAN+0x72>
			 stop();
 80015d6:	f7ff fe43 	bl	8001260 <stop>
		 }
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	0800a968 	.word	0x0800a968
 80015e8:	0800a974 	.word	0x0800a974

080015ec <diagnose_gyro>:
#define HEADING_ADDR 0x1A

extern I2C_HandleTypeDef hi2c1;


void diagnose_gyro(HAL_StatusTypeDef ret, char* message) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d053      	beq.n	80016a6 <diagnose_gyro+0xba>
		printf(message);
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f007 f918 	bl	8008834 <iprintf>
		printf("\r\n");
 8001604:	482a      	ldr	r0, [pc, #168]	@ (80016b0 <diagnose_gyro+0xc4>)
 8001606:	f007 f97d 	bl	8008904 <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c1);
 800160a:	482a      	ldr	r0, [pc, #168]	@ (80016b4 <diagnose_gyro+0xc8>)
 800160c:	f003 f86a 	bl	80046e4 <HAL_I2C_GetError>
 8001610:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <diagnose_gyro+0x34>
			 printf("No Error\r\n");
 8001618:	4827      	ldr	r0, [pc, #156]	@ (80016b8 <diagnose_gyro+0xcc>)
 800161a:	f007 f973 	bl	8008904 <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 800161e:	e042      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <diagnose_gyro+0x46>
			 printf("Bus Error\r\n");
 800162a:	4824      	ldr	r0, [pc, #144]	@ (80016bc <diagnose_gyro+0xd0>)
 800162c:	f007 f96a 	bl	8008904 <puts>
}
 8001630:	e039      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <diagnose_gyro+0x58>
			 printf("Arbitration Lost Error\r\n");
 800163c:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <diagnose_gyro+0xd4>)
 800163e:	f007 f961 	bl	8008904 <puts>
}
 8001642:	e030      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <diagnose_gyro+0x6a>
			 printf("Acknowledge Failure Error\r\n");
 800164e:	481d      	ldr	r0, [pc, #116]	@ (80016c4 <diagnose_gyro+0xd8>)
 8001650:	f007 f958 	bl	8008904 <puts>
}
 8001654:	e027      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <diagnose_gyro+0x7c>
			 printf("Overrun/Underrun Error\r\n");
 8001660:	4819      	ldr	r0, [pc, #100]	@ (80016c8 <diagnose_gyro+0xdc>)
 8001662:	f007 f94f 	bl	8008904 <puts>
}
 8001666:	e01e      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <diagnose_gyro+0x8e>
			 printf("DMA Transfer Error\r\n");
 8001672:	4816      	ldr	r0, [pc, #88]	@ (80016cc <diagnose_gyro+0xe0>)
 8001674:	f007 f946 	bl	8008904 <puts>
}
 8001678:	e015      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <diagnose_gyro+0xa0>
			 printf("Timeout Error\r\n");
 8001684:	4812      	ldr	r0, [pc, #72]	@ (80016d0 <diagnose_gyro+0xe4>)
 8001686:	f007 f93d 	bl	8008904 <puts>
}
 800168a:	e00c      	b.n	80016a6 <diagnose_gyro+0xba>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <diagnose_gyro+0xb2>
			 printf("Size Management Error\r\n");
 8001696:	480f      	ldr	r0, [pc, #60]	@ (80016d4 <diagnose_gyro+0xe8>)
 8001698:	f007 f934 	bl	8008904 <puts>
}
 800169c:	e003      	b.n	80016a6 <diagnose_gyro+0xba>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <diagnose_gyro+0xec>)
 80016a2:	f007 f8c7 	bl	8008834 <iprintf>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800a984 	.word	0x0800a984
 80016b4:	20000340 	.word	0x20000340
 80016b8:	0800a988 	.word	0x0800a988
 80016bc:	0800a994 	.word	0x0800a994
 80016c0:	0800a9a0 	.word	0x0800a9a0
 80016c4:	0800a9b8 	.word	0x0800a9b8
 80016c8:	0800a9d4 	.word	0x0800a9d4
 80016cc:	0800a9ec 	.word	0x0800a9ec
 80016d0:	0800aa00 	.word	0x0800aa00
 80016d4:	0800aa10 	.word	0x0800aa10
 80016d8:	0800aa28 	.word	0x0800aa28

080016dc <gyro_init>:

void gyro_init() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;

	printf("\r\n\r\n-------GYRO INIT-------\r\n");
 80016e2:	4817      	ldr	r0, [pc, #92]	@ (8001740 <gyro_init+0x64>)
 80016e4:	f007 f90e 	bl	8008904 <puts>


	// set operating mode ---------------------------------------
	buf[0] = OPR_MODE_ADDR;
 80016e8:	233d      	movs	r3, #61	@ 0x3d
 80016ea:	713b      	strb	r3, [r7, #4]
	buf[1] = IMU_FUSION_MODE;
 80016ec:	2308      	movs	r3, #8
 80016ee:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2302      	movs	r3, #2
 80016fa:	2150      	movs	r1, #80	@ 0x50
 80016fc:	4811      	ldr	r0, [pc, #68]	@ (8001744 <gyro_init+0x68>)
 80016fe:	f002 fde3 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	diagnose_gyro(ret, "error setting op mode");
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	490f      	ldr	r1, [pc, #60]	@ (8001748 <gyro_init+0x6c>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff6e 	bl	80015ec <diagnose_gyro>

	// set unit  ---------------------------------------
	buf[0] = UNIT_SELECT_ADDR;
 8001710:	233b      	movs	r3, #59	@ 0x3b
 8001712:	713b      	strb	r3, [r7, #4]
	buf[1] = UNIT_SELECT_DEGREES;
 8001714:	2300      	movs	r3, #0
 8001716:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 8001718:	1d3a      	adds	r2, r7, #4
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2302      	movs	r3, #2
 8001722:	2150      	movs	r1, #80	@ 0x50
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <gyro_init+0x68>)
 8001726:	f002 fdcf 	bl	80042c8 <HAL_I2C_Master_Transmit>
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	diagnose_gyro(ret, "error setting unit");
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4906      	ldr	r1, [pc, #24]	@ (800174c <gyro_init+0x70>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff5a 	bl	80015ec <diagnose_gyro>

	return;
 8001738:	bf00      	nop
}
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800aa44 	.word	0x0800aa44
 8001744:	20000340 	.word	0x20000340
 8001748:	0800aa64 	.word	0x0800aa64
 800174c:	0800aa7c 	.word	0x0800aa7c

08001750 <gyroGetReading>:


	return;
}

uint16_t gyroGetReading() {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint16_t heading;
	uint16_t heading_calibrated;

	// I2C
	buf[0] = HEADING_ADDR;
 8001756:	231a      	movs	r3, #26
 8001758:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 1, 1000);
 800175a:	463a      	mov	r2, r7
 800175c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2150      	movs	r1, #80	@ 0x50
 8001766:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <gyroGetReading+0x58>)
 8001768:	f002 fdae 	bl	80042c8 <HAL_I2C_Master_Transmit>
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
	ret = HAL_I2C_Master_Receive(&hi2c1, GYRO_ADDR, buf, 2, 1000);
 8001770:	463a      	mov	r2, r7
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2302      	movs	r3, #2
 800177a:	2150      	movs	r1, #80	@ 0x50
 800177c:	480a      	ldr	r0, [pc, #40]	@ (80017a8 <gyroGetReading+0x58>)
 800177e:	f002 febb 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]

	// Concatenate the data and calculate the heading
	heading = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 8001786:	783b      	ldrb	r3, [r7, #0]
 8001788:	b21a      	sxth	r2, r3
 800178a:	787b      	ldrb	r3, [r7, #1]
 800178c:	b21b      	sxth	r3, r3
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	80bb      	strh	r3, [r7, #4]
	heading_calibrated = heading/16;
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	807b      	strh	r3, [r7, #2]
	return heading_calibrated;
 800179e:	887b      	ldrh	r3, [r7, #2]

}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000340 	.word	0x20000340

080017ac <i2c_check>:
//                                                //
//        Helper functions for debugging          //
//                                                //
////////////////////////////////////////////////////

void i2c_check (HAL_StatusTypeDef ret, char* message) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <i2c_check+0x1c>
		printf("Pressure Sensor Error: %s\r\n", message);
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <i2c_check+0x2c>)
 80017c2:	f007 f837 	bl	8008834 <iprintf>
	} else {
		printf("Success: %s\r\n", message);
	}
}
 80017c6:	e003      	b.n	80017d0 <i2c_check+0x24>
		printf("Success: %s\r\n", message);
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <i2c_check+0x30>)
 80017cc:	f007 f832 	bl	8008834 <iprintf>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800aab8 	.word	0x0800aab8
 80017dc:	0800aad4 	.word	0x0800aad4

080017e0 <clear_buf>:
	printf("buf[0]: "); print_binary_uint8(buf[0]); printf("\r\n");
	printf("buf[1]: "); print_binary_uint8(buf[1]); printf("\r\n");
	printf("buf[2]: "); print_binary_uint8(buf[2]); printf("\r\n");
}

void clear_buf(uint8_t *buf) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	memset(buf, 0, 3 * sizeof(*buf));
 80017e8:	2203      	movs	r2, #3
 80017ea:	2100      	movs	r1, #0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f007 f969 	bl	8008ac4 <memset>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <diagnose_pressure>:

void diagnose_pressure(HAL_StatusTypeDef ret) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_BUSY){
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d102      	bne.n	8001812 <diagnose_pressure+0x16>
		printf("hal_busy\r\n");
 800180c:	4833      	ldr	r0, [pc, #204]	@ (80018dc <diagnose_pressure+0xe0>)
 800180e:	f007 f879 	bl	8008904 <puts>
	}
	if(ret == HAL_TIMEOUT){
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d102      	bne.n	800181e <diagnose_pressure+0x22>
			printf("hal_timeout\r\n");
 8001818:	4831      	ldr	r0, [pc, #196]	@ (80018e0 <diagnose_pressure+0xe4>)
 800181a:	f007 f873 	bl	8008904 <puts>
	}
	if(ret == HAL_ERROR){
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <diagnose_pressure+0x2e>
			printf("hal_error\r\n");
 8001824:	482f      	ldr	r0, [pc, #188]	@ (80018e4 <diagnose_pressure+0xe8>)
 8001826:	f007 f86d 	bl	8008904 <puts>
	}
	if (ret == HAL_ERROR) {
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d150      	bne.n	80018d2 <diagnose_pressure+0xd6>
		printf("\r\n");
 8001830:	482d      	ldr	r0, [pc, #180]	@ (80018e8 <diagnose_pressure+0xec>)
 8001832:	f007 f867 	bl	8008904 <puts>
		 uint32_t errorCode = HAL_I2C_GetError(&hi2c1);
 8001836:	482d      	ldr	r0, [pc, #180]	@ (80018ec <diagnose_pressure+0xf0>)
 8001838:	f002 ff54 	bl	80046e4 <HAL_I2C_GetError>
 800183c:	60f8      	str	r0, [r7, #12]

		 if (errorCode == HAL_I2C_ERROR_NONE) {
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d103      	bne.n	800184c <diagnose_pressure+0x50>
			 printf("No Error\r\n");
 8001844:	482a      	ldr	r0, [pc, #168]	@ (80018f0 <diagnose_pressure+0xf4>)
 8001846:	f007 f85d 	bl	8008904 <puts>
		 } else {
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
		 }

	  }
}
 800184a:	e042      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_BERR) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <diagnose_pressure+0x62>
			 printf("Bus Error\r\n");
 8001856:	4827      	ldr	r0, [pc, #156]	@ (80018f4 <diagnose_pressure+0xf8>)
 8001858:	f007 f854 	bl	8008904 <puts>
}
 800185c:	e039      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_ARLO) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <diagnose_pressure+0x74>
			 printf("Arbitration Lost Error\r\n");
 8001868:	4823      	ldr	r0, [pc, #140]	@ (80018f8 <diagnose_pressure+0xfc>)
 800186a:	f007 f84b 	bl	8008904 <puts>
}
 800186e:	e030      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_AF) {
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <diagnose_pressure+0x86>
			 printf("Acknowledge Failure Error\r\n");
 800187a:	4820      	ldr	r0, [pc, #128]	@ (80018fc <diagnose_pressure+0x100>)
 800187c:	f007 f842 	bl	8008904 <puts>
}
 8001880:	e027      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_OVR) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <diagnose_pressure+0x98>
			 printf("Overrun/Underrun Error\r\n");
 800188c:	481c      	ldr	r0, [pc, #112]	@ (8001900 <diagnose_pressure+0x104>)
 800188e:	f007 f839 	bl	8008904 <puts>
}
 8001892:	e01e      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_DMA) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <diagnose_pressure+0xaa>
			 printf("DMA Transfer Error\r\n");
 800189e:	4819      	ldr	r0, [pc, #100]	@ (8001904 <diagnose_pressure+0x108>)
 80018a0:	f007 f830 	bl	8008904 <puts>
}
 80018a4:	e015      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <diagnose_pressure+0xbc>
			 printf("Timeout Error\r\n");
 80018b0:	4815      	ldr	r0, [pc, #84]	@ (8001908 <diagnose_pressure+0x10c>)
 80018b2:	f007 f827 	bl	8008904 <puts>
}
 80018b6:	e00c      	b.n	80018d2 <diagnose_pressure+0xd6>
		 } else if (errorCode & HAL_I2C_ERROR_SIZE) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <diagnose_pressure+0xce>
			 printf("Size Management Error\r\n");
 80018c2:	4812      	ldr	r0, [pc, #72]	@ (800190c <diagnose_pressure+0x110>)
 80018c4:	f007 f81e 	bl	8008904 <puts>
}
 80018c8:	e003      	b.n	80018d2 <diagnose_pressure+0xd6>
			 printf("Unknown Error: 0x%08lX\r\n", errorCode);
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	4810      	ldr	r0, [pc, #64]	@ (8001910 <diagnose_pressure+0x114>)
 80018ce:	f006 ffb1 	bl	8008834 <iprintf>
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800ab9c 	.word	0x0800ab9c
 80018e0:	0800aba8 	.word	0x0800aba8
 80018e4:	0800abb8 	.word	0x0800abb8
 80018e8:	0800a984 	.word	0x0800a984
 80018ec:	20000340 	.word	0x20000340
 80018f0:	0800a988 	.word	0x0800a988
 80018f4:	0800a994 	.word	0x0800a994
 80018f8:	0800a9a0 	.word	0x0800a9a0
 80018fc:	0800a9b8 	.word	0x0800a9b8
 8001900:	0800a9d4 	.word	0x0800a9d4
 8001904:	0800a9ec 	.word	0x0800a9ec
 8001908:	0800aa00 	.word	0x0800aa00
 800190c:	0800aa10 	.word	0x0800aa10
 8001910:	0800aa28 	.word	0x0800aa28

08001914 <pressure_temp_Init>:
//             Sensor Calibration                 //
//                                                //
////////////////////////////////////////////////////


void pressure_temp_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <clear_buf>

	printf("\r\n\r\n-----Begin Pressure Sensor-----\r\n");
 8001922:	4811      	ldr	r0, [pc, #68]	@ (8001968 <pressure_temp_Init+0x54>)
 8001924:	f006 ffee 	bl	8008904 <puts>

	//reset (needed to reconfigure on boot) ---------------------
	HAL_Delay(200);
 8001928:	20c8      	movs	r0, #200	@ 0xc8
 800192a:	f001 fb11 	bl	8002f50 <HAL_Delay>
	buf[0] = 0x1E;//reset command
 800192e:	231e      	movs	r3, #30
 8001930:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001932:	1d3a      	adds	r2, r7, #4
 8001934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	21ec      	movs	r1, #236	@ 0xec
 800193e:	480b      	ldr	r0, [pc, #44]	@ (800196c <pressure_temp_Init+0x58>)
 8001940:	f002 fcc2 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
	diagnose_pressure(ret);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff56 	bl	80017fc <diagnose_pressure>
	i2c_check(ret, "reset command");
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4907      	ldr	r1, [pc, #28]	@ (8001970 <pressure_temp_Init+0x5c>)
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff29 	bl	80017ac <i2c_check>
	HAL_Delay(200);
 800195a:	20c8      	movs	r0, #200	@ 0xc8
 800195c:	f001 faf8 	bl	8002f50 <HAL_Delay>

}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	0800abc4 	.word	0x0800abc4
 800196c:	20000340 	.word	0x20000340
 8001970:	0800abec 	.word	0x0800abec

08001974 <pressure_temp_calibrate>:


void pressure_temp_calibrate(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff2f 	bl	80017e0 <clear_buf>

	printf("Calibrating Pressure Sensor...\r\n");
 8001982:	48a2      	ldr	r0, [pc, #648]	@ (8001c0c <pressure_temp_calibrate+0x298>)
 8001984:	f006 ffbe 	bl	8008904 <puts>

	//read PROM (calibration data) ------------------------------
	HAL_Delay(100);
 8001988:	2064      	movs	r0, #100	@ 0x64
 800198a:	f001 fae1 	bl	8002f50 <HAL_Delay>

	buf[0] = 0xA0; //PROM read command c0
 800198e:	23a0      	movs	r3, #160	@ 0xa0
 8001990:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001992:	1d3a      	adds	r2, r7, #4
 8001994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2301      	movs	r3, #1
 800199c:	21ec      	movs	r1, #236	@ 0xec
 800199e:	489c      	ldr	r0, [pc, #624]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 80019a0:	f002 fc92 	bl	80042c8 <HAL_I2C_Master_Transmit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	499a      	ldr	r1, [pc, #616]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fefd 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 80019b2:	1d3a      	adds	r2, r7, #4
 80019b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	21ec      	movs	r1, #236	@ 0xec
 80019be:	4894      	ldr	r0, [pc, #592]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 80019c0:	f002 fd9a 	bl	80044f8 <HAL_I2C_Master_Receive>
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4993      	ldr	r1, [pc, #588]	@ (8001c18 <pressure_temp_calibrate+0x2a4>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff feed 	bl	80017ac <i2c_check>
	prom.c0 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C0
 80019d2:	793b      	ldrb	r3, [r7, #4]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	797b      	ldrb	r3, [r7, #5]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b8d      	ldr	r3, [pc, #564]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 80019e6:	801a      	strh	r2, [r3, #0]

	buf[0] = 0xA2; //PROM read command c1
 80019e8:	23a2      	movs	r3, #162	@ 0xa2
 80019ea:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 80019ec:	1d3a      	adds	r2, r7, #4
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	21ec      	movs	r1, #236	@ 0xec
 80019f8:	4885      	ldr	r0, [pc, #532]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 80019fa:	f002 fc65 	bl	80042c8 <HAL_I2C_Master_Transmit>
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4983      	ldr	r1, [pc, #524]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fed0 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001a0c:	1d3a      	adds	r2, r7, #4
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2302      	movs	r3, #2
 8001a16:	21ec      	movs	r1, #236	@ 0xec
 8001a18:	487d      	ldr	r0, [pc, #500]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001a1a:	f002 fd6d 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c1");
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	497c      	ldr	r1, [pc, #496]	@ (8001c18 <pressure_temp_calibrate+0x2a4>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fec0 	bl	80017ac <i2c_check>
	prom.c1 =  ((uint16_t)buf[0] << 8)  | buf[1];  //C1
 8001a2c:	793b      	ldrb	r3, [r7, #4]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	797b      	ldrb	r3, [r7, #5]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b77      	ldr	r3, [pc, #476]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001a40:	805a      	strh	r2, [r3, #2]

	buf[0] = 0xA4; //PROM read command c2
 8001a42:	23a4      	movs	r3, #164	@ 0xa4
 8001a44:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001a46:	1d3a      	adds	r2, r7, #4
 8001a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	21ec      	movs	r1, #236	@ 0xec
 8001a52:	486f      	ldr	r0, [pc, #444]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001a54:	f002 fc38 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	496d      	ldr	r1, [pc, #436]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fea3 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001a66:	1d3a      	adds	r2, r7, #4
 8001a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	21ec      	movs	r1, #236	@ 0xec
 8001a72:	4867      	ldr	r0, [pc, #412]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001a74:	f002 fd40 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c2");
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4968      	ldr	r1, [pc, #416]	@ (8001c20 <pressure_temp_calibrate+0x2ac>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe93 	bl	80017ac <i2c_check>
	prom.c2 =   ((uint16_t)buf[0] << 8)  | buf[1];  //C2
 8001a86:	793b      	ldrb	r3, [r7, #4]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	797b      	ldrb	r3, [r7, #5]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b60      	ldr	r3, [pc, #384]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001a9a:	809a      	strh	r2, [r3, #4]

	buf[0] = 0xA6; //PROM read command c3
 8001a9c:	23a6      	movs	r3, #166	@ 0xa6
 8001a9e:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001aa0:	1d3a      	adds	r2, r7, #4
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	21ec      	movs	r1, #236	@ 0xec
 8001aac:	4858      	ldr	r0, [pc, #352]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001aae:	f002 fc0b 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4956      	ldr	r1, [pc, #344]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fe76 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001ac0:	1d3a      	adds	r2, r7, #4
 8001ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	21ec      	movs	r1, #236	@ 0xec
 8001acc:	4850      	ldr	r0, [pc, #320]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001ace:	f002 fd13 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c3");
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4952      	ldr	r1, [pc, #328]	@ (8001c24 <pressure_temp_calibrate+0x2b0>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe66 	bl	80017ac <i2c_check>
	prom.c3 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C3
 8001ae0:	793b      	ldrb	r3, [r7, #4]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001af4:	80da      	strh	r2, [r3, #6]

	buf[0] = 0xA8; //PROM read command c4
 8001af6:	23a8      	movs	r3, #168	@ 0xa8
 8001af8:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001afa:	1d3a      	adds	r2, r7, #4
 8001afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	21ec      	movs	r1, #236	@ 0xec
 8001b06:	4842      	ldr	r0, [pc, #264]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001b08:	f002 fbde 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4940      	ldr	r1, [pc, #256]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe49 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001b1a:	1d3a      	adds	r2, r7, #4
 8001b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	21ec      	movs	r1, #236	@ 0xec
 8001b26:	483a      	ldr	r0, [pc, #232]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001b28:	f002 fce6 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c4");
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	493d      	ldr	r1, [pc, #244]	@ (8001c28 <pressure_temp_calibrate+0x2b4>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fe39 	bl	80017ac <i2c_check>
	prom.c4 =      ((uint16_t)buf[0] << 8)  | buf[1];  //C4
 8001b3a:	793b      	ldrb	r3, [r7, #4]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	797b      	ldrb	r3, [r7, #5]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001b4e:	811a      	strh	r2, [r3, #8]

	buf[0] = 0xAA; //PROM read command c5
 8001b50:	23aa      	movs	r3, #170	@ 0xaa
 8001b52:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001b54:	1d3a      	adds	r2, r7, #4
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	21ec      	movs	r1, #236	@ 0xec
 8001b60:	482b      	ldr	r0, [pc, #172]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001b62:	f002 fbb1 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4929      	ldr	r1, [pc, #164]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fe1c 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001b74:	1d3a      	adds	r2, r7, #4
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	21ec      	movs	r1, #236	@ 0xec
 8001b80:	4823      	ldr	r0, [pc, #140]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001b82:	f002 fcb9 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c5");
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4927      	ldr	r1, [pc, #156]	@ (8001c2c <pressure_temp_calibrate+0x2b8>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe0c 	bl	80017ac <i2c_check>
	prom.c5 =    ((uint16_t)buf[0] << 8) | buf[1]; //C5
 8001b94:	793b      	ldrb	r3, [r7, #4]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001ba8:	815a      	strh	r2, [r3, #10]

	buf[0] = 0xAC; //PROM read command c6
 8001baa:	23ac      	movs	r3, #172	@ 0xac
 8001bac:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001bae:	1d3a      	adds	r2, r7, #4
 8001bb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	21ec      	movs	r1, #236	@ 0xec
 8001bba:	4815      	ldr	r0, [pc, #84]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001bbc:	f002 fb84 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "command to read PROM data");
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4913      	ldr	r1, [pc, #76]	@ (8001c14 <pressure_temp_calibrate+0x2a0>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fdef 	bl	80017ac <i2c_check>
	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 2, 1000);
 8001bce:	1d3a      	adds	r2, r7, #4
 8001bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	21ec      	movs	r1, #236	@ 0xec
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <pressure_temp_calibrate+0x29c>)
 8001bdc:	f002 fc8c 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "receiving PROM data - c6");
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4912      	ldr	r1, [pc, #72]	@ (8001c30 <pressure_temp_calibrate+0x2bc>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fddf 	bl	80017ac <i2c_check>
	prom.c6 = ((uint16_t)buf[0] << 8) | buf[1]; //C6
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	797b      	ldrb	r3, [r7, #5]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <pressure_temp_calibrate+0x2a8>)
 8001c02:	819a      	strh	r2, [r3, #12]

}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	0800abfc 	.word	0x0800abfc
 8001c10:	20000340 	.word	0x20000340
 8001c14:	0800ac1c 	.word	0x0800ac1c
 8001c18:	0800ac38 	.word	0x0800ac38
 8001c1c:	20000330 	.word	0x20000330
 8001c20:	0800ac54 	.word	0x0800ac54
 8001c24:	0800ac70 	.word	0x0800ac70
 8001c28:	0800ac8c 	.word	0x0800ac8c
 8001c2c:	0800aca8 	.word	0x0800aca8
 8001c30:	0800acc4 	.word	0x0800acc4

08001c34 <init_pressure_reading>:
	pres_temp -> temperature = temp;
	pres_temp -> pressure = pressure;

}

void init_pressure_reading(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fdcf 	bl	80017e0 <clear_buf>

	//read digital pressure raw data (D1)  ------------------------
	clear_buf(buf);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fdcb 	bl	80017e0 <clear_buf>
	buf[0] = 0x48; // initiate pressure conversion command = 01001000
 8001c4a:	2348      	movs	r3, #72	@ 0x48
 8001c4c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001c4e:	1d3a      	adds	r2, r7, #4
 8001c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2301      	movs	r3, #1
 8001c58:	21ec      	movs	r1, #236	@ 0xec
 8001c5a:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <init_pressure_reading+0x44>)
 8001c5c:	f002 fb34 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "init D1 reading");
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4905      	ldr	r1, [pc, #20]	@ (8001c7c <init_pressure_reading+0x48>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fd9f 	bl	80017ac <i2c_check>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000340 	.word	0x20000340
 8001c7c:	0800ace0 	.word	0x0800ace0

08001c80 <init_temp_reading>:

void init_temp_reading(){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[3];
	clear_buf(buf);
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fda9 	bl	80017e0 <clear_buf>

	//read digital temperature raw data (D2) -----------------------
	buf[0] = 0x58; // initiate temperature conversion command = 01011000
 8001c8e:	2358      	movs	r3, #88	@ 0x58
 8001c90:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001c92:	1d3a      	adds	r2, r7, #4
 8001c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	21ec      	movs	r1, #236	@ 0xec
 8001c9e:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <init_temp_reading+0x3c>)
 8001ca0:	f002 fb12 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
	i2c_check(ret, "init D2 reading");
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4905      	ldr	r1, [pc, #20]	@ (8001cc0 <init_temp_reading+0x40>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd7d 	bl	80017ac <i2c_check>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000340 	.word	0x20000340
 8001cc0:	0800ad20 	.word	0x0800ad20

08001cc4 <read_pressure>:

uint32_t read_pressure(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[3];

	buf[0] = 0x0; // ADC read sequence command = 00000000
 8001cca:	2300      	movs	r3, #0
 8001ccc:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001cce:	1d3a      	adds	r2, r7, #4
 8001cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	21ec      	movs	r1, #236	@ 0xec
 8001cda:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <read_pressure+0x64>)
 8001cdc:	f002 faf4 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]
	i2c_check(ret, "command to receive D1 data");
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	4911      	ldr	r1, [pc, #68]	@ (8001d2c <read_pressure+0x68>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fd5f 	bl	80017ac <i2c_check>

	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 3, 1000); //read
 8001cee:	1d3a      	adds	r2, r7, #4
 8001cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	21ec      	movs	r1, #236	@ 0xec
 8001cfa:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <read_pressure+0x64>)
 8001cfc:	f002 fbfc 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001d00:	4603      	mov	r3, r0
 8001d02:	73fb      	strb	r3, [r7, #15]
	i2c_check(ret,"receiving D1 data");
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	490a      	ldr	r1, [pc, #40]	@ (8001d30 <read_pressure+0x6c>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd4f 	bl	80017ac <i2c_check>
	uint32_t D1 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[2];
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	4313      	orrs	r3, r2
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60bb      	str	r3, [r7, #8]
	return D1;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000340 	.word	0x20000340
 8001d2c:	0800acf0 	.word	0x0800acf0
 8001d30:	0800ad0c 	.word	0x0800ad0c

08001d34 <read_temp>:

uint32_t read_temp(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[3];

	buf[0] = 0x0; // ADC read sequence command = 00000000
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PRESSURE_ADDR, buf, 1, 1000 );
 8001d3e:	1d3a      	adds	r2, r7, #4
 8001d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	21ec      	movs	r1, #236	@ 0xec
 8001d4a:	4813      	ldr	r0, [pc, #76]	@ (8001d98 <read_temp+0x64>)
 8001d4c:	f002 fabc 	bl	80042c8 <HAL_I2C_Master_Transmit>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
	i2c_check(ret, "command to receive D2 data");
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4911      	ldr	r1, [pc, #68]	@ (8001d9c <read_temp+0x68>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd27 	bl	80017ac <i2c_check>

	ret = HAL_I2C_Master_Receive(&hi2c1, PRESSURE_ADDR, buf, 3, 1000); //read
 8001d5e:	1d3a      	adds	r2, r7, #4
 8001d60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2303      	movs	r3, #3
 8001d68:	21ec      	movs	r1, #236	@ 0xec
 8001d6a:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <read_temp+0x64>)
 8001d6c:	f002 fbc4 	bl	80044f8 <HAL_I2C_Master_Receive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]
	i2c_check(ret, "receiving D2 data");
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	490a      	ldr	r1, [pc, #40]	@ (8001da0 <read_temp+0x6c>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fd17 	bl	80017ac <i2c_check>
	uint32_t D2 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 8001d7e:	793b      	ldrb	r3, [r7, #4]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	4313      	orrs	r3, r2
 8001d88:	79ba      	ldrb	r2, [r7, #6]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
	return D2;
 8001d8e:	68bb      	ldr	r3, [r7, #8]

}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000340 	.word	0x20000340
 8001d9c:	0800ad30 	.word	0x0800ad30
 8001da0:	0800ad4c 	.word	0x0800ad4c

08001da4 <calculate_temp_pressure>:

uint32_t calculate_temp_pressure(uint32_t D2, uint32_t D1){
 8001da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da8:	b0b0      	sub	sp, #192	@ 0xc0
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8001db0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
	//Calculate temperature -----------------------------------------
	int32_t dT = D2 - (prom.c5 * 256); //difference between actual and reference temperature
 8001db4:	4bb6      	ldr	r3, [pc, #728]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001db6:	895b      	ldrh	r3, [r3, #10]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int32_t TEMP = 2000 + ((int64_t)dT*prom.c6) / 8388608; //actual temperature in Celcius
 8001dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dca:	17da      	asrs	r2, r3, #31
 8001dcc:	469a      	mov	sl, r3
 8001dce:	4693      	mov	fp, r2
 8001dd0:	4baf      	ldr	r3, [pc, #700]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001dd2:	899b      	ldrh	r3, [r3, #12]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	461c      	mov	r4, r3
 8001dda:	4615      	mov	r5, r2
 8001ddc:	fb04 f20b 	mul.w	r2, r4, fp
 8001de0:	fb0a f305 	mul.w	r3, sl, r5
 8001de4:	4413      	add	r3, r2
 8001de6:	fbaa 8904 	umull	r8, r9, sl, r4
 8001dea:	444b      	add	r3, r9
 8001dec:	4699      	mov	r9, r3
 8001dee:	4642      	mov	r2, r8
 8001df0:	464b      	mov	r3, r9
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da07      	bge.n	8001e06 <calculate_temp_pressure+0x62>
 8001df6:	49a7      	ldr	r1, [pc, #668]	@ (8002094 <calculate_temp_pressure+0x2f0>)
 8001df8:	1851      	adds	r1, r2, r1
 8001dfa:	6339      	str	r1, [r7, #48]	@ 0x30
 8001dfc:	f143 0300 	adc.w	r3, r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	0dd0      	lsrs	r0, r2, #23
 8001e10:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001e14:	15d9      	asrs	r1, r3, #23
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	//Calculate temperature compensated pressure ----------------------
	int64_t OFF = ((int64_t)prom.c2 * 65536) + ((int64_t)prom.c4 * dT)/128; //offset at actual temperature
 8001e24:	4b9a      	ldr	r3, [pc, #616]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001e26:	889b      	ldrh	r3, [r3, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e30:	f04f 0400 	mov.w	r4, #0
 8001e34:	f04f 0500 	mov.w	r5, #0
 8001e38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	041d      	lsls	r5, r3, #16
 8001e40:	460b      	mov	r3, r1
 8001e42:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 8001e46:	460b      	mov	r3, r1
 8001e48:	041c      	lsls	r4, r3, #16
 8001e4a:	4b91      	ldr	r3, [pc, #580]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001e4c:	891b      	ldrh	r3, [r3, #8]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e54:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e5a:	17da      	asrs	r2, r3, #31
 8001e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001e60:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e64:	464b      	mov	r3, r9
 8001e66:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	@ 0x60
 8001e6a:	4652      	mov	r2, sl
 8001e6c:	fb02 f203 	mul.w	r2, r2, r3
 8001e70:	465b      	mov	r3, fp
 8001e72:	4641      	mov	r1, r8
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	4642      	mov	r2, r8
 8001e7c:	4651      	mov	r1, sl
 8001e7e:	fba2 1201 	umull	r1, r2, r2, r1
 8001e82:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e86:	460a      	mov	r2, r1
 8001e88:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001e90:	4413      	add	r3, r2
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da07      	bge.n	8001eae <calculate_temp_pressure+0x10a>
 8001e9e:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001ea2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ea4:	f143 0300 	adc.w	r3, r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001eae:	f04f 0000 	mov.w	r0, #0
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	09d0      	lsrs	r0, r2, #7
 8001eb8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001ebc:	11d9      	asrs	r1, r3, #7
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18a1      	adds	r1, r4, r2
 8001ec4:	6239      	str	r1, [r7, #32]
 8001ec6:	eb45 0303 	adc.w	r3, r5, r3
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ecc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ed0:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0
	int64_t SENS = ((int64_t)prom.c1 * 32768) + ((int64_t)prom.c3 * dT)/256; //sensitivity at actual temperature
 8001ed4:	4b6e      	ldr	r3, [pc, #440]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ede:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ee0:	f04f 0400 	mov.w	r4, #0
 8001ee4:	f04f 0500 	mov.w	r5, #0
 8001ee8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8001eec:	4613      	mov	r3, r2
 8001eee:	03dd      	lsls	r5, r3, #15
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	03dc      	lsls	r4, r3, #15
 8001efa:	4b65      	ldr	r3, [pc, #404]	@ (8002090 <calculate_temp_pressure+0x2ec>)
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f04:	657a      	str	r2, [r7, #84]	@ 0x54
 8001f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f0a:	17da      	asrs	r2, r3, #31
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f10:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001f14:	464b      	mov	r3, r9
 8001f16:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	fb02 f203 	mul.w	r2, r2, r3
 8001f20:	465b      	mov	r3, fp
 8001f22:	4641      	mov	r1, r8
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	fba2 1201 	umull	r1, r2, r2, r1
 8001f32:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f36:	460a      	mov	r2, r1
 8001f38:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f40:	4413      	add	r3, r2
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f46:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da07      	bge.n	8001f5e <calculate_temp_pressure+0x1ba>
 8001f4e:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001f52:	61b9      	str	r1, [r7, #24]
 8001f54:	f143 0300 	adc.w	r3, r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	0a10      	lsrs	r0, r2, #8
 8001f68:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f6c:	1219      	asrs	r1, r3, #8
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	18a1      	adds	r1, r4, r2
 8001f74:	6139      	str	r1, [r7, #16]
 8001f76:	eb45 0303 	adc.w	r3, r5, r3
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f80:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8

	float temp = TEMP / 100.0f;
 8001f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f90:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002098 <calculate_temp_pressure+0x2f4>
 8001f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f98:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	float pressure = (((D1*SENS) / 2097152 - OFF) / 8192) / 10.0f; //final temperature compensated pressure
 8001f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fa4:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001faa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001fae:	462a      	mov	r2, r5
 8001fb0:	fb02 f203 	mul.w	r2, r2, r3
 8001fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fb8:	4621      	mov	r1, r4
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	fba2 1201 	umull	r1, r2, r2, r1
 8001fca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fcc:	460a      	mov	r2, r1
 8001fce:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001fd0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fd2:	4413      	add	r3, r2
 8001fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fd6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da07      	bge.n	8001fee <calculate_temp_pressure+0x24a>
 8001fde:	492f      	ldr	r1, [pc, #188]	@ (800209c <calculate_temp_pressure+0x2f8>)
 8001fe0:	1851      	adds	r1, r2, r1
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	f143 0300 	adc.w	r3, r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0d50      	lsrs	r0, r2, #21
 8001ff8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001ffc:	1559      	asrs	r1, r3, #21
 8001ffe:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002002:	1a84      	subs	r4, r0, r2
 8002004:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002006:	eb61 0303 	sbc.w	r3, r1, r3
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800200c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002010:	2b00      	cmp	r3, #0
 8002012:	da08      	bge.n	8002026 <calculate_temp_pressure+0x282>
 8002014:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8002018:	1851      	adds	r1, r2, r1
 800201a:	6039      	str	r1, [r7, #0]
 800201c:	f143 0300 	adc.w	r3, r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002026:	f04f 0000 	mov.w	r0, #0
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	0b50      	lsrs	r0, r2, #13
 8002030:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002034:	1359      	asrs	r1, r3, #13
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fe83 	bl	8000d48 <__aeabi_l2f>
 8002042:	ee06 0a90 	vmov	s13, r0
 8002046:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800204a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
//	printf("pressure: %f\r\n", pressure); //in units of millibar (mbar)
//	printf("temperature: %f\r\n", temp); //in degrees celcius

	uint16_t lsb = (uint16_t)temp;
 8002052:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205a:	ee17 3a90 	vmov	r3, s15
 800205e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
	uint16_t msb = (uint16_t)pressure;
 8002062:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	ee17 3a90 	vmov	r3, s15
 800206e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
//	printf("pressure (int) : %u\r\n", msb); //in units of millibar (mbar)
//	printf("temperature (int) : %u\r\n", lsb); //in degrees celcius
	uint32_t presTemp = (msb << 16) | lsb;
 8002072:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8002076:	041a      	lsls	r2, r3, #16
 8002078:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	return presTemp;
 8002082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
}
 8002086:	4618      	mov	r0, r3
 8002088:	37c0      	adds	r7, #192	@ 0xc0
 800208a:	46bd      	mov	sp, r7
 800208c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002090:	20000330 	.word	0x20000330
 8002094:	007fffff 	.word	0x007fffff
 8002098:	42c80000 	.word	0x42c80000
 800209c:	001fffff 	.word	0x001fffff

080020a0 <HAL_GPIO_EXTI_Callback>:
#define SRC_FLOWMETER_H_

extern uint16_t pulseCount;

//interrupt to count pulses
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_0){
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_GPIO_EXTI_Callback+0x1c>
		pulseCount++;
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80020ba:	801a      	strh	r2, [r3, #0]
	}
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000468 	.word	0x20000468

080020cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d132      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
    	if(readCode){
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x30>
    		D1 = read_pressure();
 80020e6:	f7ff fded 	bl	8001cc4 <read_pressure>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a19      	ldr	r2, [pc, #100]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80020ee:	6013      	str	r3, [r2, #0]
    		init_temp_reading();
 80020f0:	f7ff fdc6 	bl	8001c80 <init_temp_reading>
    		readCode = 0;
 80020f4:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e009      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x44>
    	}
    	else{
    		D2 = read_temp();
 80020fc:	f7ff fe1a 	bl	8001d34 <read_temp>
 8002100:	4603      	mov	r3, r0
 8002102:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002104:	6013      	str	r3, [r2, #0]
    		init_pressure_reading();
 8002106:	f7ff fd95 	bl	8001c34 <init_pressure_reading>
    		readCode = 1;
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    	}
    	presTempReading = calculate_temp_pressure(D2,D1);
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0f      	ldr	r2, [pc, #60]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe42 	bl	8001da4 <calculate_temp_pressure>
 8002120:	4603      	mov	r3, r0
 8002122:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002124:	6013      	str	r3, [r2, #0]
    	uint16_t gyroReading = gyroGetReading();
 8002126:	f7ff fb13 	bl	8001750 <gyroGetReading>
 800212a:	4603      	mov	r3, r0
 800212c:	81fb      	strh	r3, [r7, #14]
    	transmit_sensor_packet(gyroReading, presTempReading, pulseCount);
 800212e:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f92d 	bl	8001398 <transmit_sensor_packet>
    	pulseCount = 0;
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
    }
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40001000 	.word	0x40001000
 8002150:	2000046a 	.word	0x2000046a
 8002154:	2000046c 	.word	0x2000046c
 8002158:	20000470 	.word	0x20000470
 800215c:	20000474 	.word	0x20000474
 8002160:	20000468 	.word	0x20000468

08002164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216a:	f000 fe7c 	bl	8002e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216e:	f000 f841 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002172:	f000 fa91 	bl	8002698 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002176:	f000 f931 	bl	80023dc <MX_TIM1_Init>
  MX_TIM2_Init();
 800217a:	f000 f9dd 	bl	8002538 <MX_TIM2_Init>
  MX_CAN1_Init();
 800217e:	f000 f88b 	bl	8002298 <MX_CAN1_Init>
  MX_LPUART1_UART_Init();
 8002182:	f000 f8ff 	bl	8002384 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002186:	f000 f8bd 	bl	8002304 <MX_I2C1_Init>
  MX_TIM6_Init();
 800218a:	f000 fa4d 	bl	8002628 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //////// ---------------- THRUSTER INIT ------------------- ////////////
  //flash_thruster(0); DO NOT RUN
  //flash_thruster(1); DO NOT RUN
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800218e:	2104      	movs	r1, #4
 8002190:	4815      	ldr	r0, [pc, #84]	@ (80021e8 <main+0x84>)
 8002192:	f004 f883 	bl	800629c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002196:	2108      	movs	r1, #8
 8002198:	4814      	ldr	r0, [pc, #80]	@ (80021ec <main+0x88>)
 800219a:	f004 f87f 	bl	800629c <HAL_TIM_PWM_Start>
  init_thruster(0);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe ffde 	bl	8001160 <init_thruster>
  init_thruster(1);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7fe ffdb 	bl	8001160 <init_thruster>
  /////////////////////////////////////////////////////////////////////////

  ////// ------------------ CAN INIT --------------------------/////////////
  can_setup();
 80021aa:	f7ff f887 	bl	80012bc <can_setup>
  //////////////////////////////////////////////////////////////////////////

  //////// -------------- PRESSURE SENSOR INIT ----------------- ////////////
  pressure_temp_Init();
 80021ae:	f7ff fbb1 	bl	8001914 <pressure_temp_Init>
  pressure_temp_calibrate();
 80021b2:	f7ff fbdf 	bl	8001974 <pressure_temp_calibrate>
  ///////////////////////////////////////////////////////////////////////////////

  ////// ------------------ GYRO INIT ------------------------- ///////////
  gyro_init();
 80021b6:	f7ff fa91 	bl	80016dc <gyro_init>
  //////////////////////////////////////////////////////////////////////////

  ////////--------------TIM6 START ------------------------------/////////////
  HAL_TIM_Base_Start_IT(&htim6); // This must happen AFTER sensor initialization!!
 80021ba:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <main+0x8c>)
 80021bc:	f003 ffb8 	bl	8006130 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t control =0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	control = read_control_from_CAN();
 80021c4:	f7ff f8ce 	bl	8001364 <read_control_from_CAN>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
	controlThrusterStateCAN(control);
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f95a 	bl	8001488 <controlThrusterStateCAN>
	controlThrusterSpeedCAN(control);
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f99c 	bl	8001514 <controlThrusterSpeedCAN>
	controlLinearActuatorCAN(control);
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f9c2 	bl	8001568 <controlLinearActuatorCAN>
	control = read_control_from_CAN();
 80021e4:	bf00      	nop
 80021e6:	e7ed      	b.n	80021c4 <main+0x60>
 80021e8:	200001fc 	.word	0x200001fc
 80021ec:	20000248 	.word	0x20000248
 80021f0:	2000041c 	.word	0x2000041c

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b096      	sub	sp, #88	@ 0x58
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	2244      	movs	r2, #68	@ 0x44
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f006 fc5e 	bl	8008ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	463b      	mov	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800221a:	f002 fdbb 	bl	8004d94 <HAL_PWREx_ControlVoltageScaling>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002224:	f000 fad2 	bl	80027cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002228:	2310      	movs	r3, #16
 800222a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002234:	2360      	movs	r3, #96	@ 0x60
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002238:	2302      	movs	r3, #2
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800223c:	2301      	movs	r3, #1
 800223e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002240:	2301      	movs	r3, #1
 8002242:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002244:	2310      	movs	r3, #16
 8002246:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002248:	2307      	movs	r3, #7
 800224a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800224c:	2302      	movs	r3, #2
 800224e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002250:	2302      	movs	r3, #2
 8002252:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fdf1 	bl	8004e40 <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002264:	f000 fab2 	bl	80027cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002268:	230f      	movs	r3, #15
 800226a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226c:	2303      	movs	r3, #3
 800226e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f9f1 	bl	8005668 <HAL_RCC_ClockConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800228c:	f000 fa9e 	bl	80027cc <Error_Handler>
  }
}
 8002290:	bf00      	nop
 8002292:	3758      	adds	r7, #88	@ 0x58
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <MX_CAN1_Init+0x64>)
 800229e:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <MX_CAN1_Init+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 240;
 80022a2:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022a4:	22f0      	movs	r2, #240	@ 0xf0
 80022a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	@ (80022fc <MX_CAN1_Init+0x64>)
 80022ea:	f000 fe55 	bl	8002f98 <HAL_CAN_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80022f4:	f000 fa6a 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000294 	.word	0x20000294
 8002300:	40006400 	.word	0x40006400

08002304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <MX_I2C1_Init+0x74>)
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <MX_I2C1_Init+0x78>)
 800230c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002310:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <MX_I2C1_Init+0x7c>)
 8002312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_I2C1_Init+0x74>)
 800231c:	2201      	movs	r2, #1
 800231e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_I2C1_Init+0x74>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_I2C1_Init+0x74>)
 800233a:	2200      	movs	r2, #0
 800233c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002340:	f001 ff26 	bl	8004190 <HAL_I2C_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800234a:	f000 fa3f 	bl	80027cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800234e:	2100      	movs	r1, #0
 8002350:	4809      	ldr	r0, [pc, #36]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002352:	f002 fc79 	bl	8004c48 <HAL_I2CEx_ConfigAnalogFilter>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800235c:	f000 fa36 	bl	80027cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002364:	f002 fcbb 	bl	8004cde <HAL_I2CEx_ConfigDigitalFilter>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800236e:	f000 fa2d 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000340 	.word	0x20000340
 800237c:	40005400 	.word	0x40005400
 8002380:	00b07cb4 	.word	0x00b07cb4

08002384 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 800238a:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <MX_LPUART1_UART_Init+0x54>)
 800238c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 8002390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002394:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <MX_LPUART1_UART_Init+0x50>)
 80023c2:	f005 f801 	bl	80073c8 <HAL_UART_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80023cc:	f000 f9fe 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000394 	.word	0x20000394
 80023d8:	40008000 	.word	0x40008000

080023dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b09a      	sub	sp, #104	@ 0x68
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	222c      	movs	r2, #44	@ 0x2c
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f006 fb54 	bl	8008ac4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800241c:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <MX_TIM1_Init+0x154>)
 800241e:	4a45      	ldr	r2, [pc, #276]	@ (8002534 <MX_TIM1_Init+0x158>)
 8002420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 399;
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002424:	f240 128f 	movw	r2, #399	@ 0x18f
 8002428:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <MX_TIM1_Init+0x154>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 8002430:	4b3f      	ldr	r3, [pc, #252]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002432:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002436:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <MX_TIM1_Init+0x154>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800243e:	4b3c      	ldr	r3, [pc, #240]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b3a      	ldr	r3, [pc, #232]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800244a:	4839      	ldr	r0, [pc, #228]	@ (8002530 <MX_TIM1_Init+0x154>)
 800244c:	f003 fe18 	bl	8006080 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002456:	f000 f9b9 	bl	80027cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002464:	4619      	mov	r1, r3
 8002466:	4832      	ldr	r0, [pc, #200]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002468:	f004 fa12 	bl	8006890 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002472:	f000 f9ab 	bl	80027cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002476:	482e      	ldr	r0, [pc, #184]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002478:	f003 feae 	bl	80061d8 <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002482:	f000 f9a3 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002492:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002496:	4619      	mov	r1, r3
 8002498:	4825      	ldr	r0, [pc, #148]	@ (8002530 <MX_TIM1_Init+0x154>)
 800249a:	f004 fe99 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80024a4:	f000 f992 	bl	80027cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a8:	2360      	movs	r3, #96	@ 0x60
 80024aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024c8:	2208      	movs	r2, #8
 80024ca:	4619      	mov	r1, r3
 80024cc:	4818      	ldr	r0, [pc, #96]	@ (8002530 <MX_TIM1_Init+0x154>)
 80024ce:	f004 f8cb 	bl	8006668 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80024d8:	f000 f978 	bl	80027cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4807      	ldr	r0, [pc, #28]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002512:	f004 fec3 	bl	800729c <HAL_TIMEx_ConfigBreakDeadTime>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800251c:	f000 f956 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002520:	4803      	ldr	r0, [pc, #12]	@ (8002530 <MX_TIM1_Init+0x154>)
 8002522:	f000 fae7 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 8002526:	bf00      	nop
 8002528:	3768      	adds	r7, #104	@ 0x68
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000248 	.word	0x20000248
 8002534:	40012c00 	.word	0x40012c00

08002538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	@ 0x38
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <MX_TIM2_Init+0xec>)
 800256c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 399;
 8002572:	4b2c      	ldr	r3, [pc, #176]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002574:	f240 128f 	movw	r2, #399	@ 0x18f
 8002578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <MX_TIM2_Init+0xec>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1599;
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002582:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <MX_TIM2_Init+0xec>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002594:	4823      	ldr	r0, [pc, #140]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002596:	f003 fd73 	bl	8006080 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80025a0:	f000 f914 	bl	80027cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ae:	4619      	mov	r1, r3
 80025b0:	481c      	ldr	r0, [pc, #112]	@ (8002624 <MX_TIM2_Init+0xec>)
 80025b2:	f004 f96d 	bl	8006890 <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80025bc:	f000 f906 	bl	80027cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025c0:	4818      	ldr	r0, [pc, #96]	@ (8002624 <MX_TIM2_Init+0xec>)
 80025c2:	f003 fe09 	bl	80061d8 <HAL_TIM_PWM_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80025cc:	f000 f8fe 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4811      	ldr	r0, [pc, #68]	@ (8002624 <MX_TIM2_Init+0xec>)
 80025e0:	f004 fdf6 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80025ea:	f000 f8ef 	bl	80027cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ee:	2360      	movs	r3, #96	@ 0x60
 80025f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	2204      	movs	r2, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4807      	ldr	r0, [pc, #28]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002606:	f004 f82f 	bl	8006668 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002610:	f000 f8dc 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <MX_TIM2_Init+0xec>)
 8002616:	f000 fa6d 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 800261a:	bf00      	nop
 800261c:	3738      	adds	r7, #56	@ 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200001fc 	.word	0x200001fc

08002628 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <MX_TIM6_Init+0x68>)
 800263a:	4a16      	ldr	r2, [pc, #88]	@ (8002694 <MX_TIM6_Init+0x6c>)
 800263c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <MX_TIM6_Init+0x68>)
 8002640:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002644:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_TIM6_Init+0x68>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1599;
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <MX_TIM6_Init+0x68>)
 800264e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002652:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_TIM6_Init+0x68>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800265a:	480d      	ldr	r0, [pc, #52]	@ (8002690 <MX_TIM6_Init+0x68>)
 800265c:	f003 fd10 	bl	8006080 <HAL_TIM_Base_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002666:	f000 f8b1 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4806      	ldr	r0, [pc, #24]	@ (8002690 <MX_TIM6_Init+0x68>)
 8002678:	f004 fdaa 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002682:	f000 f8a3 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000041c 	.word	0x2000041c
 8002694:	40001000 	.word	0x40001000

08002698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b3c      	ldr	r3, [pc, #240]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ba:	4b39      	ldr	r3, [pc, #228]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a35      	ldr	r2, [pc, #212]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d2:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b30      	ldr	r3, [pc, #192]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	4a2f      	ldr	r2, [pc, #188]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <MX_GPIO_Init+0x108>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002700:	f001 fd16 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	2108      	movs	r1, #8
 8002708:	4826      	ldr	r0, [pc, #152]	@ (80027a4 <MX_GPIO_Init+0x10c>)
 800270a:	f001 fd11 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800270e:	2301      	movs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002712:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4619      	mov	r1, r3
 8002722:	4820      	ldr	r0, [pc, #128]	@ (80027a4 <MX_GPIO_Init+0x10c>)
 8002724:	f001 fb9a 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800272c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	2301      	movs	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4619      	mov	r1, r3
 8002740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002744:	f001 fb8a 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800274c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800275a:	2303      	movs	r3, #3
 800275c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002768:	f001 fb78 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800276c:	2308      	movs	r3, #8
 800276e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	4619      	mov	r1, r3
 8002782:	4808      	ldr	r0, [pc, #32]	@ (80027a4 <MX_GPIO_Init+0x10c>)
 8002784:	f001 fb6a 	bl	8003e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2006      	movs	r0, #6
 800278e:	f001 fb2e 	bl	8003dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002792:	2006      	movs	r0, #6
 8002794:	f001 fb47 	bl	8003e26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	48000400 	.word	0x48000400

080027a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80027b0:	1d39      	adds	r1, r7, #4
 80027b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b6:	2201      	movs	r2, #1
 80027b8:	4803      	ldr	r0, [pc, #12]	@ (80027c8 <__io_putchar+0x20>)
 80027ba:	f004 fe53 	bl	8007464 <HAL_UART_Transmit>
  return ch;
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000394 	.word	0x20000394

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <Error_Handler+0x8>

080027d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_MspInit+0x44>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <HAL_MspInit+0x44>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <HAL_MspInit+0x44>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_MspInit+0x44>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a08      	ldr	r2, [pc, #32]	@ (800281c <HAL_MspInit+0x44>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002800:	6593      	str	r3, [r2, #88]	@ 0x58
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_MspInit+0x44>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_CAN_MspInit+0xd4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d153      	bne.n	80028ea <HAL_CAN_MspInit+0xca>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	4a2c      	ldr	r2, [pc, #176]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 8002848:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800284c:	6593      	str	r3, [r2, #88]	@ 0x58
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <HAL_CAN_MspInit+0xd8>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002884:	2309      	movs	r3, #9
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002892:	f001 fae3 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028a8:	2309      	movs	r3, #9
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b6:	f001 fad1 	bl	8003e5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	2013      	movs	r0, #19
 80028c0:	f001 fa95 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80028c4:	2013      	movs	r0, #19
 80028c6:	f001 faae 	bl	8003e26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2014      	movs	r0, #20
 80028d0:	f001 fa8d 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028d4:	2014      	movs	r0, #20
 80028d6:	f001 faa6 	bl	8003e26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	2015      	movs	r0, #21
 80028e0:	f001 fa85 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80028e4:	2015      	movs	r0, #21
 80028e6:	f001 fa9e 	bl	8003e26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	@ 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40006400 	.word	0x40006400
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b09e      	sub	sp, #120	@ 0x78
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	2254      	movs	r2, #84	@ 0x54
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f006 f8d1 	bl	8008ac4 <memset>
  if(hi2c->Instance==I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_I2C_MspInit+0xa4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d135      	bne.n	8002998 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800292c:	2340      	movs	r3, #64	@ 0x40
 800292e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002930:	2300      	movs	r3, #0
 8002932:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f003 f8b9 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002944:	f7ff ff42 	bl	80027cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294c:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002960:	23c0      	movs	r3, #192	@ 0xc0
 8002962:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002964:	2312      	movs	r3, #18
 8002966:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002970:	2304      	movs	r3, #4
 8002972:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002978:	4619      	mov	r1, r3
 800297a:	480b      	ldr	r0, [pc, #44]	@ (80029a8 <HAL_I2C_MspInit+0xac>)
 800297c:	f001 fa6e 	bl	8003e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 8002986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800298a:	6593      	str	r3, [r2, #88]	@ 0x58
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_I2C_MspInit+0xa8>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002998:	bf00      	nop
 800299a:	3778      	adds	r7, #120	@ 0x78
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40005400 	.word	0x40005400
 80029a4:	40021000 	.word	0x40021000
 80029a8:	48000400 	.word	0x48000400

080029ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09e      	sub	sp, #120	@ 0x78
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2254      	movs	r2, #84	@ 0x54
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f006 f879 	bl	8008ac4 <memset>
  if(huart->Instance==LPUART1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <HAL_UART_MspInit+0xa8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d136      	bne.n	8002a4a <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029dc:	2320      	movs	r3, #32
 80029de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 f861 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029f4:	f7ff feea 	bl	80027cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a14:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_UART_MspInit+0xac>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a28:	230c      	movs	r3, #12
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a46:	f001 fa09 	bl	8003e5c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3778      	adds	r7, #120	@ 0x78
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40008000 	.word	0x40008000
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10c      	bne.n	8002a88 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002a74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002a86:	e02a      	b.n	8002ade <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a90:	d10c      	bne.n	8002aac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a92:	4b16      	ldr	r3, [pc, #88]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	4a15      	ldr	r2, [pc, #84]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
}
 8002aaa:	e018      	b.n	8002ade <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_TIM_Base_MspInit+0x94>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d113      	bne.n	8002ade <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aba:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_TIM_Base_MspInit+0x90>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2036      	movs	r0, #54	@ 0x36
 8002ad4:	f001 f98b 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ad8:	2036      	movs	r0, #54	@ 0x36
 8002ada:	f001 f9a4 	bl	8003e26 <HAL_NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40001000 	.word	0x40001000

08002af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a23      	ldr	r2, [pc, #140]	@ (8002ba0 <HAL_TIM_MspPostInit+0xac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d11e      	bne.n	8002b54 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b23      	ldr	r3, [pc, #140]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b4e:	f001 f985 	bl	8003e5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b52:	e021      	b.n	8002b98 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5c:	d11c      	bne.n	8002b98 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	4a10      	ldr	r2, [pc, #64]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_TIM_MspPostInit+0xb0>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b76:	2302      	movs	r3, #2
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b94:	f001 f962 	bl	8003e5c <HAL_GPIO_Init>
}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	@ 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <NMI_Handler+0x4>

08002bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <MemManage_Handler+0x4>

08002bc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <BusFault_Handler+0x4>

08002bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <UsageFault_Handler+0x4>

08002bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfe:	f000 f987 	bl	8002f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f001 faa8 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c18:	4802      	ldr	r0, [pc, #8]	@ (8002c24 <CAN1_TX_IRQHandler+0x10>)
 8002c1a:	f000 fdde 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000294 	.word	0x20000294

08002c28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c2c:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <CAN1_RX0_IRQHandler+0x10>)
 8002c2e:	f000 fdd4 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000294 	.word	0x20000294

08002c3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <CAN1_RX1_IRQHandler+0x10>)
 8002c42:	f000 fdca 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000294 	.word	0x20000294

08002c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <TIM6_DAC_IRQHandler+0x10>)
 8002c56:	f003 fbff 	bl	8006458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000041c 	.word	0x2000041c

08002c64 <_getpid>:
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	2301      	movs	r3, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_kill>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	f005 ff73 	bl	8008b68 <__errno>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2216      	movs	r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_exit>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ffe7 	bl	8002c74 <_kill>
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <_exit+0x12>

08002caa <_read>:
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e00a      	b.n	8002cd2 <_read+0x28>
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	60ba      	str	r2, [r7, #8]
 8002cc8:	b2ca      	uxtb	r2, r1
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dbf0      	blt.n	8002cbc <_read+0x12>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_write>:
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e009      	b.n	8002d0a <_write+0x26>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd52 	bl	80027a8 <__io_putchar>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dbf1      	blt.n	8002cf6 <_write+0x12>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_close>:
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_fstat>:
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	2300      	movs	r3, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_isatty>:
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <_lseek>:
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_sbrk>:
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
 8002db4:	f005 fed8 	bl	8008b68 <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
 8002dc4:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000c000 	.word	0x2000c000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	2000047c 	.word	0x2000047c
 8002dec:	200005d0 	.word	0x200005d0

08002df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <SystemInit+0x20>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	4a05      	ldr	r2, [pc, #20]	@ (8002e10 <SystemInit+0x20>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <Reset_Handler>:
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e4c <LoopForever+0x2>
 8002e18:	f7ff ffea 	bl	8002df0 <SystemInit>
 8002e1c:	480c      	ldr	r0, [pc, #48]	@ (8002e50 <LoopForever+0x6>)
 8002e1e:	490d      	ldr	r1, [pc, #52]	@ (8002e54 <LoopForever+0xa>)
 8002e20:	4a0d      	ldr	r2, [pc, #52]	@ (8002e58 <LoopForever+0xe>)
 8002e22:	2300      	movs	r3, #0
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:
 8002e26:	58d4      	ldr	r4, [r2, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:
 8002e2c:	18c4      	adds	r4, r0, r3
 8002e2e:	428c      	cmp	r4, r1
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <LoopForever+0x12>)
 8002e34:	4c0a      	ldr	r4, [pc, #40]	@ (8002e60 <LoopForever+0x16>)
 8002e36:	2300      	movs	r3, #0
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:
 8002e3e:	42a2      	cmp	r2, r4
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>
 8002e42:	f005 fe97 	bl	8008b74 <__libc_init_array>
 8002e46:	f7ff f98d 	bl	8002164 <main>

08002e4a <LoopForever>:
 8002e4a:	e7fe      	b.n	8002e4a <LoopForever>
 8002e4c:	2000c000 	.word	0x2000c000
 8002e50:	20000000 	.word	0x20000000
 8002e54:	200001e0 	.word	0x200001e0
 8002e58:	0800b12c 	.word	0x0800b12c
 8002e5c:	200001e0 	.word	0x200001e0
 8002e60:	200005d0 	.word	0x200005d0

08002e64 <ADC1_IRQHandler>:
 8002e64:	e7fe      	b.n	8002e64 <ADC1_IRQHandler>

08002e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e70:	2003      	movs	r0, #3
 8002e72:	f000 ffb1 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e76:	2000      	movs	r0, #0
 8002e78:	f000 f80e 	bl	8002e98 <HAL_InitTick>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	e001      	b.n	8002e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e88:	f7ff fca6 	bl	80027d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ea4:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <HAL_InitTick+0x6c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002eac:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <HAL_InitTick+0x70>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_InitTick+0x6c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 ffbd 	bl	8003e42 <HAL_SYSTICK_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d809      	bhi.n	8002ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f000 ff87 	bl	8003dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <HAL_InitTick+0x74>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e004      	b.n	8002ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e001      	b.n	8002ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000014 	.word	0x20000014
 8002f08:	2000000c 	.word	0x2000000c
 8002f0c:	20000010 	.word	0x20000010

08002f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_IncTick+0x20>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_IncTick+0x24>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_IncTick+0x24>)
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000014 	.word	0x20000014
 8002f34:	20000480 	.word	0x20000480

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000480 	.word	0x20000480

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d005      	beq.n	8002f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_Delay+0x44>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f76:	bf00      	nop
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f7      	bhi.n	8002f78 <HAL_Delay+0x28>
  {
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000014 	.word	0x20000014

08002f98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0ed      	b.n	8003186 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fc32 	bl	8002820 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fcc:	f7ff ffb4 	bl	8002f38 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fd2:	e012      	b.n	8002ffa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fd4:	f7ff ffb0 	bl	8002f38 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b0a      	cmp	r3, #10
 8002fe0:	d90b      	bls.n	8002ffa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0c5      	b.n	8003186 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0e5      	beq.n	8002fd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0202 	bic.w	r2, r2, #2
 8003016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003018:	f7ff ff8e 	bl	8002f38 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800301e:	e012      	b.n	8003046 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003020:	f7ff ff8a 	bl	8002f38 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b0a      	cmp	r3, #10
 800302c:	d90b      	bls.n	8003046 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2205      	movs	r2, #5
 800303e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e09f      	b.n	8003186 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e1b      	ldrb	r3, [r3, #24]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d108      	bne.n	800306e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e007      	b.n	800307e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7e5b      	ldrb	r3, [r3, #25]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d108      	bne.n	8003098 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e007      	b.n	80030a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7e9b      	ldrb	r3, [r3, #26]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d108      	bne.n	80030c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e007      	b.n	80030d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0220 	bic.w	r2, r2, #32
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7edb      	ldrb	r3, [r3, #27]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d108      	bne.n	80030ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0210 	bic.w	r2, r2, #16
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e007      	b.n	80030fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0210 	orr.w	r2, r2, #16
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7f1b      	ldrb	r3, [r3, #28]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e007      	b.n	8003126 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7f5b      	ldrb	r3, [r3, #29]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d108      	bne.n	8003140 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0204 	orr.w	r2, r2, #4
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e007      	b.n	8003150 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	ea42 0103 	orr.w	r1, r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d003      	beq.n	80031b4 <HAL_CAN_ConfigFilter+0x26>
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	f040 80aa 	bne.w	8003308 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2201      	movs	r2, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d123      	bne.n	8003236 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	401a      	ands	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003210:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3248      	adds	r2, #72	@ 0x48
 8003216:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800322a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800322c:	6979      	ldr	r1, [r7, #20]
 800322e:	3348      	adds	r3, #72	@ 0x48
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d122      	bne.n	8003284 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800325e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3248      	adds	r2, #72	@ 0x48
 8003264:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003278:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	3348      	adds	r3, #72	@ 0x48
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800329e:	e007      	b.n	80032b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80032ca:	e007      	b.n	80032dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e006      	b.n	8003316 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12e      	bne.n	8003394 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7ff fdf3 	bl	8002f38 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003354:	e012      	b.n	800337c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003356:	f7ff fdef 	bl	8002f38 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b0a      	cmp	r3, #10
 8003362:	d90b      	bls.n	800337c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e012      	b.n	80033a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e006      	b.n	80033a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b089      	sub	sp, #36	@ 0x24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d003      	beq.n	80033d6 <HAL_CAN_AddTxMessage+0x2c>
 80033ce:	7ffb      	ldrb	r3, [r7, #31]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 80ad 	bne.w	8003530 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8095 	beq.w	8003520 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003400:	2201      	movs	r2, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	409a      	lsls	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	431a      	orrs	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3318      	adds	r3, #24
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	440b      	add	r3, r1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e00f      	b.n	800344e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003438:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003442:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3318      	adds	r3, #24
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	440b      	add	r3, r1
 800344c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3318      	adds	r3, #24
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	440b      	add	r3, r1
 800345e:	3304      	adds	r3, #4
 8003460:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	7d1b      	ldrb	r3, [r3, #20]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d111      	bne.n	800348e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3318      	adds	r3, #24
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3318      	adds	r3, #24
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	440b      	add	r3, r1
 800348a:	3304      	adds	r3, #4
 800348c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3307      	adds	r3, #7
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	061a      	lsls	r2, r3, #24
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3306      	adds	r3, #6
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3305      	adds	r3, #5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	4313      	orrs	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	3204      	adds	r2, #4
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	4610      	mov	r0, r2
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	ea43 0200 	orr.w	r2, r3, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	440b      	add	r3, r1
 80034c0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80034c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3303      	adds	r3, #3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	061a      	lsls	r2, r3, #24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3302      	adds	r3, #2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3301      	adds	r3, #1
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	4313      	orrs	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	4610      	mov	r0, r2
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	6811      	ldr	r1, [r2, #0]
 80034ec:	ea43 0200 	orr.w	r2, r3, r0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80034fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3318      	adds	r3, #24
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	4413      	add	r3, r2
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3318      	adds	r3, #24
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	440b      	add	r3, r1
 800351a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e00e      	b.n	800353e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e006      	b.n	800353e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800355e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d003      	beq.n	800356e <HAL_CAN_GetRxMessage+0x24>
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b02      	cmp	r3, #2
 800356a:	f040 8103 	bne.w	8003774 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0f7      	b.n	8003782 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0e8      	b.n	8003782 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	331b      	adds	r3, #27
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0204 	and.w	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	331b      	adds	r3, #27
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4413      	add	r3, r2
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0d5b      	lsrs	r3, r3, #21
 80035de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	331b      	adds	r3, #27
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	4413      	add	r3, r2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	08db      	lsrs	r3, r3, #3
 80035f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0202 	and.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	331b      	adds	r3, #27
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2208      	movs	r2, #8
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	e00b      	b.n	800364e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	331b      	adds	r3, #27
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	331b      	adds	r3, #27
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b2da      	uxtb	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	331b      	adds	r3, #27
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	0c1b      	lsrs	r3, r3, #16
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0a1a      	lsrs	r2, r3, #8
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0c1a      	lsrs	r2, r3, #16
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	3302      	adds	r3, #2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e1a      	lsrs	r2, r3, #24
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	3303      	adds	r3, #3
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3304      	adds	r3, #4
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4413      	add	r3, r2
 8003704:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0a1a      	lsrs	r2, r3, #8
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3305      	adds	r3, #5
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0c1a      	lsrs	r2, r3, #16
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3306      	adds	r3, #6
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0e1a      	lsrs	r2, r3, #24
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	3307      	adds	r3, #7
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0220 	orr.w	r2, r2, #32
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e007      	b.n	8003770 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e006      	b.n	8003782 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d002      	beq.n	80037ac <HAL_CAN_ActivateNotification+0x1e>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d109      	bne.n	80037c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6959      	ldr	r1, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e006      	b.n	80037ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	@ 0x28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d07c      	beq.n	800391a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d023      	beq.n	8003872 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f983 	bl	8003b48 <HAL_CAN_TxMailbox0CompleteCallback>
 8003842:	e016      	b.n	8003872 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
 8003856:	e00c      	b.n	8003872 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
 800386a:	e002      	b.n	8003872 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f989 	bl	8003b84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d024      	beq.n	80038c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f963 	bl	8003b5c <HAL_CAN_TxMailbox1CompleteCallback>
 8003896:	e016      	b.n	80038c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038aa:	e00c      	b.n	80038c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038be:	e002      	b.n	80038c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f969 	bl	8003b98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d024      	beq.n	800391a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f943 	bl	8003b70 <HAL_CAN_TxMailbox2CompleteCallback>
 80038ea:	e016      	b.n	800391a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	e00c      	b.n	800391a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
 8003912:	e002      	b.n	800391a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f949 	bl	8003bac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2208      	movs	r2, #8
 8003958:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f930 	bl	8003bc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fc83 	bl	8001284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2208      	movs	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f912 	bl	8003be8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f9 	bl	8003bd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2210      	movs	r2, #16
 80039fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8fc 	bl	8003bfc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8f5 	bl	8003c10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d07b      	beq.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d072      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d043      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03e      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aa8:	2b60      	cmp	r3, #96	@ 0x60
 8003aaa:	d02b      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x32a>
 8003aac:	2b60      	cmp	r3, #96	@ 0x60
 8003aae:	d82e      	bhi.n	8003b0e <HAL_CAN_IRQHandler+0x334>
 8003ab0:	2b50      	cmp	r3, #80	@ 0x50
 8003ab2:	d022      	beq.n	8003afa <HAL_CAN_IRQHandler+0x320>
 8003ab4:	2b50      	cmp	r3, #80	@ 0x50
 8003ab6:	d82a      	bhi.n	8003b0e <HAL_CAN_IRQHandler+0x334>
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d019      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x316>
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d826      	bhi.n	8003b0e <HAL_CAN_IRQHandler+0x334>
 8003ac0:	2b30      	cmp	r3, #48	@ 0x30
 8003ac2:	d010      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0x30c>
 8003ac4:	2b30      	cmp	r3, #48	@ 0x30
 8003ac6:	d822      	bhi.n	8003b0e <HAL_CAN_IRQHandler+0x334>
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d002      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x2f8>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d005      	beq.n	8003adc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ad0:	e01d      	b.n	8003b0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ada:	e019      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	f043 0310 	orr.w	r3, r3, #16
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ae4:	e014      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003aee:	e00f      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003af8:	e00a      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b02:	e005      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b0c:	e000      	b.n	8003b10 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2204      	movs	r2, #4
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f872 	bl	8003c24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	@ 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4907      	ldr	r1, [pc, #28]	@ (8003cd4 <__NVIC_EnableIRQ+0x38>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	@ (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	@ (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	@ 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f1c3 0307 	rsb	r3, r3, #7
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	bf28      	it	cs
 8003d4a:	2304      	movcs	r3, #4
 8003d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d902      	bls.n	8003d5c <NVIC_EncodePriority+0x30>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3b03      	subs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <NVIC_EncodePriority+0x32>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	401a      	ands	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43d9      	mvns	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	4313      	orrs	r3, r2
         );
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003da4:	d301      	bcc.n	8003daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <SysTick_Config+0x40>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db2:	210f      	movs	r1, #15
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	f7ff ff8e 	bl	8003cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <SysTick_Config+0x40>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc2:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <SysTick_Config+0x40>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff29 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e00:	f7ff ff3e 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7ff ff8e 	bl	8003d2c <NVIC_EncodePriority>
 8003e10:	4602      	mov	r2, r0
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff5d 	bl	8003cd8 <__NVIC_SetPriority>
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff31 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ffa2 	bl	8003d94 <SysTick_Config>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6a:	e148      	b.n	80040fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 813a 	beq.w	80040f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d005      	beq.n	8003e9c <HAL_GPIO_Init+0x40>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d130      	bne.n	8003efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0201 	and.w	r2, r3, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d017      	beq.n	8003f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d123      	bne.n	8003f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8094 	beq.w	80040f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd0:	4b52      	ldr	r3, [pc, #328]	@ (800411c <HAL_GPIO_Init+0x2c0>)
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	4a51      	ldr	r2, [pc, #324]	@ (800411c <HAL_GPIO_Init+0x2c0>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800411c <HAL_GPIO_Init+0x2c0>)
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8004120 <HAL_GPIO_Init+0x2c4>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	3302      	adds	r3, #2
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004012:	d00d      	beq.n	8004030 <HAL_GPIO_Init+0x1d4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a43      	ldr	r2, [pc, #268]	@ (8004124 <HAL_GPIO_Init+0x2c8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <HAL_GPIO_Init+0x1d0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <HAL_GPIO_Init+0x2cc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_GPIO_Init+0x1cc>
 8004024:	2302      	movs	r3, #2
 8004026:	e004      	b.n	8004032 <HAL_GPIO_Init+0x1d6>
 8004028:	2307      	movs	r3, #7
 800402a:	e002      	b.n	8004032 <HAL_GPIO_Init+0x1d6>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_GPIO_Init+0x1d6>
 8004030:	2300      	movs	r3, #0
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004042:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_GPIO_Init+0x2c4>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004050:	4b36      	ldr	r3, [pc, #216]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800407a:	4b2c      	ldr	r3, [pc, #176]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409e:	4a23      	ldr	r2, [pc, #140]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c8:	4a18      	ldr	r2, [pc, #96]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040ce:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040f2:	4a0e      	ldr	r2, [pc, #56]	@ (800412c <HAL_GPIO_Init+0x2d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f aeaf 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40021000 	.word	0x40021000
 8004120:	40010000 	.word	0x40010000
 8004124:	48000400 	.word	0x48000400
 8004128:	48000800 	.word	0x48000800
 800412c:	40010400 	.word	0x40010400

08004130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004140:	787b      	ldrb	r3, [r7, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800414c:	e002      	b.n	8004154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800416a:	4b08      	ldr	r3, [pc, #32]	@ (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004176:	4a05      	ldr	r2, [pc, #20]	@ (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd ff8e 	bl	80020a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40010400 	.word	0x40010400

08004190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e08d      	b.n	80042be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fba0 	bl	80028fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	@ 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	e006      	b.n	8004218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d108      	bne.n	8004232 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	e007      	b.n	8004242 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69d9      	ldr	r1, [r3, #28]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	460b      	mov	r3, r1
 80042d6:	817b      	strh	r3, [r7, #10]
 80042d8:	4613      	mov	r3, r2
 80042da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	f040 80fd 	bne.w	80044e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x30>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0f6      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004300:	f7fe fe1a 	bl	8002f38 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2319      	movs	r3, #25
 800430c:	2201      	movs	r2, #1
 800430e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa16 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0e1      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2221      	movs	r2, #33	@ 0x21
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2210      	movs	r2, #16
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	893a      	ldrh	r2, [r7, #8]
 8004342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2bff      	cmp	r3, #255	@ 0xff
 8004352:	d906      	bls.n	8004362 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	22ff      	movs	r2, #255	@ 0xff
 8004358:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800435a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e007      	b.n	8004372 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800436c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004370:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d024      	beq.n	80043c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	4b4e      	ldr	r3, [pc, #312]	@ (80044f0 <HAL_I2C_Master_Transmit+0x228>)
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fc11 	bl	8004be4 <I2C_TransferConfig>
 80043c2:	e066      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	4b48      	ldr	r3, [pc, #288]	@ (80044f0 <HAL_I2C_Master_Transmit+0x228>)
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fc06 	bl	8004be4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80043d8:	e05b      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa09 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07b      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d034      	beq.n	8004492 <HAL_I2C_Master_Transmit+0x1ca>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d130      	bne.n	8004492 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2200      	movs	r2, #0
 8004438:	2180      	movs	r1, #128	@ 0x80
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f982 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e04d      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2bff      	cmp	r3, #255	@ 0xff
 8004452:	d90e      	bls.n	8004472 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	b2da      	uxtb	r2, r3
 8004460:	8979      	ldrh	r1, [r7, #10]
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fbba 	bl	8004be4 <I2C_TransferConfig>
 8004470:	e00f      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	b2da      	uxtb	r2, r3
 8004482:	8979      	ldrh	r1, [r7, #10]
 8004484:	2300      	movs	r3, #0
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fba9 	bl	8004be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d19e      	bne.n	80043da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f9ef 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e01a      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2220      	movs	r2, #32
 80044b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_I2C_Master_Transmit+0x22c>)
 80044c4:	400b      	ands	r3, r1
 80044c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	80002000 	.word	0x80002000
 80044f4:	fe00e800 	.word	0xfe00e800

080044f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	461a      	mov	r2, r3
 8004504:	460b      	mov	r3, r1
 8004506:	817b      	strh	r3, [r7, #10]
 8004508:	4613      	mov	r3, r2
 800450a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 80db 	bne.w	80046d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_Master_Receive+0x30>
 8004524:	2302      	movs	r3, #2
 8004526:	e0d4      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004530:	f7fe fd02 	bl	8002f38 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2319      	movs	r3, #25
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8fe 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0bf      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2222      	movs	r2, #34	@ 0x22
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2210      	movs	r2, #16
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	893a      	ldrh	r2, [r7, #8]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2bff      	cmp	r3, #255	@ 0xff
 8004582:	d90e      	bls.n	80045a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	4b52      	ldr	r3, [pc, #328]	@ (80046dc <HAL_I2C_Master_Receive+0x1e4>)
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fb22 	bl	8004be4 <I2C_TransferConfig>
 80045a0:	e06d      	b.n	800467e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	4b49      	ldr	r3, [pc, #292]	@ (80046dc <HAL_I2C_Master_Receive+0x1e4>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fb11 	bl	8004be4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80045c2:	e05c      	b.n	800467e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	6a39      	ldr	r1, [r7, #32]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f99f 	bl	800490c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e07c      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d034      	beq.n	800467e <HAL_I2C_Master_Receive+0x186>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d130      	bne.n	800467e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2200      	movs	r2, #0
 8004624:	2180      	movs	r1, #128	@ 0x80
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f88c 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e04d      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	2bff      	cmp	r3, #255	@ 0xff
 800463e:	d90e      	bls.n	800465e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	22ff      	movs	r2, #255	@ 0xff
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464a:	b2da      	uxtb	r2, r3
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	2300      	movs	r3, #0
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fac4 	bl	8004be4 <I2C_TransferConfig>
 800465c:	e00f      	b.n	800467e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	b2da      	uxtb	r2, r3
 800466e:	8979      	ldrh	r1, [r7, #10]
 8004670:	2300      	movs	r3, #0
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fab3 	bl	8004be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d19d      	bne.n	80045c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	6a39      	ldr	r1, [r7, #32]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f8f9 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e01a      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2220      	movs	r2, #32
 80046a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_I2C_Master_Receive+0x1e8>)
 80046b0:	400b      	ands	r3, r1
 80046b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	80002400 	.word	0x80002400
 80046e0:	fe00e800 	.word	0xfe00e800

080046e4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d007      	beq.n	8004738 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	619a      	str	r2, [r3, #24]
  }
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004754:	e03b      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f962 	bl	8004a24 <I2C_IsErrorOccurred>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d02d      	beq.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fe fbe1 	bl	8002f38 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d122      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d113      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d0b4      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004802:	e033      	b.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f90b 	bl	8004a24 <I2C_IsErrorOccurred>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e031      	b.n	800487c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d025      	beq.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fe fb8a 	bl	8002f38 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11a      	bne.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d013      	beq.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e007      	b.n	800487c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d1c4      	bne.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004890:	e02f      	b.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8c4 	bl	8004a24 <I2C_IsErrorOccurred>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fe fb47 	bl	8002f38 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11a      	bne.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d013      	beq.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e007      	b.n	8004902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d1c8      	bne.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800491c:	e071      	b.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f87e 	bl	8004a24 <I2C_IsErrorOccurred>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b20      	cmp	r3, #32
 800493e:	d13b      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d138      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d105      	bne.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d121      	bne.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2204      	movs	r2, #4
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2220      	movs	r2, #32
 8004982:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b24      	ldr	r3, [pc, #144]	@ (8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004990:	400b      	ands	r3, r1
 8004992:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
 80049b0:	e002      	b.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80049b8:	f7fe fabe 	bl	8002f38 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d119      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00f      	beq.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d002      	beq.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d083      	beq.n	800491e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	fe00e800 	.word	0xfe00e800

08004a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d068      	beq.n	8004b22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a58:	e049      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d045      	beq.n	8004aee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe fa69 	bl	8002f38 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_IsErrorOccurred+0x54>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d13a      	bne.n	8004aee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9a:	d121      	bne.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa2:	d01d      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d01a      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004aba:	f7fe fa3d 	bl	8002f38 <HAL_GetTick>
 8004abe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac0:	e00e      	b.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ac2:	f7fe fa39 	bl	8002f38 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b19      	cmp	r3, #25
 8004ace:	d907      	bls.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f043 0320 	orr.w	r3, r3, #32
 8004ad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004ade:	e006      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d1e9      	bne.n	8004ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d003      	beq.n	8004b04 <I2C_IsErrorOccurred+0xe0>
 8004afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0aa      	beq.n	8004a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2220      	movs	r2, #32
 8004b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fdaf 	bl	80046fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <I2C_IsErrorOccurred+0x1bc>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	@ 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	fe00e800 	.word	0xfe00e800

08004be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bfc:	7a7b      	ldrb	r3, [r7, #9]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	0d5b      	lsrs	r3, r3, #21
 8004c1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <I2C_TransferConfig+0x60>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	43db      	mvns	r3, r3
 8004c28:	ea02 0103 	and.w	r1, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	03ff63ff 	.word	0x03ff63ff

08004c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d138      	bne.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e032      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	@ 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d139      	bne.n	8004d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e033      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d7c:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40007000 	.word	0x40007000

08004d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da2:	d130      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da4:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db0:	d038      	beq.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db2:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2232      	movs	r2, #50	@ 0x32
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0c9b      	lsrs	r3, r3, #18
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd8:	e002      	b.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de0:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dec:	d102      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f2      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e00:	d110      	bne.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e00f      	b.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e06:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e12:	d007      	beq.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e1c:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40007000 	.word	0x40007000
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	431bde83 	.word	0x431bde83

08004e40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f000 bc02 	b.w	8005658 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e54:	4b96      	ldr	r3, [pc, #600]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e5e:	4b94      	ldr	r3, [pc, #592]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80e4 	beq.w	800503e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4c>
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	f040 808b 	bne.w	8004f9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	f040 8087 	bne.w	8004f9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e8c:	4b88      	ldr	r3, [pc, #544]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x64>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e3d9      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	4b81      	ldr	r3, [pc, #516]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <HAL_RCC_OscConfig+0x7e>
 8004eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ebc:	e005      	b.n	8004eca <HAL_RCC_OscConfig+0x8a>
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d223      	bcs.n	8004f16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fd8c 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e3ba      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee2:	4b73      	ldr	r3, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	f043 0308 	orr.w	r3, r3, #8
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b70      	ldr	r3, [pc, #448]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	496d      	ldr	r1, [pc, #436]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f00:	4b6b      	ldr	r3, [pc, #428]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	4968      	ldr	r1, [pc, #416]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	e025      	b.n	8004f62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f16:	4b66      	ldr	r3, [pc, #408]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a65      	ldr	r2, [pc, #404]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f1c:	f043 0308 	orr.w	r3, r3, #8
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b63      	ldr	r3, [pc, #396]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4960      	ldr	r1, [pc, #384]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f34:	4b5e      	ldr	r3, [pc, #376]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	495b      	ldr	r1, [pc, #364]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fd4c 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e37a      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f62:	f000 fc81 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b51      	ldr	r3, [pc, #324]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	4950      	ldr	r1, [pc, #320]	@ (80050b4 <HAL_RCC_OscConfig+0x274>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80050b8 <HAL_RCC_OscConfig+0x278>)
 8004f80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f82:	4b4e      	ldr	r3, [pc, #312]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd ff86 	bl	8002e98 <HAL_InitTick>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d052      	beq.n	800503c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	e35e      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d032      	beq.n	8005008 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fa2:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a42      	ldr	r2, [pc, #264]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fae:	f7fd ffc3 	bl	8002f38 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fb6:	f7fd ffbf 	bl	8002f38 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e347      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fc8:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fd4:	4b36      	ldr	r3, [pc, #216]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a35      	ldr	r2, [pc, #212]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fda:	f043 0308 	orr.w	r3, r3, #8
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b33      	ldr	r3, [pc, #204]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4930      	ldr	r1, [pc, #192]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	492b      	ldr	r1, [pc, #172]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
 8005006:	e01a      	b.n	800503e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005008:	4b29      	ldr	r3, [pc, #164]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a28      	ldr	r2, [pc, #160]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005014:	f7fd ff90 	bl	8002f38 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800501c:	f7fd ff8c 	bl	8002f38 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e314      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800502e:	4b20      	ldr	r3, [pc, #128]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x1dc>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d073      	beq.n	8005132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d005      	beq.n	800505c <HAL_RCC_OscConfig+0x21c>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d10e      	bne.n	8005074 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d063      	beq.n	8005130 <HAL_RCC_OscConfig+0x2f0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d15f      	bne.n	8005130 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e2f1      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x24c>
 800507e:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e025      	b.n	80050d8 <HAL_RCC_OscConfig+0x298>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005094:	d114      	bne.n	80050c0 <HAL_RCC_OscConfig+0x280>
 8005096:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a05      	ldr	r2, [pc, #20]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a02      	ldr	r2, [pc, #8]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e013      	b.n	80050d8 <HAL_RCC_OscConfig+0x298>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800ad60 	.word	0x0800ad60
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	20000010 	.word	0x20000010
 80050c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a9f      	ldr	r2, [pc, #636]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a9c      	ldr	r2, [pc, #624]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd ff2a 	bl	8002f38 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fd ff26 	bl	8002f38 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e2ae      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fa:	4b92      	ldr	r3, [pc, #584]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2a8>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd ff16 	bl	8002f38 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fd ff12 	bl	8002f38 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e29a      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005122:	4b88      	ldr	r3, [pc, #544]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x2d0>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d060      	beq.n	8005200 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d005      	beq.n	8005150 <HAL_RCC_OscConfig+0x310>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d119      	bne.n	800517e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d116      	bne.n	800517e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005150:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_OscConfig+0x328>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e277      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b76      	ldr	r3, [pc, #472]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	4973      	ldr	r1, [pc, #460]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800517c:	e040      	b.n	8005200 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d023      	beq.n	80051ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005186:	4b6f      	ldr	r3, [pc, #444]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6e      	ldr	r2, [pc, #440]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fd fed1 	bl	8002f38 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519a:	f7fd fecd 	bl	8002f38 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e255      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ac:	4b65      	ldr	r3, [pc, #404]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b62      	ldr	r3, [pc, #392]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	495f      	ldr	r1, [pc, #380]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
 80051cc:	e018      	b.n	8005200 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fd fead 	bl	8002f38 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fd fea9 	bl	8002f38 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e231      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f4:	4b53      	ldr	r3, [pc, #332]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03c      	beq.n	8005286 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01c      	beq.n	800524e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005214:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521a:	4a4a      	ldr	r2, [pc, #296]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd fe88 	bl	8002f38 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522c:	f7fd fe84 	bl	8002f38 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e20c      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800523e:	4b41      	ldr	r3, [pc, #260]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ef      	beq.n	800522c <HAL_RCC_OscConfig+0x3ec>
 800524c:	e01b      	b.n	8005286 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800524e:	4b3d      	ldr	r3, [pc, #244]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	4a3b      	ldr	r2, [pc, #236]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fd fe6b 	bl	8002f38 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005266:	f7fd fe67 	bl	8002f38 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e1ef      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005278:	4b32      	ldr	r3, [pc, #200]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ef      	bne.n	8005266 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80a6 	beq.w	80053e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a8:	4a26      	ldr	r2, [pc, #152]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80052b0:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052bc:	2301      	movs	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d118      	bne.n	80052fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d8:	f7fd fe2e 	bl	8002f38 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fd fe2a 	bl	8002f38 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1b2      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f2:	4b15      	ldr	r3, [pc, #84]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d108      	bne.n	8005318 <HAL_RCC_OscConfig+0x4d8>
 8005306:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005316:	e029      	b.n	800536c <HAL_RCC_OscConfig+0x52c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d115      	bne.n	800534c <HAL_RCC_OscConfig+0x50c>
 8005320:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	4a07      	ldr	r2, [pc, #28]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005330:	4b04      	ldr	r3, [pc, #16]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	4a03      	ldr	r2, [pc, #12]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005340:	e014      	b.n	800536c <HAL_RCC_OscConfig+0x52c>
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	40007000 	.word	0x40007000
 800534c:	4b9a      	ldr	r3, [pc, #616]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	4a99      	ldr	r2, [pc, #612]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535c:	4b96      	ldr	r3, [pc, #600]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	4a95      	ldr	r2, [pc, #596]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005374:	f7fd fde0 	bl	8002f38 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fd fddc 	bl	8002f38 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e162      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005392:	4b89      	ldr	r3, [pc, #548]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ed      	beq.n	800537c <HAL_RCC_OscConfig+0x53c>
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fd fdc9 	bl	8002f38 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fd fdc5 	bl	8002f38 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e14b      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c0:	4b7d      	ldr	r3, [pc, #500]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ed      	bne.n	80053aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b78      	ldr	r3, [pc, #480]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	4a77      	ldr	r2, [pc, #476]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03c      	beq.n	8005466 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01c      	beq.n	800542e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f4:	4b70      	ldr	r3, [pc, #448]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053fa:	4a6f      	ldr	r2, [pc, #444]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd fd98 	bl	8002f38 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540c:	f7fd fd94 	bl	8002f38 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e11c      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541e:	4b66      	ldr	r3, [pc, #408]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ef      	beq.n	800540c <HAL_RCC_OscConfig+0x5cc>
 800542c:	e01b      	b.n	8005466 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542e:	4b62      	ldr	r3, [pc, #392]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005434:	4a60      	ldr	r2, [pc, #384]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fd fd7b 	bl	8002f38 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005446:	f7fd fd77 	bl	8002f38 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0ff      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005458:	4b57      	ldr	r3, [pc, #348]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 800545a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ef      	bne.n	8005446 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80f3 	beq.w	8005656 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	2b02      	cmp	r3, #2
 8005476:	f040 80c9 	bne.w	800560c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800547a:	4b4f      	ldr	r3, [pc, #316]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f003 0203 	and.w	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	429a      	cmp	r2, r3
 800548c:	d12c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	3b01      	subs	r3, #1
 800549a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d123      	bne.n	80054e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d11b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d113      	bne.n	80054e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	3b01      	subs	r3, #1
 80054ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d109      	bne.n	80054e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d06b      	beq.n	80055c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d062      	beq.n	80055b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054ee:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0ac      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054fe:	4b2e      	ldr	r3, [pc, #184]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2d      	ldr	r2, [pc, #180]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005508:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800550a:	f7fd fd15 	bl	8002f38 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fd fd11 	bl	8002f38 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e099      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005524:	4b24      	ldr	r3, [pc, #144]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005530:	4b21      	ldr	r3, [pc, #132]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <HAL_RCC_OscConfig+0x77c>)
 8005536:	4013      	ands	r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005540:	3a01      	subs	r2, #1
 8005542:	0112      	lsls	r2, r2, #4
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800554a:	0212      	lsls	r2, r2, #8
 800554c:	4311      	orrs	r1, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005552:	0852      	lsrs	r2, r2, #1
 8005554:	3a01      	subs	r2, #1
 8005556:	0552      	lsls	r2, r2, #21
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	0652      	lsls	r2, r2, #25
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800556a:	06d2      	lsls	r2, r2, #27
 800556c:	430a      	orrs	r2, r1
 800556e:	4912      	ldr	r1, [pc, #72]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005570:	4313      	orrs	r3, r2
 8005572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005574:	4b10      	ldr	r3, [pc, #64]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a0f      	ldr	r2, [pc, #60]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 800557a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800557e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005580:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a0c      	ldr	r2, [pc, #48]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800558a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800558c:	f7fd fcd4 	bl	8002f38 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005594:	f7fd fcd0 	bl	8002f38 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e058      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a6:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <HAL_RCC_OscConfig+0x778>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055b2:	e050      	b.n	8005656 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e04f      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c0:	4b27      	ldr	r3, [pc, #156]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d144      	bne.n	8005656 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055cc:	4b24      	ldr	r3, [pc, #144]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a23      	ldr	r2, [pc, #140]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d8:	4b21      	ldr	r3, [pc, #132]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a20      	ldr	r2, [pc, #128]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055e4:	f7fd fca8 	bl	8002f38 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd fca4 	bl	8002f38 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e02c      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	4b18      	ldr	r3, [pc, #96]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x7ac>
 800560a:	e024      	b.n	8005656 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d01f      	beq.n	8005652 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005612:	4b13      	ldr	r3, [pc, #76]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a12      	ldr	r2, [pc, #72]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 8005618:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800561c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fd fc8b 	bl	8002f38 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005626:	f7fd fc87 	bl	8002f38 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e00f      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005638:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005644:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	4905      	ldr	r1, [pc, #20]	@ (8005660 <HAL_RCC_OscConfig+0x820>)
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCC_OscConfig+0x824>)
 800564c:	4013      	ands	r3, r2
 800564e:	60cb      	str	r3, [r1, #12]
 8005650:	e001      	b.n	8005656 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	feeefffc 	.word	0xfeeefffc

08005668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0e7      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800567c:	4b75      	ldr	r3, [pc, #468]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d910      	bls.n	80056ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b72      	ldr	r3, [pc, #456]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 0207 	bic.w	r2, r3, #7
 8005692:	4970      	ldr	r1, [pc, #448]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b6e      	ldr	r3, [pc, #440]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0cf      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d010      	beq.n	80056da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	4b66      	ldr	r3, [pc, #408]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d908      	bls.n	80056da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c8:	4b63      	ldr	r3, [pc, #396]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4960      	ldr	r1, [pc, #384]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d04c      	beq.n	8005780 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d107      	bne.n	80056fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d121      	bne.n	800573e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0a6      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d107      	bne.n	8005716 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005706:	4b54      	ldr	r3, [pc, #336]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d115      	bne.n	800573e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e09a      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800571e:	4b4e      	ldr	r3, [pc, #312]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e08e      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572e:	4b4a      	ldr	r3, [pc, #296]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e086      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b46      	ldr	r3, [pc, #280]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4943      	ldr	r1, [pc, #268]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005750:	f7fd fbf2 	bl	8002f38 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fd fbee 	bl	8002f38 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e06e      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b3a      	ldr	r3, [pc, #232]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d010      	beq.n	80057ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	4b31      	ldr	r3, [pc, #196]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005798:	429a      	cmp	r2, r3
 800579a:	d208      	bcs.n	80057ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579c:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	492b      	ldr	r1, [pc, #172]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ae:	4b29      	ldr	r3, [pc, #164]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d210      	bcs.n	80057de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057bc:	4b25      	ldr	r3, [pc, #148]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 0207 	bic.w	r2, r3, #7
 80057c4:	4923      	ldr	r1, [pc, #140]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057cc:	4b21      	ldr	r3, [pc, #132]	@ (8005854 <HAL_RCC_ClockConfig+0x1ec>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d001      	beq.n	80057de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e036      	b.n	800584c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4918      	ldr	r1, [pc, #96]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005808:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4910      	ldr	r1, [pc, #64]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005818:	4313      	orrs	r3, r2
 800581a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800581c:	f000 f824 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	490b      	ldr	r1, [pc, #44]	@ (800585c <HAL_RCC_ClockConfig+0x1f4>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	4a09      	ldr	r2, [pc, #36]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 800583a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800583c:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <HAL_RCC_ClockConfig+0x1fc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f7fd fb29 	bl	8002e98 <HAL_InitTick>
 8005846:	4603      	mov	r3, r0
 8005848:	72fb      	strb	r3, [r7, #11]

  return status;
 800584a:	7afb      	ldrb	r3, [r7, #11]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40022000 	.word	0x40022000
 8005858:	40021000 	.word	0x40021000
 800585c:	0800ad60 	.word	0x0800ad60
 8005860:	2000000c 	.word	0x2000000c
 8005864:	20000010 	.word	0x20000010

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	@ 0x24
 800586c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005876:	4b3e      	ldr	r3, [pc, #248]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005880:	4b3b      	ldr	r3, [pc, #236]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d121      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d11e      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800589c:	4b34      	ldr	r3, [pc, #208]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058a8:	4b31      	ldr	r3, [pc, #196]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e005      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d102      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e0:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e004      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058ec:	4b23      	ldr	r3, [pc, #140]	@ (800597c <HAL_RCC_GetSysClockFreq+0x114>)
 80058ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d134      	bne.n	8005960 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0xa6>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d003      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0xac>
 800590c:	e005      	b.n	800591a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800590e:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 8005910:	617b      	str	r3, [r7, #20]
      break;
 8005912:	e005      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <HAL_RCC_GetSysClockFreq+0x114>)
 8005916:	617b      	str	r3, [r7, #20]
      break;
 8005918:	e002      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	617b      	str	r3, [r7, #20]
      break;
 800591e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005920:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	3301      	adds	r3, #1
 800592c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800592e:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	fb03 f202 	mul.w	r2, r3, r2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	0e5b      	lsrs	r3, r3, #25
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	3301      	adds	r3, #1
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005960:	69bb      	ldr	r3, [r7, #24]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3724      	adds	r7, #36	@ 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000
 8005974:	0800ad78 	.word	0x0800ad78
 8005978:	00f42400 	.word	0x00f42400
 800597c:	007a1200 	.word	0x007a1200

08005980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005984:	4b03      	ldr	r3, [pc, #12]	@ (8005994 <HAL_RCC_GetHCLKFreq+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800599c:	f7ff fff0 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4904      	ldr	r1, [pc, #16]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40021000 	.word	0x40021000
 80059c0:	0800ad70 	.word	0x0800ad70

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059c8:	f7ff ffda 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0adb      	lsrs	r3, r3, #11
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4904      	ldr	r1, [pc, #16]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	0800ad70 	.word	0x0800ad70

080059f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059fc:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a08:	f7ff f9b6 	bl	8004d78 <HAL_PWREx_GetVoltageRange>
 8005a0c:	6178      	str	r0, [r7, #20]
 8005a0e:	e014      	b.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a10:	4b25      	ldr	r3, [pc, #148]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a14:	4a24      	ldr	r2, [pc, #144]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a1c:	4b22      	ldr	r3, [pc, #136]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a28:	f7ff f9a6 	bl	8004d78 <HAL_PWREx_GetVoltageRange>
 8005a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a32:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a40:	d10b      	bne.n	8005a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d919      	bls.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a4c:	d902      	bls.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4e:	2302      	movs	r3, #2
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e013      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a54:	2301      	movs	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e010      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b80      	cmp	r3, #128	@ 0x80
 8005a5e:	d902      	bls.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a60:	2303      	movs	r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e00a      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b80      	cmp	r3, #128	@ 0x80
 8005a6a:	d102      	bne.n	8005a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	e004      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b70      	cmp	r3, #112	@ 0x70
 8005a76:	d101      	bne.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a78:	2301      	movs	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 0207 	bic.w	r2, r3, #7
 8005a84:	4909      	ldr	r1, [pc, #36]	@ (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a8c:	4b07      	ldr	r3, [pc, #28]	@ (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d001      	beq.n	8005a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40022000 	.word	0x40022000

08005ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005abc:	2300      	movs	r3, #0
 8005abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d031      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ad4:	d01a      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005ad6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ada:	d814      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ae0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ae4:	d10f      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	4a5c      	ldr	r2, [pc, #368]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af2:	e00c      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f9ce 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	74fb      	strb	r3, [r7, #19]
      break;
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b14:	4b51      	ldr	r3, [pc, #324]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	494e      	ldr	r1, [pc, #312]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b2a:	e001      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 809e 	beq.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b42:	4b46      	ldr	r3, [pc, #280]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b58:	4b40      	ldr	r3, [pc, #256]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b64:	4b3d      	ldr	r3, [pc, #244]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b74:	4b3a      	ldr	r3, [pc, #232]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a39      	ldr	r2, [pc, #228]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b80:	f7fd f9da 	bl	8002f38 <HAL_GetTick>
 8005b84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b86:	e009      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b88:	f7fd f9d6 	bl	8002f38 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	74fb      	strb	r3, [r7, #19]
        break;
 8005b9a:	e005      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b9c:	4b30      	ldr	r3, [pc, #192]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ef      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005ba8:	7cfb      	ldrb	r3, [r7, #19]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d15a      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bae:	4b2b      	ldr	r3, [pc, #172]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d019      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bca:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd6:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005be6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bec:	4a1b      	ldr	r2, [pc, #108]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bf6:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d016      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fd f996 	bl	8002f38 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7fd f992 	bl	8002f38 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d902      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	74fb      	strb	r3, [r7, #19]
            break;
 8005c26:	e006      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c28:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ec      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c3c:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4a:	4904      	ldr	r1, [pc, #16]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c52:	e009      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	74bb      	strb	r3, [r7, #18]
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005c5a:	bf00      	nop
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c68:	7c7b      	ldrb	r3, [r7, #17]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b8a      	ldr	r3, [pc, #552]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	4a89      	ldr	r2, [pc, #548]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c86:	4b84      	ldr	r3, [pc, #528]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8c:	f023 0203 	bic.w	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	4980      	ldr	r1, [pc, #512]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca8:	4b7b      	ldr	r3, [pc, #492]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f023 020c 	bic.w	r2, r3, #12
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	4978      	ldr	r1, [pc, #480]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cca:	4b73      	ldr	r3, [pc, #460]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	496f      	ldr	r1, [pc, #444]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cec:	4b6a      	ldr	r3, [pc, #424]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	4967      	ldr	r1, [pc, #412]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d0e:	4b62      	ldr	r3, [pc, #392]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	495e      	ldr	r1, [pc, #376]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d30:	4b59      	ldr	r3, [pc, #356]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	4956      	ldr	r1, [pc, #344]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d52:	4b51      	ldr	r3, [pc, #324]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	494d      	ldr	r1, [pc, #308]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d028      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d74:	4b48      	ldr	r3, [pc, #288]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	4945      	ldr	r1, [pc, #276]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d92:	d106      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d94:	4b40      	ldr	r3, [pc, #256]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a3f      	ldr	r2, [pc, #252]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d9e:	60d3      	str	r3, [r2, #12]
 8005da0:	e011      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	2101      	movs	r1, #1
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f872 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005dbc:	7cfb      	ldrb	r3, [r7, #19]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005dc2:	7cfb      	ldrb	r3, [r7, #19]
 8005dc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dd2:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de0:	492d      	ldr	r1, [pc, #180]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005df0:	d106      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df2:	4b29      	ldr	r3, [pc, #164]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dfc:	60d3      	str	r3, [r2, #12]
 8005dfe:	e011      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f843 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e1a:	7cfb      	ldrb	r3, [r7, #19]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01c      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e30:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3e:	4916      	ldr	r1, [pc, #88]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e4e:	d10c      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	2102      	movs	r1, #2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f820 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e60:	7cfb      	ldrb	r3, [r7, #19]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e76:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e84:	4904      	ldr	r1, [pc, #16]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000

08005e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eaa:	4b74      	ldr	r3, [pc, #464]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0203 	and.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d10d      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ece:	4b6b      	ldr	r3, [pc, #428]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
       ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d047      	beq.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e044      	b.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d018      	beq.n	8005f22 <RCCEx_PLLSAI1_Config+0x86>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d825      	bhi.n	8005f40 <RCCEx_PLLSAI1_Config+0xa4>
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d002      	beq.n	8005efe <RCCEx_PLLSAI1_Config+0x62>
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d009      	beq.n	8005f10 <RCCEx_PLLSAI1_Config+0x74>
 8005efc:	e020      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005efe:	4b5f      	ldr	r3, [pc, #380]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d11d      	bne.n	8005f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f0e:	e01a      	b.n	8005f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f10:	4b5a      	ldr	r3, [pc, #360]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d116      	bne.n	8005f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f20:	e013      	b.n	8005f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f22:	4b56      	ldr	r3, [pc, #344]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f3e:	e006      	b.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
      break;
 8005f44:	e004      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f56:	4b49      	ldr	r3, [pc, #292]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6819      	ldr	r1, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	4943      	ldr	r1, [pc, #268]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d17c      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f78:	4b40      	ldr	r3, [pc, #256]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fc ffd8 	bl	8002f38 <HAL_GetTick>
 8005f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f8a:	e009      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f8c:	f7fc ffd4 	bl	8002f38 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d902      	bls.n	8005fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f9e:	e005      	b.n	8005fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fa0:	4b36      	ldr	r3, [pc, #216]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ef      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d15f      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d110      	bne.n	8005fda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb8:	4b30      	ldr	r3, [pc, #192]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005fc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6892      	ldr	r2, [r2, #8]
 8005fc8:	0211      	lsls	r1, r2, #8
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68d2      	ldr	r2, [r2, #12]
 8005fce:	06d2      	lsls	r2, r2, #27
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	492a      	ldr	r1, [pc, #168]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
 8005fd8:	e027      	b.n	800602a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d112      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe0:	4b26      	ldr	r3, [pc, #152]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005fe8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	0211      	lsls	r1, r2, #8
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6912      	ldr	r2, [r2, #16]
 8005ff6:	0852      	lsrs	r2, r2, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0552      	lsls	r2, r2, #21
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	491f      	ldr	r1, [pc, #124]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]
 8006004:	e011      	b.n	800602a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006006:	4b1d      	ldr	r3, [pc, #116]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800600e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6892      	ldr	r2, [r2, #8]
 8006016:	0211      	lsls	r1, r2, #8
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6952      	ldr	r2, [r2, #20]
 800601c:	0852      	lsrs	r2, r2, #1
 800601e:	3a01      	subs	r2, #1
 8006020:	0652      	lsls	r2, r2, #25
 8006022:	430a      	orrs	r2, r1
 8006024:	4915      	ldr	r1, [pc, #84]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800602a:	4b14      	ldr	r3, [pc, #80]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a13      	ldr	r2, [pc, #76]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7fc ff7f 	bl	8002f38 <HAL_GetTick>
 800603a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800603c:	e009      	b.n	8006052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800603e:	f7fc ff7b 	bl	8002f38 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d902      	bls.n	8006052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	73fb      	strb	r3, [r7, #15]
          break;
 8006050:	e005      	b.n	800605e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ef      	beq.n	800603e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	4903      	ldr	r1, [pc, #12]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000

08006080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e049      	b.n	8006126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc fcd8 	bl	8002a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f000 fcd8 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e03b      	b.n	80061c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a19      	ldr	r2, [pc, #100]	@ (80061cc <HAL_TIM_Base_Start_IT+0x9c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_TIM_Base_Start_IT+0x4e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006172:	d004      	beq.n	800617e <HAL_TIM_Base_Start_IT+0x4e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a15      	ldr	r2, [pc, #84]	@ (80061d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d115      	bne.n	80061aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006186:	4013      	ands	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b06      	cmp	r3, #6
 800618e:	d015      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x8c>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006196:	d011      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	e008      	b.n	80061bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e000      	b.n	80061be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40014000 	.word	0x40014000
 80061d4:	00010007 	.word	0x00010007

080061d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e049      	b.n	800627e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f841 	bl	8006286 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f000 fc2c 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <HAL_TIM_PWM_Start+0x24>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e03c      	b.n	800633a <HAL_TIM_PWM_Start+0x9e>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d109      	bne.n	80062da <HAL_TIM_PWM_Start+0x3e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	bf14      	ite	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	2300      	moveq	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e02f      	b.n	800633a <HAL_TIM_PWM_Start+0x9e>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x58>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start+0x9e>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start+0x72>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start+0x9e>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b10      	cmp	r3, #16
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x8c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start+0x9e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e07e      	b.n	8006440 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0xb6>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006350:	e023      	b.n	800639a <HAL_TIM_PWM_Start+0xfe>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0xc6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006360:	e01b      	b.n	800639a <HAL_TIM_PWM_Start+0xfe>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xd6>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006370:	e013      	b.n	800639a <HAL_TIM_PWM_Start+0xfe>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b0c      	cmp	r3, #12
 8006376:	d104      	bne.n	8006382 <HAL_TIM_PWM_Start+0xe6>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006380:	e00b      	b.n	800639a <HAL_TIM_PWM_Start+0xfe>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b10      	cmp	r3, #16
 8006386:	d104      	bne.n	8006392 <HAL_TIM_PWM_Start+0xf6>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006390:	e003      	b.n	800639a <HAL_TIM_PWM_Start+0xfe>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 feee 	bl	8007184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <HAL_TIM_PWM_Start+0x1ac>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_TIM_PWM_Start+0x12a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a25      	ldr	r2, [pc, #148]	@ (800644c <HAL_TIM_PWM_Start+0x1b0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_TIM_PWM_Start+0x12a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a23      	ldr	r2, [pc, #140]	@ (8006450 <HAL_TIM_PWM_Start+0x1b4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_TIM_PWM_Start+0x12e>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <HAL_TIM_PWM_Start+0x130>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIM_PWM_Start+0x1ac>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIM_PWM_Start+0x162>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f2:	d004      	beq.n	80063fe <HAL_TIM_PWM_Start+0x162>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a14      	ldr	r2, [pc, #80]	@ (800644c <HAL_TIM_PWM_Start+0x1b0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d115      	bne.n	800642a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <HAL_TIM_PWM_Start+0x1b8>)
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b06      	cmp	r3, #6
 800640e:	d015      	beq.n	800643c <HAL_TIM_PWM_Start+0x1a0>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006416:	d011      	beq.n	800643c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	e008      	b.n	800643c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e000      	b.n	800643e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	00010007 	.word	0x00010007

08006458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d020      	beq.n	80064bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0202 	mvn.w	r2, #2
 800648c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fac7 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fab9 	bl	8006a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 faca 	bl	8006a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0204 	mvn.w	r2, #4
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 faa1 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa93 	bl	8006a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 faa4 	bl	8006a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0208 	mvn.w	r2, #8
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2204      	movs	r2, #4
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa7b 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa6d 	bl	8006a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa7e 	bl	8006a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0210 	mvn.w	r2, #16
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2208      	movs	r2, #8
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa55 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa47 	bl	8006a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fa58 	bl	8006a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0201 	mvn.w	r2, #1
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fd84 	bl	80020cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fed7 	bl	80073a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00c      	beq.n	8006616 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800660e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fecf 	bl	80073b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00c      	beq.n	800663a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa12 	bl	8006a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00c      	beq.n	800665e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0220 	mvn.w	r2, #32
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fe97 	bl	800738c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0ff      	b.n	8006886 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b14      	cmp	r3, #20
 8006692:	f200 80f0 	bhi.w	8006876 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006696:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	08006877 	.word	0x08006877
 80066a4:	08006877 	.word	0x08006877
 80066a8:	08006877 	.word	0x08006877
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006877 	.word	0x08006877
 80066b4:	08006877 	.word	0x08006877
 80066b8:	08006877 	.word	0x08006877
 80066bc:	08006773 	.word	0x08006773
 80066c0:	08006877 	.word	0x08006877
 80066c4:	08006877 	.word	0x08006877
 80066c8:	08006877 	.word	0x08006877
 80066cc:	080067b3 	.word	0x080067b3
 80066d0:	08006877 	.word	0x08006877
 80066d4:	08006877 	.word	0x08006877
 80066d8:	08006877 	.word	0x08006877
 80066dc:	080067f5 	.word	0x080067f5
 80066e0:	08006877 	.word	0x08006877
 80066e4:	08006877 	.word	0x08006877
 80066e8:	08006877 	.word	0x08006877
 80066ec:	08006835 	.word	0x08006835
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fa2c 	bl	8006b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0208 	orr.w	r2, r2, #8
 800670a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0204 	bic.w	r2, r2, #4
 800671a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6999      	ldr	r1, [r3, #24]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	619a      	str	r2, [r3, #24]
      break;
 800672e:	e0a5      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fa88 	bl	8006c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800674a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800675a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6999      	ldr	r1, [r3, #24]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	021a      	lsls	r2, r3, #8
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	619a      	str	r2, [r3, #24]
      break;
 8006770:	e084      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fae1 	bl	8006d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0208 	orr.w	r2, r2, #8
 800678c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0204 	bic.w	r2, r2, #4
 800679c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69d9      	ldr	r1, [r3, #28]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	61da      	str	r2, [r3, #28]
      break;
 80067b0:	e064      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fb39 	bl	8006e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	021a      	lsls	r2, r3, #8
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	61da      	str	r2, [r3, #28]
      break;
 80067f2:	e043      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fb76 	bl	8006eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0208 	orr.w	r2, r2, #8
 800680e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0204 	bic.w	r2, r2, #4
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006832:	e023      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fbae 	bl	8006f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800684e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	021a      	lsls	r2, r3, #8
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006874:	e002      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
      break;
 800687a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop

08006890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_ConfigClockSource+0x1c>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e0b6      	b.n	8006a1a <HAL_TIM_ConfigClockSource+0x18a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e8:	d03e      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0xd8>
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ee:	f200 8087 	bhi.w	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f6:	f000 8086 	beq.w	8006a06 <HAL_TIM_ConfigClockSource+0x176>
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068fe:	d87f      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b70      	cmp	r3, #112	@ 0x70
 8006902:	d01a      	beq.n	800693a <HAL_TIM_ConfigClockSource+0xaa>
 8006904:	2b70      	cmp	r3, #112	@ 0x70
 8006906:	d87b      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b60      	cmp	r3, #96	@ 0x60
 800690a:	d050      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x11e>
 800690c:	2b60      	cmp	r3, #96	@ 0x60
 800690e:	d877      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006910:	2b50      	cmp	r3, #80	@ 0x50
 8006912:	d03c      	beq.n	800698e <HAL_TIM_ConfigClockSource+0xfe>
 8006914:	2b50      	cmp	r3, #80	@ 0x50
 8006916:	d873      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006918:	2b40      	cmp	r3, #64	@ 0x40
 800691a:	d058      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x13e>
 800691c:	2b40      	cmp	r3, #64	@ 0x40
 800691e:	d86f      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006920:	2b30      	cmp	r3, #48	@ 0x30
 8006922:	d064      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x15e>
 8006924:	2b30      	cmp	r3, #48	@ 0x30
 8006926:	d86b      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006928:	2b20      	cmp	r3, #32
 800692a:	d060      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x15e>
 800692c:	2b20      	cmp	r3, #32
 800692e:	d867      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05c      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x15e>
 8006934:	2b10      	cmp	r3, #16
 8006936:	d05a      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x15e>
 8006938:	e062      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800694a:	f000 fbfb 	bl	8007144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800695c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	609a      	str	r2, [r3, #8]
      break;
 8006966:	e04f      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006978:	f000 fbe4 	bl	8007144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800698a:	609a      	str	r2, [r3, #8]
      break;
 800698c:	e03c      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	461a      	mov	r2, r3
 800699c:	f000 fb58 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2150      	movs	r1, #80	@ 0x50
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fbb1 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80069ac:	e02c      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	461a      	mov	r2, r3
 80069bc:	f000 fb77 	bl	80070ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2160      	movs	r1, #96	@ 0x60
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fba1 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80069cc:	e01c      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	461a      	mov	r2, r3
 80069dc:	f000 fb38 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2140      	movs	r1, #64	@ 0x40
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fb91 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80069ec:	e00c      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	4610      	mov	r0, r2
 80069fa:	f000 fb88 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80069fe:	e003      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
      break;
 8006a04:	e000      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a30      	ldr	r2, [pc, #192]	@ (8006b48 <TIM_Base_SetConfig+0xd4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0x20>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a92:	d108      	bne.n	8006aa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a27      	ldr	r2, [pc, #156]	@ (8006b48 <TIM_Base_SetConfig+0xd4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_Base_SetConfig+0x52>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab4:	d007      	beq.n	8006ac6 <TIM_Base_SetConfig+0x52>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a24      	ldr	r2, [pc, #144]	@ (8006b4c <TIM_Base_SetConfig+0xd8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_Base_SetConfig+0x52>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	@ (8006b50 <TIM_Base_SetConfig+0xdc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d108      	bne.n	8006ad8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a12      	ldr	r2, [pc, #72]	@ (8006b48 <TIM_Base_SetConfig+0xd4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0xa0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a11      	ldr	r2, [pc, #68]	@ (8006b4c <TIM_Base_SetConfig+0xd8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0xa0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a10      	ldr	r2, [pc, #64]	@ (8006b50 <TIM_Base_SetConfig+0xdc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d105      	bne.n	8006b3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	611a      	str	r2, [r3, #16]
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400

08006b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f023 0201 	bic.w	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 0302 	bic.w	r3, r3, #2
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a24      	ldr	r2, [pc, #144]	@ (8006c40 <TIM_OC1_SetConfig+0xec>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x70>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	@ (8006c44 <TIM_OC1_SetConfig+0xf0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x70>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a22      	ldr	r2, [pc, #136]	@ (8006c48 <TIM_OC1_SetConfig+0xf4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10c      	bne.n	8006bde <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0308 	bic.w	r3, r3, #8
 8006bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <TIM_OC1_SetConfig+0xec>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xa2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <TIM_OC1_SetConfig+0xf0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xa2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a15      	ldr	r2, [pc, #84]	@ (8006c48 <TIM_OC1_SetConfig+0xf4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d111      	bne.n	8006c1a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400

08006c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0210 	bic.w	r2, r3, #16
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0320 	bic.w	r3, r3, #32
 8006c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <TIM_OC2_SetConfig+0xe8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10d      	bne.n	8006ccc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a19      	ldr	r2, [pc, #100]	@ (8006d34 <TIM_OC2_SetConfig+0xe8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <TIM_OC2_SetConfig+0x98>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a18      	ldr	r2, [pc, #96]	@ (8006d38 <TIM_OC2_SetConfig+0xec>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC2_SetConfig+0x98>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a17      	ldr	r2, [pc, #92]	@ (8006d3c <TIM_OC2_SetConfig+0xf0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d113      	bne.n	8006d0c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400

08006d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a21      	ldr	r2, [pc, #132]	@ (8006e24 <TIM_OC3_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d10d      	bne.n	8006dbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <TIM_OC3_SetConfig+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d007      	beq.n	8006dd6 <TIM_OC3_SetConfig+0x96>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <TIM_OC3_SetConfig+0xe8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_OC3_SetConfig+0x96>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <TIM_OC3_SetConfig+0xec>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d113      	bne.n	8006dfe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	621a      	str	r2, [r3, #32]
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40014400 	.word	0x40014400

08006e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	@ (8006ee0 <TIM_OC4_SetConfig+0xb0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC4_SetConfig+0x74>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a13      	ldr	r2, [pc, #76]	@ (8006ee4 <TIM_OC4_SetConfig+0xb4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC4_SetConfig+0x74>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <TIM_OC4_SetConfig+0xb8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d109      	bne.n	8006eb8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	019b      	lsls	r3, r3, #6
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400

08006eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a13      	ldr	r2, [pc, #76]	@ (8006f90 <TIM_OC5_SetConfig+0xa4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d007      	beq.n	8006f56 <TIM_OC5_SetConfig+0x6a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a12      	ldr	r2, [pc, #72]	@ (8006f94 <TIM_OC5_SetConfig+0xa8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_OC5_SetConfig+0x6a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a11      	ldr	r2, [pc, #68]	@ (8006f98 <TIM_OC5_SetConfig+0xac>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d109      	bne.n	8006f6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40012c00 	.word	0x40012c00
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40014400 	.word	0x40014400

08006f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	051b      	lsls	r3, r3, #20
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a14      	ldr	r2, [pc, #80]	@ (8007044 <TIM_OC6_SetConfig+0xa8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d007      	beq.n	8007008 <TIM_OC6_SetConfig+0x6c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a13      	ldr	r2, [pc, #76]	@ (8007048 <TIM_OC6_SetConfig+0xac>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC6_SetConfig+0x6c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a12      	ldr	r2, [pc, #72]	@ (800704c <TIM_OC6_SetConfig+0xb0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800700e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	029b      	lsls	r3, r3, #10
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40012c00 	.word	0x40012c00
 8007048:	40014000 	.word	0x40014000
 800704c:	40014400 	.word	0x40014400

08007050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 030a 	bic.w	r3, r3, #10
 800708c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f023 0210 	bic.w	r2, r3, #16
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	f043 0307 	orr.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800715e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	021a      	lsls	r2, r3, #8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	431a      	orrs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2201      	movs	r2, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1a      	ldr	r2, [r3, #32]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1a      	ldr	r2, [r3, #32]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	431a      	orrs	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e04f      	b.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a21      	ldr	r2, [pc, #132]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007218:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a14      	ldr	r2, [pc, #80]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007250:	d004      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a10      	ldr	r2, [pc, #64]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10c      	bne.n	8007276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40012c00 	.word	0x40012c00
 8007298:	40014000 	.word	0x40014000

0800729c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e060      	b.n	800737a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a14      	ldr	r2, [pc, #80]	@ (8007388 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d115      	bne.n	8007368 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	051b      	lsls	r3, r3, #20
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40012c00 	.word	0x40012c00

0800738c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e040      	b.n	800745c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fb fade 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	@ 0x24
 80073f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fade 	bl	80079d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8af 	bl	8007578 <UART_SetConfig>
 800741a:	4603      	mov	r3, r0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e01b      	b.n	800745c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb5d 	bl	8007b14 <UART_CheckIdleState>
 800745a:	4603      	mov	r3, r0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	@ 0x28
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007478:	2b20      	cmp	r3, #32
 800747a:	d177      	bne.n	800756c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_UART_Transmit+0x24>
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e070      	b.n	800756e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2221      	movs	r2, #33	@ 0x21
 8007498:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749a:	f7fb fd4d 	bl	8002f38 <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	88fa      	ldrh	r2, [r7, #6]
 80074ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	d108      	bne.n	80074cc <HAL_UART_Transmit+0x68>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e003      	b.n	80074d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d4:	e02f      	b.n	8007536 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2200      	movs	r2, #0
 80074de:	2180      	movs	r1, #128	@ 0x80
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fbbf 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e03b      	b.n	800756e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10b      	bne.n	8007514 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007508:	b292      	uxth	r2, r2
 800750a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	3302      	adds	r3, #2
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e007      	b.n	8007524 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3301      	adds	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1c9      	bne.n	80074d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	2140      	movs	r1, #64	@ 0x40
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fb89 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e005      	b.n	800756e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b08a      	sub	sp, #40	@ 0x28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	431a      	orrs	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4bb4      	ldr	r3, [pc, #720]	@ (8007878 <UART_SetConfig+0x300>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4aa9      	ldr	r2, [pc, #676]	@ (800787c <UART_SetConfig+0x304>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	4313      	orrs	r3, r2
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f4:	430a      	orrs	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4aa0      	ldr	r2, [pc, #640]	@ (8007880 <UART_SetConfig+0x308>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d126      	bne.n	8007650 <UART_SetConfig+0xd8>
 8007602:	4ba0      	ldr	r3, [pc, #640]	@ (8007884 <UART_SetConfig+0x30c>)
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0xd0>
 8007610:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <UART_SetConfig+0xa0>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007629 	.word	0x08007629
 800761c:	08007639 	.word	0x08007639
 8007620:	08007631 	.word	0x08007631
 8007624:	08007641 	.word	0x08007641
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e080      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007636:	e07c      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763e:	e078      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007646:	e074      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e070      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a8c      	ldr	r2, [pc, #560]	@ (8007888 <UART_SetConfig+0x310>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d138      	bne.n	80076cc <UART_SetConfig+0x154>
 800765a:	4b8a      	ldr	r3, [pc, #552]	@ (8007884 <UART_SetConfig+0x30c>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007660:	f003 030c 	and.w	r3, r3, #12
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d82d      	bhi.n	80076c4 <UART_SetConfig+0x14c>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0xf8>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	080076a5 	.word	0x080076a5
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076b5 	.word	0x080076b5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076c5 	.word	0x080076c5
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076ad 	.word	0x080076ad
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076c5 	.word	0x080076c5
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076aa:	e042      	b.n	8007732 <UART_SetConfig+0x1ba>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b2:	e03e      	b.n	8007732 <UART_SetConfig+0x1ba>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ba:	e03a      	b.n	8007732 <UART_SetConfig+0x1ba>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c2:	e036      	b.n	8007732 <UART_SetConfig+0x1ba>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ca:	e032      	b.n	8007732 <UART_SetConfig+0x1ba>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a6a      	ldr	r2, [pc, #424]	@ (800787c <UART_SetConfig+0x304>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12a      	bne.n	800772c <UART_SetConfig+0x1b4>
 80076d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007884 <UART_SetConfig+0x30c>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076e4:	d01a      	beq.n	800771c <UART_SetConfig+0x1a4>
 80076e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ea:	d81b      	bhi.n	8007724 <UART_SetConfig+0x1ac>
 80076ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f0:	d00c      	beq.n	800770c <UART_SetConfig+0x194>
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f6:	d815      	bhi.n	8007724 <UART_SetConfig+0x1ac>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <UART_SetConfig+0x18c>
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007700:	d008      	beq.n	8007714 <UART_SetConfig+0x19c>
 8007702:	e00f      	b.n	8007724 <UART_SetConfig+0x1ac>
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770a:	e012      	b.n	8007732 <UART_SetConfig+0x1ba>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007712:	e00e      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771a:	e00a      	b.n	8007732 <UART_SetConfig+0x1ba>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e006      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772a:	e002      	b.n	8007732 <UART_SetConfig+0x1ba>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a51      	ldr	r2, [pc, #324]	@ (800787c <UART_SetConfig+0x304>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d17a      	bne.n	8007832 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800773c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007740:	2b08      	cmp	r3, #8
 8007742:	d824      	bhi.n	800778e <UART_SetConfig+0x216>
 8007744:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <UART_SetConfig+0x1d4>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	08007771 	.word	0x08007771
 8007750:	0800778f 	.word	0x0800778f
 8007754:	08007779 	.word	0x08007779
 8007758:	0800778f 	.word	0x0800778f
 800775c:	0800777f 	.word	0x0800777f
 8007760:	0800778f 	.word	0x0800778f
 8007764:	0800778f 	.word	0x0800778f
 8007768:	0800778f 	.word	0x0800778f
 800776c:	08007787 	.word	0x08007787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fe f912 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007774:	61f8      	str	r0, [r7, #28]
        break;
 8007776:	e010      	b.n	800779a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007778:	4b44      	ldr	r3, [pc, #272]	@ (800788c <UART_SetConfig+0x314>)
 800777a:	61fb      	str	r3, [r7, #28]
        break;
 800777c:	e00d      	b.n	800779a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777e:	f7fe f873 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007782:	61f8      	str	r0, [r7, #28]
        break;
 8007784:	e009      	b.n	800779a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800778a:	61fb      	str	r3, [r7, #28]
        break;
 800778c:	e005      	b.n	800779a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8107 	beq.w	80079b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d305      	bcc.n	80077be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d903      	bls.n	80077c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077c4:	e0f4      	b.n	80079b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2200      	movs	r2, #0
 80077ca:	461c      	mov	r4, r3
 80077cc:	4615      	mov	r5, r2
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	022b      	lsls	r3, r5, #8
 80077d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077dc:	0222      	lsls	r2, r4, #8
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	6849      	ldr	r1, [r1, #4]
 80077e2:	0849      	lsrs	r1, r1, #1
 80077e4:	2000      	movs	r0, #0
 80077e6:	4688      	mov	r8, r1
 80077e8:	4681      	mov	r9, r0
 80077ea:	eb12 0a08 	adds.w	sl, r2, r8
 80077ee:	eb43 0b09 	adc.w	fp, r3, r9
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	603b      	str	r3, [r7, #0]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	f7f9 fade 	bl	8000dc4 <__aeabi_uldivmod>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4613      	mov	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007816:	d308      	bcc.n	800782a <UART_SetConfig+0x2b2>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800781e:	d204      	bcs.n	800782a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	60da      	str	r2, [r3, #12]
 8007828:	e0c2      	b.n	80079b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007830:	e0be      	b.n	80079b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783a:	d16a      	bne.n	8007912 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800783c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007840:	2b08      	cmp	r3, #8
 8007842:	d834      	bhi.n	80078ae <UART_SetConfig+0x336>
 8007844:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0x2d4>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007871 	.word	0x08007871
 8007850:	08007891 	.word	0x08007891
 8007854:	08007899 	.word	0x08007899
 8007858:	080078af 	.word	0x080078af
 800785c:	0800789f 	.word	0x0800789f
 8007860:	080078af 	.word	0x080078af
 8007864:	080078af 	.word	0x080078af
 8007868:	080078af 	.word	0x080078af
 800786c:	080078a7 	.word	0x080078a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fe f892 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007874:	61f8      	str	r0, [r7, #28]
        break;
 8007876:	e020      	b.n	80078ba <UART_SetConfig+0x342>
 8007878:	efff69f3 	.word	0xefff69f3
 800787c:	40008000 	.word	0x40008000
 8007880:	40013800 	.word	0x40013800
 8007884:	40021000 	.word	0x40021000
 8007888:	40004400 	.word	0x40004400
 800788c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007890:	f7fe f898 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8007894:	61f8      	str	r0, [r7, #28]
        break;
 8007896:	e010      	b.n	80078ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007898:	4b4c      	ldr	r3, [pc, #304]	@ (80079cc <UART_SetConfig+0x454>)
 800789a:	61fb      	str	r3, [r7, #28]
        break;
 800789c:	e00d      	b.n	80078ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789e:	f7fd ffe3 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 80078a2:	61f8      	str	r0, [r7, #28]
        break;
 80078a4:	e009      	b.n	80078ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078aa:	61fb      	str	r3, [r7, #28]
        break;
 80078ac:	e005      	b.n	80078ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d077      	beq.n	80079b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	005a      	lsls	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	085b      	lsrs	r3, r3, #1
 80078ca:	441a      	add	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b0f      	cmp	r3, #15
 80078da:	d916      	bls.n	800790a <UART_SetConfig+0x392>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e2:	d212      	bcs.n	800790a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f023 030f 	bic.w	r3, r3, #15
 80078ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	8afb      	ldrh	r3, [r7, #22]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	8afa      	ldrh	r2, [r7, #22]
 8007906:	60da      	str	r2, [r3, #12]
 8007908:	e052      	b.n	80079b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007910:	e04e      	b.n	80079b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007912:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007916:	2b08      	cmp	r3, #8
 8007918:	d827      	bhi.n	800796a <UART_SetConfig+0x3f2>
 800791a:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <UART_SetConfig+0x3a8>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	0800796b 	.word	0x0800796b
 8007930:	0800795b 	.word	0x0800795b
 8007934:	0800796b 	.word	0x0800796b
 8007938:	0800796b 	.word	0x0800796b
 800793c:	0800796b 	.word	0x0800796b
 8007940:	08007963 	.word	0x08007963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fe f828 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007948:	61f8      	str	r0, [r7, #28]
        break;
 800794a:	e014      	b.n	8007976 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800794c:	f7fe f83a 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8007950:	61f8      	str	r0, [r7, #28]
        break;
 8007952:	e010      	b.n	8007976 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007954:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <UART_SetConfig+0x454>)
 8007956:	61fb      	str	r3, [r7, #28]
        break;
 8007958:	e00d      	b.n	8007976 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795a:	f7fd ff85 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800795e:	61f8      	str	r0, [r7, #28]
        break;
 8007960:	e009      	b.n	8007976 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007966:	61fb      	str	r3, [r7, #28]
        break;
 8007968:	e005      	b.n	8007976 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007974:	bf00      	nop
    }

    if (pclk != 0U)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d019      	beq.n	80079b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	085a      	lsrs	r2, r3, #1
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d909      	bls.n	80079aa <UART_SetConfig+0x432>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799c:	d205      	bcs.n	80079aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e002      	b.n	80079b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3728      	adds	r7, #40	@ 0x28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ca:	bf00      	nop
 80079cc:	00f42400 	.word	0x00f42400

080079d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ace:	d10a      	bne.n	8007ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
  }
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b098      	sub	sp, #96	@ 0x60
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b24:	f7fb fa08 	bl	8002f38 <HAL_GetTick>
 8007b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d12e      	bne.n	8007b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b40:	2200      	movs	r2, #0
 8007b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f88c 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d021      	beq.n	8007b96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e062      	b.n	8007c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d149      	bne.n	8007c38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bac:	2200      	movs	r2, #0
 8007bae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f856 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03c      	beq.n	8007c38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	623b      	str	r3, [r7, #32]
   return(result);
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c10:	61fa      	str	r2, [r7, #28]
 8007c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e5      	bne.n	8007bf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e011      	b.n	8007c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3758      	adds	r7, #88	@ 0x58
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c74:	e04f      	b.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d04b      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7e:	f7fb f95b 	bl	8002f38 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d302      	bcc.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e04e      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d037      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b80      	cmp	r3, #128	@ 0x80
 8007caa:	d034      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d031      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d110      	bne.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f838 	bl	8007d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e029      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf0:	d111      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f81e 	bl	8007d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e00f      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d0a0      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b095      	sub	sp, #84	@ 0x54
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d118      	bne.n	8007de6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f023 0310 	bic.w	r3, r3, #16
 8007dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6979      	ldr	r1, [r7, #20]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	613b      	str	r3, [r7, #16]
   return(result);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e6      	bne.n	8007db4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007dfa:	bf00      	nop
 8007dfc:	3754      	adds	r7, #84	@ 0x54
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <__cvt>:
 8007e06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0a:	ec57 6b10 	vmov	r6, r7, d0
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	460c      	mov	r4, r1
 8007e12:	4619      	mov	r1, r3
 8007e14:	463b      	mov	r3, r7
 8007e16:	bfbb      	ittet	lt
 8007e18:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e1c:	461f      	movlt	r7, r3
 8007e1e:	2300      	movge	r3, #0
 8007e20:	232d      	movlt	r3, #45	@ 0x2d
 8007e22:	700b      	strb	r3, [r1, #0]
 8007e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e26:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e2a:	4691      	mov	r9, r2
 8007e2c:	f023 0820 	bic.w	r8, r3, #32
 8007e30:	bfbc      	itt	lt
 8007e32:	4632      	movlt	r2, r6
 8007e34:	4616      	movlt	r6, r2
 8007e36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e3a:	d005      	beq.n	8007e48 <__cvt+0x42>
 8007e3c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e40:	d100      	bne.n	8007e44 <__cvt+0x3e>
 8007e42:	3401      	adds	r4, #1
 8007e44:	2102      	movs	r1, #2
 8007e46:	e000      	b.n	8007e4a <__cvt+0x44>
 8007e48:	2103      	movs	r1, #3
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	ab02      	add	r3, sp, #8
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	ec47 6b10 	vmov	d0, r6, r7
 8007e56:	4653      	mov	r3, sl
 8007e58:	4622      	mov	r2, r4
 8007e5a:	f000 ff3d 	bl	8008cd8 <_dtoa_r>
 8007e5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e62:	4605      	mov	r5, r0
 8007e64:	d119      	bne.n	8007e9a <__cvt+0x94>
 8007e66:	f019 0f01 	tst.w	r9, #1
 8007e6a:	d00e      	beq.n	8007e8a <__cvt+0x84>
 8007e6c:	eb00 0904 	add.w	r9, r0, r4
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fe26 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7c:	b108      	cbz	r0, 8007e82 <__cvt+0x7c>
 8007e7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e82:	2230      	movs	r2, #48	@ 0x30
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	454b      	cmp	r3, r9
 8007e88:	d31e      	bcc.n	8007ec8 <__cvt+0xc2>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e8e:	1b5b      	subs	r3, r3, r5
 8007e90:	4628      	mov	r0, r5
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	b004      	add	sp, #16
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e9e:	eb00 0904 	add.w	r9, r0, r4
 8007ea2:	d1e5      	bne.n	8007e70 <__cvt+0x6a>
 8007ea4:	7803      	ldrb	r3, [r0, #0]
 8007ea6:	2b30      	cmp	r3, #48	@ 0x30
 8007ea8:	d10a      	bne.n	8007ec0 <__cvt+0xba>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2300      	movs	r3, #0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eb6:	b918      	cbnz	r0, 8007ec0 <__cvt+0xba>
 8007eb8:	f1c4 0401 	rsb	r4, r4, #1
 8007ebc:	f8ca 4000 	str.w	r4, [sl]
 8007ec0:	f8da 3000 	ldr.w	r3, [sl]
 8007ec4:	4499      	add	r9, r3
 8007ec6:	e7d3      	b.n	8007e70 <__cvt+0x6a>
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	9103      	str	r1, [sp, #12]
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e7d9      	b.n	8007e84 <__cvt+0x7e>

08007ed0 <__exponent>:
 8007ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	bfba      	itte	lt
 8007ed6:	4249      	neglt	r1, r1
 8007ed8:	232d      	movlt	r3, #45	@ 0x2d
 8007eda:	232b      	movge	r3, #43	@ 0x2b
 8007edc:	2909      	cmp	r1, #9
 8007ede:	7002      	strb	r2, [r0, #0]
 8007ee0:	7043      	strb	r3, [r0, #1]
 8007ee2:	dd29      	ble.n	8007f38 <__exponent+0x68>
 8007ee4:	f10d 0307 	add.w	r3, sp, #7
 8007ee8:	461d      	mov	r5, r3
 8007eea:	270a      	movs	r7, #10
 8007eec:	461a      	mov	r2, r3
 8007eee:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ef2:	fb07 1416 	mls	r4, r7, r6, r1
 8007ef6:	3430      	adds	r4, #48	@ 0x30
 8007ef8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007efc:	460c      	mov	r4, r1
 8007efe:	2c63      	cmp	r4, #99	@ 0x63
 8007f00:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f04:	4631      	mov	r1, r6
 8007f06:	dcf1      	bgt.n	8007eec <__exponent+0x1c>
 8007f08:	3130      	adds	r1, #48	@ 0x30
 8007f0a:	1e94      	subs	r4, r2, #2
 8007f0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f10:	1c41      	adds	r1, r0, #1
 8007f12:	4623      	mov	r3, r4
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	d30a      	bcc.n	8007f2e <__exponent+0x5e>
 8007f18:	f10d 0309 	add.w	r3, sp, #9
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	42ac      	cmp	r4, r5
 8007f20:	bf88      	it	hi
 8007f22:	2300      	movhi	r3, #0
 8007f24:	3302      	adds	r3, #2
 8007f26:	4403      	add	r3, r0
 8007f28:	1a18      	subs	r0, r3, r0
 8007f2a:	b003      	add	sp, #12
 8007f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f36:	e7ed      	b.n	8007f14 <__exponent+0x44>
 8007f38:	2330      	movs	r3, #48	@ 0x30
 8007f3a:	3130      	adds	r1, #48	@ 0x30
 8007f3c:	7083      	strb	r3, [r0, #2]
 8007f3e:	70c1      	strb	r1, [r0, #3]
 8007f40:	1d03      	adds	r3, r0, #4
 8007f42:	e7f1      	b.n	8007f28 <__exponent+0x58>

08007f44 <_printf_float>:
 8007f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	b08d      	sub	sp, #52	@ 0x34
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f50:	4616      	mov	r6, r2
 8007f52:	461f      	mov	r7, r3
 8007f54:	4605      	mov	r5, r0
 8007f56:	f000 fdbd 	bl	8008ad4 <_localeconv_r>
 8007f5a:	6803      	ldr	r3, [r0, #0]
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f8 f986 	bl	8000270 <strlen>
 8007f64:	2300      	movs	r3, #0
 8007f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f68:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6c:	9005      	str	r0, [sp, #20]
 8007f6e:	3307      	adds	r3, #7
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	f103 0208 	add.w	r2, r3, #8
 8007f78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f7c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f80:	f8c8 2000 	str.w	r2, [r8]
 8007f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f8c:	9307      	str	r3, [sp, #28]
 8007f8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f9a:	4b9c      	ldr	r3, [pc, #624]	@ (800820c <_printf_float+0x2c8>)
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa0:	f7f8 fdc4 	bl	8000b2c <__aeabi_dcmpun>
 8007fa4:	bb70      	cbnz	r0, 8008004 <_printf_float+0xc0>
 8007fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007faa:	4b98      	ldr	r3, [pc, #608]	@ (800820c <_printf_float+0x2c8>)
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	f7f8 fd9e 	bl	8000af0 <__aeabi_dcmple>
 8007fb4:	bb30      	cbnz	r0, 8008004 <_printf_float+0xc0>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fd8d 	bl	8000adc <__aeabi_dcmplt>
 8007fc2:	b110      	cbz	r0, 8007fca <_printf_float+0x86>
 8007fc4:	232d      	movs	r3, #45	@ 0x2d
 8007fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fca:	4a91      	ldr	r2, [pc, #580]	@ (8008210 <_printf_float+0x2cc>)
 8007fcc:	4b91      	ldr	r3, [pc, #580]	@ (8008214 <_printf_float+0x2d0>)
 8007fce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fd2:	bf8c      	ite	hi
 8007fd4:	4690      	movhi	r8, r2
 8007fd6:	4698      	movls	r8, r3
 8007fd8:	2303      	movs	r3, #3
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	f02b 0304 	bic.w	r3, fp, #4
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	f04f 0900 	mov.w	r9, #0
 8007fe6:	9700      	str	r7, [sp, #0]
 8007fe8:	4633      	mov	r3, r6
 8007fea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f9d2 	bl	8008398 <_printf_common>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f040 808d 	bne.w	8008114 <_printf_float+0x1d0>
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	b00d      	add	sp, #52	@ 0x34
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fd8e 	bl	8000b2c <__aeabi_dcmpun>
 8008010:	b140      	cbz	r0, 8008024 <_printf_float+0xe0>
 8008012:	464b      	mov	r3, r9
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfbc      	itt	lt
 8008018:	232d      	movlt	r3, #45	@ 0x2d
 800801a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800801e:	4a7e      	ldr	r2, [pc, #504]	@ (8008218 <_printf_float+0x2d4>)
 8008020:	4b7e      	ldr	r3, [pc, #504]	@ (800821c <_printf_float+0x2d8>)
 8008022:	e7d4      	b.n	8007fce <_printf_float+0x8a>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800802a:	9206      	str	r2, [sp, #24]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	d13b      	bne.n	80080a8 <_printf_float+0x164>
 8008030:	2306      	movs	r3, #6
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008038:	2300      	movs	r3, #0
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008040:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008044:	ab09      	add	r3, sp, #36	@ 0x24
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	6861      	ldr	r1, [r4, #4]
 800804a:	ec49 8b10 	vmov	d0, r8, r9
 800804e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff fed7 	bl	8007e06 <__cvt>
 8008058:	9b06      	ldr	r3, [sp, #24]
 800805a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800805c:	2b47      	cmp	r3, #71	@ 0x47
 800805e:	4680      	mov	r8, r0
 8008060:	d129      	bne.n	80080b6 <_printf_float+0x172>
 8008062:	1cc8      	adds	r0, r1, #3
 8008064:	db02      	blt.n	800806c <_printf_float+0x128>
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	4299      	cmp	r1, r3
 800806a:	dd41      	ble.n	80080f0 <_printf_float+0x1ac>
 800806c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008070:	fa5f fa8a 	uxtb.w	sl, sl
 8008074:	3901      	subs	r1, #1
 8008076:	4652      	mov	r2, sl
 8008078:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800807c:	9109      	str	r1, [sp, #36]	@ 0x24
 800807e:	f7ff ff27 	bl	8007ed0 <__exponent>
 8008082:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008084:	1813      	adds	r3, r2, r0
 8008086:	2a01      	cmp	r2, #1
 8008088:	4681      	mov	r9, r0
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	dc02      	bgt.n	8008094 <_printf_float+0x150>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	07d2      	lsls	r2, r2, #31
 8008092:	d501      	bpl.n	8008098 <_printf_float+0x154>
 8008094:	3301      	adds	r3, #1
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0a2      	beq.n	8007fe6 <_printf_float+0xa2>
 80080a0:	232d      	movs	r3, #45	@ 0x2d
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a6:	e79e      	b.n	8007fe6 <_printf_float+0xa2>
 80080a8:	9a06      	ldr	r2, [sp, #24]
 80080aa:	2a47      	cmp	r2, #71	@ 0x47
 80080ac:	d1c2      	bne.n	8008034 <_printf_float+0xf0>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1c0      	bne.n	8008034 <_printf_float+0xf0>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7bd      	b.n	8008032 <_printf_float+0xee>
 80080b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080ba:	d9db      	bls.n	8008074 <_printf_float+0x130>
 80080bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080c0:	d118      	bne.n	80080f4 <_printf_float+0x1b0>
 80080c2:	2900      	cmp	r1, #0
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	dd0b      	ble.n	80080e0 <_printf_float+0x19c>
 80080c8:	6121      	str	r1, [r4, #16]
 80080ca:	b913      	cbnz	r3, 80080d2 <_printf_float+0x18e>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	07d0      	lsls	r0, r2, #31
 80080d0:	d502      	bpl.n	80080d8 <_printf_float+0x194>
 80080d2:	3301      	adds	r3, #1
 80080d4:	440b      	add	r3, r1
 80080d6:	6123      	str	r3, [r4, #16]
 80080d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080da:	f04f 0900 	mov.w	r9, #0
 80080de:	e7db      	b.n	8008098 <_printf_float+0x154>
 80080e0:	b913      	cbnz	r3, 80080e8 <_printf_float+0x1a4>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	07d2      	lsls	r2, r2, #31
 80080e6:	d501      	bpl.n	80080ec <_printf_float+0x1a8>
 80080e8:	3302      	adds	r3, #2
 80080ea:	e7f4      	b.n	80080d6 <_printf_float+0x192>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e7f2      	b.n	80080d6 <_printf_float+0x192>
 80080f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f6:	4299      	cmp	r1, r3
 80080f8:	db05      	blt.n	8008106 <_printf_float+0x1c2>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6121      	str	r1, [r4, #16]
 80080fe:	07d8      	lsls	r0, r3, #31
 8008100:	d5ea      	bpl.n	80080d8 <_printf_float+0x194>
 8008102:	1c4b      	adds	r3, r1, #1
 8008104:	e7e7      	b.n	80080d6 <_printf_float+0x192>
 8008106:	2900      	cmp	r1, #0
 8008108:	bfd4      	ite	le
 800810a:	f1c1 0202 	rsble	r2, r1, #2
 800810e:	2201      	movgt	r2, #1
 8008110:	4413      	add	r3, r2
 8008112:	e7e0      	b.n	80080d6 <_printf_float+0x192>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	055a      	lsls	r2, r3, #21
 8008118:	d407      	bmi.n	800812a <_printf_float+0x1e6>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	4642      	mov	r2, r8
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	d12b      	bne.n	8008180 <_printf_float+0x23c>
 8008128:	e767      	b.n	8007ffa <_printf_float+0xb6>
 800812a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800812e:	f240 80dd 	bls.w	80082ec <_printf_float+0x3a8>
 8008132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	f7f8 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800813e:	2800      	cmp	r0, #0
 8008140:	d033      	beq.n	80081aa <_printf_float+0x266>
 8008142:	4a37      	ldr	r2, [pc, #220]	@ (8008220 <_printf_float+0x2dc>)
 8008144:	2301      	movs	r3, #1
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f af54 	beq.w	8007ffa <_printf_float+0xb6>
 8008152:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008156:	4543      	cmp	r3, r8
 8008158:	db02      	blt.n	8008160 <_printf_float+0x21c>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	07d8      	lsls	r0, r3, #31
 800815e:	d50f      	bpl.n	8008180 <_printf_float+0x23c>
 8008160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f af45 	beq.w	8007ffa <_printf_float+0xb6>
 8008170:	f04f 0900 	mov.w	r9, #0
 8008174:	f108 38ff 	add.w	r8, r8, #4294967295
 8008178:	f104 0a1a 	add.w	sl, r4, #26
 800817c:	45c8      	cmp	r8, r9
 800817e:	dc09      	bgt.n	8008194 <_printf_float+0x250>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	079b      	lsls	r3, r3, #30
 8008184:	f100 8103 	bmi.w	800838e <_printf_float+0x44a>
 8008188:	68e0      	ldr	r0, [r4, #12]
 800818a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818c:	4298      	cmp	r0, r3
 800818e:	bfb8      	it	lt
 8008190:	4618      	movlt	r0, r3
 8008192:	e734      	b.n	8007ffe <_printf_float+0xba>
 8008194:	2301      	movs	r3, #1
 8008196:	4652      	mov	r2, sl
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f af2b 	beq.w	8007ffa <_printf_float+0xb6>
 80081a4:	f109 0901 	add.w	r9, r9, #1
 80081a8:	e7e8      	b.n	800817c <_printf_float+0x238>
 80081aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc39      	bgt.n	8008224 <_printf_float+0x2e0>
 80081b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008220 <_printf_float+0x2dc>)
 80081b2:	2301      	movs	r3, #1
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af1d 	beq.w	8007ffa <_printf_float+0xb6>
 80081c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081c4:	ea59 0303 	orrs.w	r3, r9, r3
 80081c8:	d102      	bne.n	80081d0 <_printf_float+0x28c>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d5d7      	bpl.n	8008180 <_printf_float+0x23c>
 80081d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af0d 	beq.w	8007ffa <_printf_float+0xb6>
 80081e0:	f04f 0a00 	mov.w	sl, #0
 80081e4:	f104 0b1a 	add.w	fp, r4, #26
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	425b      	negs	r3, r3
 80081ec:	4553      	cmp	r3, sl
 80081ee:	dc01      	bgt.n	80081f4 <_printf_float+0x2b0>
 80081f0:	464b      	mov	r3, r9
 80081f2:	e793      	b.n	800811c <_printf_float+0x1d8>
 80081f4:	2301      	movs	r3, #1
 80081f6:	465a      	mov	r2, fp
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f aefb 	beq.w	8007ffa <_printf_float+0xb6>
 8008204:	f10a 0a01 	add.w	sl, sl, #1
 8008208:	e7ee      	b.n	80081e8 <_printf_float+0x2a4>
 800820a:	bf00      	nop
 800820c:	7fefffff 	.word	0x7fefffff
 8008210:	0800adac 	.word	0x0800adac
 8008214:	0800ada8 	.word	0x0800ada8
 8008218:	0800adb4 	.word	0x0800adb4
 800821c:	0800adb0 	.word	0x0800adb0
 8008220:	0800adb8 	.word	0x0800adb8
 8008224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800822a:	4553      	cmp	r3, sl
 800822c:	bfa8      	it	ge
 800822e:	4653      	movge	r3, sl
 8008230:	2b00      	cmp	r3, #0
 8008232:	4699      	mov	r9, r3
 8008234:	dc36      	bgt.n	80082a4 <_printf_float+0x360>
 8008236:	f04f 0b00 	mov.w	fp, #0
 800823a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823e:	f104 021a 	add.w	r2, r4, #26
 8008242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	eba3 0309 	sub.w	r3, r3, r9
 800824a:	455b      	cmp	r3, fp
 800824c:	dc31      	bgt.n	80082b2 <_printf_float+0x36e>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	459a      	cmp	sl, r3
 8008252:	dc3a      	bgt.n	80082ca <_printf_float+0x386>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07da      	lsls	r2, r3, #31
 8008258:	d437      	bmi.n	80082ca <_printf_float+0x386>
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	ebaa 0903 	sub.w	r9, sl, r3
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	ebaa 0303 	sub.w	r3, sl, r3
 8008266:	4599      	cmp	r9, r3
 8008268:	bfa8      	it	ge
 800826a:	4699      	movge	r9, r3
 800826c:	f1b9 0f00 	cmp.w	r9, #0
 8008270:	dc33      	bgt.n	80082da <_printf_float+0x396>
 8008272:	f04f 0800 	mov.w	r8, #0
 8008276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800827a:	f104 0b1a 	add.w	fp, r4, #26
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	ebaa 0303 	sub.w	r3, sl, r3
 8008284:	eba3 0309 	sub.w	r3, r3, r9
 8008288:	4543      	cmp	r3, r8
 800828a:	f77f af79 	ble.w	8008180 <_printf_float+0x23c>
 800828e:	2301      	movs	r3, #1
 8008290:	465a      	mov	r2, fp
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f aeae 	beq.w	8007ffa <_printf_float+0xb6>
 800829e:	f108 0801 	add.w	r8, r8, #1
 80082a2:	e7ec      	b.n	800827e <_printf_float+0x33a>
 80082a4:	4642      	mov	r2, r8
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	d1c2      	bne.n	8008236 <_printf_float+0x2f2>
 80082b0:	e6a3      	b.n	8007ffa <_printf_float+0xb6>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4631      	mov	r1, r6
 80082b6:	4628      	mov	r0, r5
 80082b8:	9206      	str	r2, [sp, #24]
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f ae9c 	beq.w	8007ffa <_printf_float+0xb6>
 80082c2:	9a06      	ldr	r2, [sp, #24]
 80082c4:	f10b 0b01 	add.w	fp, fp, #1
 80082c8:	e7bb      	b.n	8008242 <_printf_float+0x2fe>
 80082ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	d1c0      	bne.n	800825a <_printf_float+0x316>
 80082d8:	e68f      	b.n	8007ffa <_printf_float+0xb6>
 80082da:	9a06      	ldr	r2, [sp, #24]
 80082dc:	464b      	mov	r3, r9
 80082de:	4442      	add	r2, r8
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	d1c3      	bne.n	8008272 <_printf_float+0x32e>
 80082ea:	e686      	b.n	8007ffa <_printf_float+0xb6>
 80082ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082f0:	f1ba 0f01 	cmp.w	sl, #1
 80082f4:	dc01      	bgt.n	80082fa <_printf_float+0x3b6>
 80082f6:	07db      	lsls	r3, r3, #31
 80082f8:	d536      	bpl.n	8008368 <_printf_float+0x424>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4642      	mov	r2, r8
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f ae78 	beq.w	8007ffa <_printf_float+0xb6>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f ae70 	beq.w	8007ffa <_printf_float+0xb6>
 800831a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008326:	f7f8 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800832a:	b9c0      	cbnz	r0, 800835e <_printf_float+0x41a>
 800832c:	4653      	mov	r3, sl
 800832e:	f108 0201 	add.w	r2, r8, #1
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	d10c      	bne.n	8008356 <_printf_float+0x412>
 800833c:	e65d      	b.n	8007ffa <_printf_float+0xb6>
 800833e:	2301      	movs	r3, #1
 8008340:	465a      	mov	r2, fp
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae56 	beq.w	8007ffa <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	45d0      	cmp	r8, sl
 8008354:	dbf3      	blt.n	800833e <_printf_float+0x3fa>
 8008356:	464b      	mov	r3, r9
 8008358:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800835c:	e6df      	b.n	800811e <_printf_float+0x1da>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0b1a 	add.w	fp, r4, #26
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x40e>
 8008368:	2301      	movs	r3, #1
 800836a:	4642      	mov	r2, r8
 800836c:	e7e1      	b.n	8008332 <_printf_float+0x3ee>
 800836e:	2301      	movs	r3, #1
 8008370:	464a      	mov	r2, r9
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	f43f ae3e 	beq.w	8007ffa <_printf_float+0xb6>
 800837e:	f108 0801 	add.w	r8, r8, #1
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008386:	1a5b      	subs	r3, r3, r1
 8008388:	4543      	cmp	r3, r8
 800838a:	dcf0      	bgt.n	800836e <_printf_float+0x42a>
 800838c:	e6fc      	b.n	8008188 <_printf_float+0x244>
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	f104 0919 	add.w	r9, r4, #25
 8008396:	e7f4      	b.n	8008382 <_printf_float+0x43e>

08008398 <_printf_common>:
 8008398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	4616      	mov	r6, r2
 800839e:	4698      	mov	r8, r3
 80083a0:	688a      	ldr	r2, [r1, #8]
 80083a2:	690b      	ldr	r3, [r1, #16]
 80083a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083a8:	4293      	cmp	r3, r2
 80083aa:	bfb8      	it	lt
 80083ac:	4613      	movlt	r3, r2
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083b4:	4607      	mov	r7, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	b10a      	cbz	r2, 80083be <_printf_common+0x26>
 80083ba:	3301      	adds	r3, #1
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	0699      	lsls	r1, r3, #26
 80083c2:	bf42      	ittt	mi
 80083c4:	6833      	ldrmi	r3, [r6, #0]
 80083c6:	3302      	addmi	r3, #2
 80083c8:	6033      	strmi	r3, [r6, #0]
 80083ca:	6825      	ldr	r5, [r4, #0]
 80083cc:	f015 0506 	ands.w	r5, r5, #6
 80083d0:	d106      	bne.n	80083e0 <_printf_common+0x48>
 80083d2:	f104 0a19 	add.w	sl, r4, #25
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	6832      	ldr	r2, [r6, #0]
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	42ab      	cmp	r3, r5
 80083de:	dc26      	bgt.n	800842e <_printf_common+0x96>
 80083e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	3b00      	subs	r3, #0
 80083e8:	bf18      	it	ne
 80083ea:	2301      	movne	r3, #1
 80083ec:	0692      	lsls	r2, r2, #26
 80083ee:	d42b      	bmi.n	8008448 <_printf_common+0xb0>
 80083f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083f4:	4641      	mov	r1, r8
 80083f6:	4638      	mov	r0, r7
 80083f8:	47c8      	blx	r9
 80083fa:	3001      	adds	r0, #1
 80083fc:	d01e      	beq.n	800843c <_printf_common+0xa4>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	6922      	ldr	r2, [r4, #16]
 8008402:	f003 0306 	and.w	r3, r3, #6
 8008406:	2b04      	cmp	r3, #4
 8008408:	bf02      	ittt	eq
 800840a:	68e5      	ldreq	r5, [r4, #12]
 800840c:	6833      	ldreq	r3, [r6, #0]
 800840e:	1aed      	subeq	r5, r5, r3
 8008410:	68a3      	ldr	r3, [r4, #8]
 8008412:	bf0c      	ite	eq
 8008414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008418:	2500      	movne	r5, #0
 800841a:	4293      	cmp	r3, r2
 800841c:	bfc4      	itt	gt
 800841e:	1a9b      	subgt	r3, r3, r2
 8008420:	18ed      	addgt	r5, r5, r3
 8008422:	2600      	movs	r6, #0
 8008424:	341a      	adds	r4, #26
 8008426:	42b5      	cmp	r5, r6
 8008428:	d11a      	bne.n	8008460 <_printf_common+0xc8>
 800842a:	2000      	movs	r0, #0
 800842c:	e008      	b.n	8008440 <_printf_common+0xa8>
 800842e:	2301      	movs	r3, #1
 8008430:	4652      	mov	r2, sl
 8008432:	4641      	mov	r1, r8
 8008434:	4638      	mov	r0, r7
 8008436:	47c8      	blx	r9
 8008438:	3001      	adds	r0, #1
 800843a:	d103      	bne.n	8008444 <_printf_common+0xac>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008444:	3501      	adds	r5, #1
 8008446:	e7c6      	b.n	80083d6 <_printf_common+0x3e>
 8008448:	18e1      	adds	r1, r4, r3
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	2030      	movs	r0, #48	@ 0x30
 800844e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008452:	4422      	add	r2, r4
 8008454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800845c:	3302      	adds	r3, #2
 800845e:	e7c7      	b.n	80083f0 <_printf_common+0x58>
 8008460:	2301      	movs	r3, #1
 8008462:	4622      	mov	r2, r4
 8008464:	4641      	mov	r1, r8
 8008466:	4638      	mov	r0, r7
 8008468:	47c8      	blx	r9
 800846a:	3001      	adds	r0, #1
 800846c:	d0e6      	beq.n	800843c <_printf_common+0xa4>
 800846e:	3601      	adds	r6, #1
 8008470:	e7d9      	b.n	8008426 <_printf_common+0x8e>
	...

08008474 <_printf_i>:
 8008474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	7e0f      	ldrb	r7, [r1, #24]
 800847a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800847c:	2f78      	cmp	r7, #120	@ 0x78
 800847e:	4691      	mov	r9, r2
 8008480:	4680      	mov	r8, r0
 8008482:	460c      	mov	r4, r1
 8008484:	469a      	mov	sl, r3
 8008486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800848a:	d807      	bhi.n	800849c <_printf_i+0x28>
 800848c:	2f62      	cmp	r7, #98	@ 0x62
 800848e:	d80a      	bhi.n	80084a6 <_printf_i+0x32>
 8008490:	2f00      	cmp	r7, #0
 8008492:	f000 80d1 	beq.w	8008638 <_printf_i+0x1c4>
 8008496:	2f58      	cmp	r7, #88	@ 0x58
 8008498:	f000 80b8 	beq.w	800860c <_printf_i+0x198>
 800849c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084a4:	e03a      	b.n	800851c <_printf_i+0xa8>
 80084a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084aa:	2b15      	cmp	r3, #21
 80084ac:	d8f6      	bhi.n	800849c <_printf_i+0x28>
 80084ae:	a101      	add	r1, pc, #4	@ (adr r1, 80084b4 <_printf_i+0x40>)
 80084b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	08008521 	.word	0x08008521
 80084bc:	0800849d 	.word	0x0800849d
 80084c0:	0800849d 	.word	0x0800849d
 80084c4:	0800849d 	.word	0x0800849d
 80084c8:	0800849d 	.word	0x0800849d
 80084cc:	08008521 	.word	0x08008521
 80084d0:	0800849d 	.word	0x0800849d
 80084d4:	0800849d 	.word	0x0800849d
 80084d8:	0800849d 	.word	0x0800849d
 80084dc:	0800849d 	.word	0x0800849d
 80084e0:	0800861f 	.word	0x0800861f
 80084e4:	0800854b 	.word	0x0800854b
 80084e8:	080085d9 	.word	0x080085d9
 80084ec:	0800849d 	.word	0x0800849d
 80084f0:	0800849d 	.word	0x0800849d
 80084f4:	08008641 	.word	0x08008641
 80084f8:	0800849d 	.word	0x0800849d
 80084fc:	0800854b 	.word	0x0800854b
 8008500:	0800849d 	.word	0x0800849d
 8008504:	0800849d 	.word	0x0800849d
 8008508:	080085e1 	.word	0x080085e1
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	1d1a      	adds	r2, r3, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6032      	str	r2, [r6, #0]
 8008514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800851c:	2301      	movs	r3, #1
 800851e:	e09c      	b.n	800865a <_printf_i+0x1e6>
 8008520:	6833      	ldr	r3, [r6, #0]
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	1d19      	adds	r1, r3, #4
 8008526:	6031      	str	r1, [r6, #0]
 8008528:	0606      	lsls	r6, r0, #24
 800852a:	d501      	bpl.n	8008530 <_printf_i+0xbc>
 800852c:	681d      	ldr	r5, [r3, #0]
 800852e:	e003      	b.n	8008538 <_printf_i+0xc4>
 8008530:	0645      	lsls	r5, r0, #25
 8008532:	d5fb      	bpl.n	800852c <_printf_i+0xb8>
 8008534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008538:	2d00      	cmp	r5, #0
 800853a:	da03      	bge.n	8008544 <_printf_i+0xd0>
 800853c:	232d      	movs	r3, #45	@ 0x2d
 800853e:	426d      	negs	r5, r5
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008544:	4858      	ldr	r0, [pc, #352]	@ (80086a8 <_printf_i+0x234>)
 8008546:	230a      	movs	r3, #10
 8008548:	e011      	b.n	800856e <_printf_i+0xfa>
 800854a:	6821      	ldr	r1, [r4, #0]
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	0608      	lsls	r0, r1, #24
 8008550:	f853 5b04 	ldr.w	r5, [r3], #4
 8008554:	d402      	bmi.n	800855c <_printf_i+0xe8>
 8008556:	0649      	lsls	r1, r1, #25
 8008558:	bf48      	it	mi
 800855a:	b2ad      	uxthmi	r5, r5
 800855c:	2f6f      	cmp	r7, #111	@ 0x6f
 800855e:	4852      	ldr	r0, [pc, #328]	@ (80086a8 <_printf_i+0x234>)
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	bf14      	ite	ne
 8008564:	230a      	movne	r3, #10
 8008566:	2308      	moveq	r3, #8
 8008568:	2100      	movs	r1, #0
 800856a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800856e:	6866      	ldr	r6, [r4, #4]
 8008570:	60a6      	str	r6, [r4, #8]
 8008572:	2e00      	cmp	r6, #0
 8008574:	db05      	blt.n	8008582 <_printf_i+0x10e>
 8008576:	6821      	ldr	r1, [r4, #0]
 8008578:	432e      	orrs	r6, r5
 800857a:	f021 0104 	bic.w	r1, r1, #4
 800857e:	6021      	str	r1, [r4, #0]
 8008580:	d04b      	beq.n	800861a <_printf_i+0x1a6>
 8008582:	4616      	mov	r6, r2
 8008584:	fbb5 f1f3 	udiv	r1, r5, r3
 8008588:	fb03 5711 	mls	r7, r3, r1, r5
 800858c:	5dc7      	ldrb	r7, [r0, r7]
 800858e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008592:	462f      	mov	r7, r5
 8008594:	42bb      	cmp	r3, r7
 8008596:	460d      	mov	r5, r1
 8008598:	d9f4      	bls.n	8008584 <_printf_i+0x110>
 800859a:	2b08      	cmp	r3, #8
 800859c:	d10b      	bne.n	80085b6 <_printf_i+0x142>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	07df      	lsls	r7, r3, #31
 80085a2:	d508      	bpl.n	80085b6 <_printf_i+0x142>
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	6861      	ldr	r1, [r4, #4]
 80085a8:	4299      	cmp	r1, r3
 80085aa:	bfde      	ittt	le
 80085ac:	2330      	movle	r3, #48	@ 0x30
 80085ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085b6:	1b92      	subs	r2, r2, r6
 80085b8:	6122      	str	r2, [r4, #16]
 80085ba:	f8cd a000 	str.w	sl, [sp]
 80085be:	464b      	mov	r3, r9
 80085c0:	aa03      	add	r2, sp, #12
 80085c2:	4621      	mov	r1, r4
 80085c4:	4640      	mov	r0, r8
 80085c6:	f7ff fee7 	bl	8008398 <_printf_common>
 80085ca:	3001      	adds	r0, #1
 80085cc:	d14a      	bne.n	8008664 <_printf_i+0x1f0>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	b004      	add	sp, #16
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	f043 0320 	orr.w	r3, r3, #32
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	4832      	ldr	r0, [pc, #200]	@ (80086ac <_printf_i+0x238>)
 80085e2:	2778      	movs	r7, #120	@ 0x78
 80085e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	6831      	ldr	r1, [r6, #0]
 80085ec:	061f      	lsls	r7, r3, #24
 80085ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80085f2:	d402      	bmi.n	80085fa <_printf_i+0x186>
 80085f4:	065f      	lsls	r7, r3, #25
 80085f6:	bf48      	it	mi
 80085f8:	b2ad      	uxthmi	r5, r5
 80085fa:	6031      	str	r1, [r6, #0]
 80085fc:	07d9      	lsls	r1, r3, #31
 80085fe:	bf44      	itt	mi
 8008600:	f043 0320 	orrmi.w	r3, r3, #32
 8008604:	6023      	strmi	r3, [r4, #0]
 8008606:	b11d      	cbz	r5, 8008610 <_printf_i+0x19c>
 8008608:	2310      	movs	r3, #16
 800860a:	e7ad      	b.n	8008568 <_printf_i+0xf4>
 800860c:	4826      	ldr	r0, [pc, #152]	@ (80086a8 <_printf_i+0x234>)
 800860e:	e7e9      	b.n	80085e4 <_printf_i+0x170>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	f023 0320 	bic.w	r3, r3, #32
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	e7f6      	b.n	8008608 <_printf_i+0x194>
 800861a:	4616      	mov	r6, r2
 800861c:	e7bd      	b.n	800859a <_printf_i+0x126>
 800861e:	6833      	ldr	r3, [r6, #0]
 8008620:	6825      	ldr	r5, [r4, #0]
 8008622:	6961      	ldr	r1, [r4, #20]
 8008624:	1d18      	adds	r0, r3, #4
 8008626:	6030      	str	r0, [r6, #0]
 8008628:	062e      	lsls	r6, r5, #24
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	d501      	bpl.n	8008632 <_printf_i+0x1be>
 800862e:	6019      	str	r1, [r3, #0]
 8008630:	e002      	b.n	8008638 <_printf_i+0x1c4>
 8008632:	0668      	lsls	r0, r5, #25
 8008634:	d5fb      	bpl.n	800862e <_printf_i+0x1ba>
 8008636:	8019      	strh	r1, [r3, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	4616      	mov	r6, r2
 800863e:	e7bc      	b.n	80085ba <_printf_i+0x146>
 8008640:	6833      	ldr	r3, [r6, #0]
 8008642:	1d1a      	adds	r2, r3, #4
 8008644:	6032      	str	r2, [r6, #0]
 8008646:	681e      	ldr	r6, [r3, #0]
 8008648:	6862      	ldr	r2, [r4, #4]
 800864a:	2100      	movs	r1, #0
 800864c:	4630      	mov	r0, r6
 800864e:	f7f7 fdbf 	bl	80001d0 <memchr>
 8008652:	b108      	cbz	r0, 8008658 <_printf_i+0x1e4>
 8008654:	1b80      	subs	r0, r0, r6
 8008656:	6060      	str	r0, [r4, #4]
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	2300      	movs	r3, #0
 800865e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008662:	e7aa      	b.n	80085ba <_printf_i+0x146>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	4632      	mov	r2, r6
 8008668:	4649      	mov	r1, r9
 800866a:	4640      	mov	r0, r8
 800866c:	47d0      	blx	sl
 800866e:	3001      	adds	r0, #1
 8008670:	d0ad      	beq.n	80085ce <_printf_i+0x15a>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	079b      	lsls	r3, r3, #30
 8008676:	d413      	bmi.n	80086a0 <_printf_i+0x22c>
 8008678:	68e0      	ldr	r0, [r4, #12]
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	4298      	cmp	r0, r3
 800867e:	bfb8      	it	lt
 8008680:	4618      	movlt	r0, r3
 8008682:	e7a6      	b.n	80085d2 <_printf_i+0x15e>
 8008684:	2301      	movs	r3, #1
 8008686:	4632      	mov	r2, r6
 8008688:	4649      	mov	r1, r9
 800868a:	4640      	mov	r0, r8
 800868c:	47d0      	blx	sl
 800868e:	3001      	adds	r0, #1
 8008690:	d09d      	beq.n	80085ce <_printf_i+0x15a>
 8008692:	3501      	adds	r5, #1
 8008694:	68e3      	ldr	r3, [r4, #12]
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	1a5b      	subs	r3, r3, r1
 800869a:	42ab      	cmp	r3, r5
 800869c:	dcf2      	bgt.n	8008684 <_printf_i+0x210>
 800869e:	e7eb      	b.n	8008678 <_printf_i+0x204>
 80086a0:	2500      	movs	r5, #0
 80086a2:	f104 0619 	add.w	r6, r4, #25
 80086a6:	e7f5      	b.n	8008694 <_printf_i+0x220>
 80086a8:	0800adba 	.word	0x0800adba
 80086ac:	0800adcb 	.word	0x0800adcb

080086b0 <std>:
 80086b0:	2300      	movs	r3, #0
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	e9c0 3300 	strd	r3, r3, [r0]
 80086ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086be:	6083      	str	r3, [r0, #8]
 80086c0:	8181      	strh	r1, [r0, #12]
 80086c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80086c4:	81c2      	strh	r2, [r0, #14]
 80086c6:	6183      	str	r3, [r0, #24]
 80086c8:	4619      	mov	r1, r3
 80086ca:	2208      	movs	r2, #8
 80086cc:	305c      	adds	r0, #92	@ 0x5c
 80086ce:	f000 f9f9 	bl	8008ac4 <memset>
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <std+0x58>)
 80086d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80086d6:	4b0d      	ldr	r3, [pc, #52]	@ (800870c <std+0x5c>)
 80086d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086da:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <std+0x60>)
 80086dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086de:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <std+0x64>)
 80086e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80086e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008718 <std+0x68>)
 80086e4:	6224      	str	r4, [r4, #32]
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d006      	beq.n	80086f8 <std+0x48>
 80086ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086ee:	4294      	cmp	r4, r2
 80086f0:	d002      	beq.n	80086f8 <std+0x48>
 80086f2:	33d0      	adds	r3, #208	@ 0xd0
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d105      	bne.n	8008704 <std+0x54>
 80086f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008700:	f000 ba5c 	b.w	8008bbc <__retarget_lock_init_recursive>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	08008915 	.word	0x08008915
 800870c:	08008937 	.word	0x08008937
 8008710:	0800896f 	.word	0x0800896f
 8008714:	08008993 	.word	0x08008993
 8008718:	20000484 	.word	0x20000484

0800871c <stdio_exit_handler>:
 800871c:	4a02      	ldr	r2, [pc, #8]	@ (8008728 <stdio_exit_handler+0xc>)
 800871e:	4903      	ldr	r1, [pc, #12]	@ (800872c <stdio_exit_handler+0x10>)
 8008720:	4803      	ldr	r0, [pc, #12]	@ (8008730 <stdio_exit_handler+0x14>)
 8008722:	f000 b869 	b.w	80087f8 <_fwalk_sglue>
 8008726:	bf00      	nop
 8008728:	20000018 	.word	0x20000018
 800872c:	0800a4f9 	.word	0x0800a4f9
 8008730:	20000028 	.word	0x20000028

08008734 <cleanup_stdio>:
 8008734:	6841      	ldr	r1, [r0, #4]
 8008736:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <cleanup_stdio+0x34>)
 8008738:	4299      	cmp	r1, r3
 800873a:	b510      	push	{r4, lr}
 800873c:	4604      	mov	r4, r0
 800873e:	d001      	beq.n	8008744 <cleanup_stdio+0x10>
 8008740:	f001 feda 	bl	800a4f8 <_fflush_r>
 8008744:	68a1      	ldr	r1, [r4, #8]
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <cleanup_stdio+0x38>)
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <cleanup_stdio+0x1e>
 800874c:	4620      	mov	r0, r4
 800874e:	f001 fed3 	bl	800a4f8 <_fflush_r>
 8008752:	68e1      	ldr	r1, [r4, #12]
 8008754:	4b06      	ldr	r3, [pc, #24]	@ (8008770 <cleanup_stdio+0x3c>)
 8008756:	4299      	cmp	r1, r3
 8008758:	d004      	beq.n	8008764 <cleanup_stdio+0x30>
 800875a:	4620      	mov	r0, r4
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f001 beca 	b.w	800a4f8 <_fflush_r>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	20000484 	.word	0x20000484
 800876c:	200004ec 	.word	0x200004ec
 8008770:	20000554 	.word	0x20000554

08008774 <global_stdio_init.part.0>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <global_stdio_init.part.0+0x30>)
 8008778:	4c0b      	ldr	r4, [pc, #44]	@ (80087a8 <global_stdio_init.part.0+0x34>)
 800877a:	4a0c      	ldr	r2, [pc, #48]	@ (80087ac <global_stdio_init.part.0+0x38>)
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	4620      	mov	r0, r4
 8008780:	2200      	movs	r2, #0
 8008782:	2104      	movs	r1, #4
 8008784:	f7ff ff94 	bl	80086b0 <std>
 8008788:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800878c:	2201      	movs	r2, #1
 800878e:	2109      	movs	r1, #9
 8008790:	f7ff ff8e 	bl	80086b0 <std>
 8008794:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008798:	2202      	movs	r2, #2
 800879a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879e:	2112      	movs	r1, #18
 80087a0:	f7ff bf86 	b.w	80086b0 <std>
 80087a4:	200005bc 	.word	0x200005bc
 80087a8:	20000484 	.word	0x20000484
 80087ac:	0800871d 	.word	0x0800871d

080087b0 <__sfp_lock_acquire>:
 80087b0:	4801      	ldr	r0, [pc, #4]	@ (80087b8 <__sfp_lock_acquire+0x8>)
 80087b2:	f000 ba04 	b.w	8008bbe <__retarget_lock_acquire_recursive>
 80087b6:	bf00      	nop
 80087b8:	200005c5 	.word	0x200005c5

080087bc <__sfp_lock_release>:
 80087bc:	4801      	ldr	r0, [pc, #4]	@ (80087c4 <__sfp_lock_release+0x8>)
 80087be:	f000 b9ff 	b.w	8008bc0 <__retarget_lock_release_recursive>
 80087c2:	bf00      	nop
 80087c4:	200005c5 	.word	0x200005c5

080087c8 <__sinit>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	f7ff fff0 	bl	80087b0 <__sfp_lock_acquire>
 80087d0:	6a23      	ldr	r3, [r4, #32]
 80087d2:	b11b      	cbz	r3, 80087dc <__sinit+0x14>
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f7ff bff0 	b.w	80087bc <__sfp_lock_release>
 80087dc:	4b04      	ldr	r3, [pc, #16]	@ (80087f0 <__sinit+0x28>)
 80087de:	6223      	str	r3, [r4, #32]
 80087e0:	4b04      	ldr	r3, [pc, #16]	@ (80087f4 <__sinit+0x2c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f5      	bne.n	80087d4 <__sinit+0xc>
 80087e8:	f7ff ffc4 	bl	8008774 <global_stdio_init.part.0>
 80087ec:	e7f2      	b.n	80087d4 <__sinit+0xc>
 80087ee:	bf00      	nop
 80087f0:	08008735 	.word	0x08008735
 80087f4:	200005bc 	.word	0x200005bc

080087f8 <_fwalk_sglue>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	4607      	mov	r7, r0
 80087fe:	4688      	mov	r8, r1
 8008800:	4614      	mov	r4, r2
 8008802:	2600      	movs	r6, #0
 8008804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008808:	f1b9 0901 	subs.w	r9, r9, #1
 800880c:	d505      	bpl.n	800881a <_fwalk_sglue+0x22>
 800880e:	6824      	ldr	r4, [r4, #0]
 8008810:	2c00      	cmp	r4, #0
 8008812:	d1f7      	bne.n	8008804 <_fwalk_sglue+0xc>
 8008814:	4630      	mov	r0, r6
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d907      	bls.n	8008830 <_fwalk_sglue+0x38>
 8008820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008824:	3301      	adds	r3, #1
 8008826:	d003      	beq.n	8008830 <_fwalk_sglue+0x38>
 8008828:	4629      	mov	r1, r5
 800882a:	4638      	mov	r0, r7
 800882c:	47c0      	blx	r8
 800882e:	4306      	orrs	r6, r0
 8008830:	3568      	adds	r5, #104	@ 0x68
 8008832:	e7e9      	b.n	8008808 <_fwalk_sglue+0x10>

08008834 <iprintf>:
 8008834:	b40f      	push	{r0, r1, r2, r3}
 8008836:	b507      	push	{r0, r1, r2, lr}
 8008838:	4906      	ldr	r1, [pc, #24]	@ (8008854 <iprintf+0x20>)
 800883a:	ab04      	add	r3, sp, #16
 800883c:	6808      	ldr	r0, [r1, #0]
 800883e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008842:	6881      	ldr	r1, [r0, #8]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f001 fcbb 	bl	800a1c0 <_vfiprintf_r>
 800884a:	b003      	add	sp, #12
 800884c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008850:	b004      	add	sp, #16
 8008852:	4770      	bx	lr
 8008854:	20000024 	.word	0x20000024

08008858 <_puts_r>:
 8008858:	6a03      	ldr	r3, [r0, #32]
 800885a:	b570      	push	{r4, r5, r6, lr}
 800885c:	6884      	ldr	r4, [r0, #8]
 800885e:	4605      	mov	r5, r0
 8008860:	460e      	mov	r6, r1
 8008862:	b90b      	cbnz	r3, 8008868 <_puts_r+0x10>
 8008864:	f7ff ffb0 	bl	80087c8 <__sinit>
 8008868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886a:	07db      	lsls	r3, r3, #31
 800886c:	d405      	bmi.n	800887a <_puts_r+0x22>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	0598      	lsls	r0, r3, #22
 8008872:	d402      	bmi.n	800887a <_puts_r+0x22>
 8008874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008876:	f000 f9a2 	bl	8008bbe <__retarget_lock_acquire_recursive>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	0719      	lsls	r1, r3, #28
 800887e:	d502      	bpl.n	8008886 <_puts_r+0x2e>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d135      	bne.n	80088f2 <_puts_r+0x9a>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 f8c5 	bl	8008a18 <__swsetup_r>
 800888e:	b380      	cbz	r0, 80088f2 <_puts_r+0x9a>
 8008890:	f04f 35ff 	mov.w	r5, #4294967295
 8008894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008896:	07da      	lsls	r2, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_puts_r+0x4e>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	059b      	lsls	r3, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_puts_r+0x4e>
 80088a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088a2:	f000 f98d 	bl	8008bc0 <__retarget_lock_release_recursive>
 80088a6:	4628      	mov	r0, r5
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da04      	bge.n	80088b8 <_puts_r+0x60>
 80088ae:	69a2      	ldr	r2, [r4, #24]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	dc17      	bgt.n	80088e4 <_puts_r+0x8c>
 80088b4:	290a      	cmp	r1, #10
 80088b6:	d015      	beq.n	80088e4 <_puts_r+0x8c>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	7019      	strb	r1, [r3, #0]
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088c6:	3b01      	subs	r3, #1
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	2900      	cmp	r1, #0
 80088cc:	d1ed      	bne.n	80088aa <_puts_r+0x52>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da11      	bge.n	80088f6 <_puts_r+0x9e>
 80088d2:	4622      	mov	r2, r4
 80088d4:	210a      	movs	r1, #10
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f85f 	bl	800899a <__swbuf_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d0d7      	beq.n	8008890 <_puts_r+0x38>
 80088e0:	250a      	movs	r5, #10
 80088e2:	e7d7      	b.n	8008894 <_puts_r+0x3c>
 80088e4:	4622      	mov	r2, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 f857 	bl	800899a <__swbuf_r>
 80088ec:	3001      	adds	r0, #1
 80088ee:	d1e7      	bne.n	80088c0 <_puts_r+0x68>
 80088f0:	e7ce      	b.n	8008890 <_puts_r+0x38>
 80088f2:	3e01      	subs	r6, #1
 80088f4:	e7e4      	b.n	80088c0 <_puts_r+0x68>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	220a      	movs	r2, #10
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e7ee      	b.n	80088e0 <_puts_r+0x88>
	...

08008904 <puts>:
 8008904:	4b02      	ldr	r3, [pc, #8]	@ (8008910 <puts+0xc>)
 8008906:	4601      	mov	r1, r0
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	f7ff bfa5 	b.w	8008858 <_puts_r>
 800890e:	bf00      	nop
 8008910:	20000024 	.word	0x20000024

08008914 <__sread>:
 8008914:	b510      	push	{r4, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	f000 f900 	bl	8008b20 <_read_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	bfab      	itete	ge
 8008924:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008926:	89a3      	ldrhlt	r3, [r4, #12]
 8008928:	181b      	addge	r3, r3, r0
 800892a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800892e:	bfac      	ite	ge
 8008930:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008932:	81a3      	strhlt	r3, [r4, #12]
 8008934:	bd10      	pop	{r4, pc}

08008936 <__swrite>:
 8008936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	461f      	mov	r7, r3
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	05db      	lsls	r3, r3, #23
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	4616      	mov	r6, r2
 8008946:	d505      	bpl.n	8008954 <__swrite+0x1e>
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2302      	movs	r3, #2
 800894e:	2200      	movs	r2, #0
 8008950:	f000 f8d4 	bl	8008afc <_lseek_r>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	4632      	mov	r2, r6
 8008962:	463b      	mov	r3, r7
 8008964:	4628      	mov	r0, r5
 8008966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	f000 b8eb 	b.w	8008b44 <_write_r>

0800896e <__sseek>:
 800896e:	b510      	push	{r4, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008976:	f000 f8c1 	bl	8008afc <_lseek_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	bf15      	itete	ne
 8008980:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008982:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008986:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800898a:	81a3      	strheq	r3, [r4, #12]
 800898c:	bf18      	it	ne
 800898e:	81a3      	strhne	r3, [r4, #12]
 8008990:	bd10      	pop	{r4, pc}

08008992 <__sclose>:
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 b8a1 	b.w	8008adc <_close_r>

0800899a <__swbuf_r>:
 800899a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899c:	460e      	mov	r6, r1
 800899e:	4614      	mov	r4, r2
 80089a0:	4605      	mov	r5, r0
 80089a2:	b118      	cbz	r0, 80089ac <__swbuf_r+0x12>
 80089a4:	6a03      	ldr	r3, [r0, #32]
 80089a6:	b90b      	cbnz	r3, 80089ac <__swbuf_r+0x12>
 80089a8:	f7ff ff0e 	bl	80087c8 <__sinit>
 80089ac:	69a3      	ldr	r3, [r4, #24]
 80089ae:	60a3      	str	r3, [r4, #8]
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	071a      	lsls	r2, r3, #28
 80089b4:	d501      	bpl.n	80089ba <__swbuf_r+0x20>
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	b943      	cbnz	r3, 80089cc <__swbuf_r+0x32>
 80089ba:	4621      	mov	r1, r4
 80089bc:	4628      	mov	r0, r5
 80089be:	f000 f82b 	bl	8008a18 <__swsetup_r>
 80089c2:	b118      	cbz	r0, 80089cc <__swbuf_r+0x32>
 80089c4:	f04f 37ff 	mov.w	r7, #4294967295
 80089c8:	4638      	mov	r0, r7
 80089ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	6922      	ldr	r2, [r4, #16]
 80089d0:	1a98      	subs	r0, r3, r2
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	b2f6      	uxtb	r6, r6
 80089d6:	4283      	cmp	r3, r0
 80089d8:	4637      	mov	r7, r6
 80089da:	dc05      	bgt.n	80089e8 <__swbuf_r+0x4e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f001 fd8a 	bl	800a4f8 <_fflush_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d1ed      	bne.n	80089c4 <__swbuf_r+0x2a>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	701e      	strb	r6, [r3, #0]
 80089f6:	6962      	ldr	r2, [r4, #20]
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d004      	beq.n	8008a08 <__swbuf_r+0x6e>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d5e1      	bpl.n	80089c8 <__swbuf_r+0x2e>
 8008a04:	2e0a      	cmp	r6, #10
 8008a06:	d1df      	bne.n	80089c8 <__swbuf_r+0x2e>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f001 fd74 	bl	800a4f8 <_fflush_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0d9      	beq.n	80089c8 <__swbuf_r+0x2e>
 8008a14:	e7d6      	b.n	80089c4 <__swbuf_r+0x2a>
	...

08008a18 <__swsetup_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4b29      	ldr	r3, [pc, #164]	@ (8008ac0 <__swsetup_r+0xa8>)
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	460c      	mov	r4, r1
 8008a22:	b118      	cbz	r0, 8008a2c <__swsetup_r+0x14>
 8008a24:	6a03      	ldr	r3, [r0, #32]
 8008a26:	b90b      	cbnz	r3, 8008a2c <__swsetup_r+0x14>
 8008a28:	f7ff fece 	bl	80087c8 <__sinit>
 8008a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a30:	0719      	lsls	r1, r3, #28
 8008a32:	d422      	bmi.n	8008a7a <__swsetup_r+0x62>
 8008a34:	06da      	lsls	r2, r3, #27
 8008a36:	d407      	bmi.n	8008a48 <__swsetup_r+0x30>
 8008a38:	2209      	movs	r2, #9
 8008a3a:	602a      	str	r2, [r5, #0]
 8008a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a40:	81a3      	strh	r3, [r4, #12]
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295
 8008a46:	e033      	b.n	8008ab0 <__swsetup_r+0x98>
 8008a48:	0758      	lsls	r0, r3, #29
 8008a4a:	d512      	bpl.n	8008a72 <__swsetup_r+0x5a>
 8008a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a4e:	b141      	cbz	r1, 8008a62 <__swsetup_r+0x4a>
 8008a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a54:	4299      	cmp	r1, r3
 8008a56:	d002      	beq.n	8008a5e <__swsetup_r+0x46>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 ff0d 	bl	8009878 <_free_r>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f043 0308 	orr.w	r3, r3, #8
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	b94b      	cbnz	r3, 8008a92 <__swsetup_r+0x7a>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a88:	d003      	beq.n	8008a92 <__swsetup_r+0x7a>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f001 fd81 	bl	800a594 <__smakebuf_r>
 8008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a96:	f013 0201 	ands.w	r2, r3, #1
 8008a9a:	d00a      	beq.n	8008ab2 <__swsetup_r+0x9a>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	60a2      	str	r2, [r4, #8]
 8008aa0:	6962      	ldr	r2, [r4, #20]
 8008aa2:	4252      	negs	r2, r2
 8008aa4:	61a2      	str	r2, [r4, #24]
 8008aa6:	6922      	ldr	r2, [r4, #16]
 8008aa8:	b942      	cbnz	r2, 8008abc <__swsetup_r+0xa4>
 8008aaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aae:	d1c5      	bne.n	8008a3c <__swsetup_r+0x24>
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	0799      	lsls	r1, r3, #30
 8008ab4:	bf58      	it	pl
 8008ab6:	6962      	ldrpl	r2, [r4, #20]
 8008ab8:	60a2      	str	r2, [r4, #8]
 8008aba:	e7f4      	b.n	8008aa6 <__swsetup_r+0x8e>
 8008abc:	2000      	movs	r0, #0
 8008abe:	e7f7      	b.n	8008ab0 <__swsetup_r+0x98>
 8008ac0:	20000024 	.word	0x20000024

08008ac4 <memset>:
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d100      	bne.n	8008ace <memset+0xa>
 8008acc:	4770      	bx	lr
 8008ace:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad2:	e7f9      	b.n	8008ac8 <memset+0x4>

08008ad4 <_localeconv_r>:
 8008ad4:	4800      	ldr	r0, [pc, #0]	@ (8008ad8 <_localeconv_r+0x4>)
 8008ad6:	4770      	bx	lr
 8008ad8:	20000164 	.word	0x20000164

08008adc <_close_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d06      	ldr	r5, [pc, #24]	@ (8008af8 <_close_r+0x1c>)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7fa f918 	bl	8002d1c <_close>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_close_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_close_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	200005c0 	.word	0x200005c0

08008afc <_lseek_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4d07      	ldr	r5, [pc, #28]	@ (8008b1c <_lseek_r+0x20>)
 8008b00:	4604      	mov	r4, r0
 8008b02:	4608      	mov	r0, r1
 8008b04:	4611      	mov	r1, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	602a      	str	r2, [r5, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f7fa f92d 	bl	8002d6a <_lseek>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_lseek_r+0x1e>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_lseek_r+0x1e>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	200005c0 	.word	0x200005c0

08008b20 <_read_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4d07      	ldr	r5, [pc, #28]	@ (8008b40 <_read_r+0x20>)
 8008b24:	4604      	mov	r4, r0
 8008b26:	4608      	mov	r0, r1
 8008b28:	4611      	mov	r1, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	602a      	str	r2, [r5, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f7fa f8bb 	bl	8002caa <_read>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_read_r+0x1e>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_read_r+0x1e>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	200005c0 	.word	0x200005c0

08008b44 <_write_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	@ (8008b64 <_write_r+0x20>)
 8008b48:	4604      	mov	r4, r0
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	602a      	str	r2, [r5, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f7fa f8c6 	bl	8002ce4 <_write>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_write_r+0x1e>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_write_r+0x1e>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	200005c0 	.word	0x200005c0

08008b68 <__errno>:
 8008b68:	4b01      	ldr	r3, [pc, #4]	@ (8008b70 <__errno+0x8>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000024 	.word	0x20000024

08008b74 <__libc_init_array>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4d0d      	ldr	r5, [pc, #52]	@ (8008bac <__libc_init_array+0x38>)
 8008b78:	4c0d      	ldr	r4, [pc, #52]	@ (8008bb0 <__libc_init_array+0x3c>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	42a6      	cmp	r6, r4
 8008b82:	d109      	bne.n	8008b98 <__libc_init_array+0x24>
 8008b84:	4d0b      	ldr	r5, [pc, #44]	@ (8008bb4 <__libc_init_array+0x40>)
 8008b86:	4c0c      	ldr	r4, [pc, #48]	@ (8008bb8 <__libc_init_array+0x44>)
 8008b88:	f001 fe30 	bl	800a7ec <_init>
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	2600      	movs	r6, #0
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	d105      	bne.n	8008ba2 <__libc_init_array+0x2e>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9c:	4798      	blx	r3
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7ee      	b.n	8008b80 <__libc_init_array+0xc>
 8008ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba6:	4798      	blx	r3
 8008ba8:	3601      	adds	r6, #1
 8008baa:	e7f2      	b.n	8008b92 <__libc_init_array+0x1e>
 8008bac:	0800b124 	.word	0x0800b124
 8008bb0:	0800b124 	.word	0x0800b124
 8008bb4:	0800b124 	.word	0x0800b124
 8008bb8:	0800b128 	.word	0x0800b128

08008bbc <__retarget_lock_init_recursive>:
 8008bbc:	4770      	bx	lr

08008bbe <__retarget_lock_acquire_recursive>:
 8008bbe:	4770      	bx	lr

08008bc0 <__retarget_lock_release_recursive>:
 8008bc0:	4770      	bx	lr

08008bc2 <quorem>:
 8008bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc6:	6903      	ldr	r3, [r0, #16]
 8008bc8:	690c      	ldr	r4, [r1, #16]
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	4607      	mov	r7, r0
 8008bce:	db7e      	blt.n	8008cce <quorem+0x10c>
 8008bd0:	3c01      	subs	r4, #1
 8008bd2:	f101 0814 	add.w	r8, r1, #20
 8008bd6:	00a3      	lsls	r3, r4, #2
 8008bd8:	f100 0514 	add.w	r5, r0, #20
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bec:	3301      	adds	r3, #1
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bf8:	d32e      	bcc.n	8008c58 <quorem+0x96>
 8008bfa:	f04f 0a00 	mov.w	sl, #0
 8008bfe:	46c4      	mov	ip, r8
 8008c00:	46ae      	mov	lr, r5
 8008c02:	46d3      	mov	fp, sl
 8008c04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c08:	b298      	uxth	r0, r3
 8008c0a:	fb06 a000 	mla	r0, r6, r0, sl
 8008c0e:	0c02      	lsrs	r2, r0, #16
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	fb06 2303 	mla	r3, r6, r3, r2
 8008c16:	f8de 2000 	ldr.w	r2, [lr]
 8008c1a:	b280      	uxth	r0, r0
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	1a12      	subs	r2, r2, r0
 8008c20:	445a      	add	r2, fp
 8008c22:	f8de 0000 	ldr.w	r0, [lr]
 8008c26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c34:	b292      	uxth	r2, r2
 8008c36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c3a:	45e1      	cmp	r9, ip
 8008c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8008c40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c44:	d2de      	bcs.n	8008c04 <quorem+0x42>
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	58eb      	ldr	r3, [r5, r3]
 8008c4a:	b92b      	cbnz	r3, 8008c58 <quorem+0x96>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	3b04      	subs	r3, #4
 8008c50:	429d      	cmp	r5, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	d32f      	bcc.n	8008cb6 <quorem+0xf4>
 8008c56:	613c      	str	r4, [r7, #16]
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f001 f97f 	bl	8009f5c <__mcmp>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	db25      	blt.n	8008cae <quorem+0xec>
 8008c62:	4629      	mov	r1, r5
 8008c64:	2000      	movs	r0, #0
 8008c66:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c6a:	f8d1 c000 	ldr.w	ip, [r1]
 8008c6e:	fa1f fe82 	uxth.w	lr, r2
 8008c72:	fa1f f38c 	uxth.w	r3, ip
 8008c76:	eba3 030e 	sub.w	r3, r3, lr
 8008c7a:	4403      	add	r3, r0
 8008c7c:	0c12      	lsrs	r2, r2, #16
 8008c7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8c:	45c1      	cmp	r9, r8
 8008c8e:	f841 3b04 	str.w	r3, [r1], #4
 8008c92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c96:	d2e6      	bcs.n	8008c66 <quorem+0xa4>
 8008c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ca0:	b922      	cbnz	r2, 8008cac <quorem+0xea>
 8008ca2:	3b04      	subs	r3, #4
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	d30b      	bcc.n	8008cc2 <quorem+0x100>
 8008caa:	613c      	str	r4, [r7, #16]
 8008cac:	3601      	adds	r6, #1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	b003      	add	sp, #12
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1cb      	bne.n	8008c56 <quorem+0x94>
 8008cbe:	3c01      	subs	r4, #1
 8008cc0:	e7c6      	b.n	8008c50 <quorem+0x8e>
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	d1ef      	bne.n	8008caa <quorem+0xe8>
 8008cca:	3c01      	subs	r4, #1
 8008ccc:	e7ea      	b.n	8008ca4 <quorem+0xe2>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e7ee      	b.n	8008cb0 <quorem+0xee>
 8008cd2:	0000      	movs	r0, r0
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <_dtoa_r>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	69c7      	ldr	r7, [r0, #28]
 8008cde:	b097      	sub	sp, #92	@ 0x5c
 8008ce0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008ce4:	ec55 4b10 	vmov	r4, r5, d0
 8008ce8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008cea:	9107      	str	r1, [sp, #28]
 8008cec:	4681      	mov	r9, r0
 8008cee:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cf2:	b97f      	cbnz	r7, 8008d14 <_dtoa_r+0x3c>
 8008cf4:	2010      	movs	r0, #16
 8008cf6:	f000 fe09 	bl	800990c <malloc>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d00:	b920      	cbnz	r0, 8008d0c <_dtoa_r+0x34>
 8008d02:	4ba9      	ldr	r3, [pc, #676]	@ (8008fa8 <_dtoa_r+0x2d0>)
 8008d04:	21ef      	movs	r1, #239	@ 0xef
 8008d06:	48a9      	ldr	r0, [pc, #676]	@ (8008fac <_dtoa_r+0x2d4>)
 8008d08:	f001 fcc0 	bl	800a68c <__assert_func>
 8008d0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d10:	6007      	str	r7, [r0, #0]
 8008d12:	60c7      	str	r7, [r0, #12]
 8008d14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d18:	6819      	ldr	r1, [r3, #0]
 8008d1a:	b159      	cbz	r1, 8008d34 <_dtoa_r+0x5c>
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	604a      	str	r2, [r1, #4]
 8008d20:	2301      	movs	r3, #1
 8008d22:	4093      	lsls	r3, r2
 8008d24:	608b      	str	r3, [r1, #8]
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 fee6 	bl	8009af8 <_Bfree>
 8008d2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	1e2b      	subs	r3, r5, #0
 8008d36:	bfb9      	ittee	lt
 8008d38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d3c:	9305      	strlt	r3, [sp, #20]
 8008d3e:	2300      	movge	r3, #0
 8008d40:	6033      	strge	r3, [r6, #0]
 8008d42:	9f05      	ldr	r7, [sp, #20]
 8008d44:	4b9a      	ldr	r3, [pc, #616]	@ (8008fb0 <_dtoa_r+0x2d8>)
 8008d46:	bfbc      	itt	lt
 8008d48:	2201      	movlt	r2, #1
 8008d4a:	6032      	strlt	r2, [r6, #0]
 8008d4c:	43bb      	bics	r3, r7
 8008d4e:	d112      	bne.n	8008d76 <_dtoa_r+0x9e>
 8008d50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d5c:	4323      	orrs	r3, r4
 8008d5e:	f000 855a 	beq.w	8009816 <_dtoa_r+0xb3e>
 8008d62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008fc4 <_dtoa_r+0x2ec>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 855c 	beq.w	8009826 <_dtoa_r+0xb4e>
 8008d6e:	f10a 0303 	add.w	r3, sl, #3
 8008d72:	f000 bd56 	b.w	8009822 <_dtoa_r+0xb4a>
 8008d76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	ec51 0b17 	vmov	r0, r1, d7
 8008d80:	2300      	movs	r3, #0
 8008d82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008d86:	f7f7 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	b158      	cbz	r0, 8008da6 <_dtoa_r+0xce>
 8008d8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d90:	2301      	movs	r3, #1
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d96:	b113      	cbz	r3, 8008d9e <_dtoa_r+0xc6>
 8008d98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d9a:	4b86      	ldr	r3, [pc, #536]	@ (8008fb4 <_dtoa_r+0x2dc>)
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008fc8 <_dtoa_r+0x2f0>
 8008da2:	f000 bd40 	b.w	8009826 <_dtoa_r+0xb4e>
 8008da6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008daa:	aa14      	add	r2, sp, #80	@ 0x50
 8008dac:	a915      	add	r1, sp, #84	@ 0x54
 8008dae:	4648      	mov	r0, r9
 8008db0:	f001 f984 	bl	800a0bc <__d2b>
 8008db4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008db8:	9002      	str	r0, [sp, #8]
 8008dba:	2e00      	cmp	r6, #0
 8008dbc:	d078      	beq.n	8008eb0 <_dtoa_r+0x1d8>
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008dd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008dd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008dd8:	4619      	mov	r1, r3
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4b76      	ldr	r3, [pc, #472]	@ (8008fb8 <_dtoa_r+0x2e0>)
 8008dde:	f7f7 fa53 	bl	8000288 <__aeabi_dsub>
 8008de2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008f90 <_dtoa_r+0x2b8>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fc06 	bl	80005f8 <__aeabi_dmul>
 8008dec:	a36a      	add	r3, pc, #424	@ (adr r3, 8008f98 <_dtoa_r+0x2c0>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7f7 fa4b 	bl	800028c <__adddf3>
 8008df6:	4604      	mov	r4, r0
 8008df8:	4630      	mov	r0, r6
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	f7f7 fb92 	bl	8000524 <__aeabi_i2d>
 8008e00:	a367      	add	r3, pc, #412	@ (adr r3, 8008fa0 <_dtoa_r+0x2c8>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fa3b 	bl	800028c <__adddf3>
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	f7f7 fe9d 	bl	8000b58 <__aeabi_d2iz>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4607      	mov	r7, r0
 8008e22:	2300      	movs	r3, #0
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fe58 	bl	8000adc <__aeabi_dcmplt>
 8008e2c:	b140      	cbz	r0, 8008e40 <_dtoa_r+0x168>
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f7f7 fb78 	bl	8000524 <__aeabi_i2d>
 8008e34:	4622      	mov	r2, r4
 8008e36:	462b      	mov	r3, r5
 8008e38:	f7f7 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3c:	b900      	cbnz	r0, 8008e40 <_dtoa_r+0x168>
 8008e3e:	3f01      	subs	r7, #1
 8008e40:	2f16      	cmp	r7, #22
 8008e42:	d852      	bhi.n	8008eea <_dtoa_r+0x212>
 8008e44:	4b5d      	ldr	r3, [pc, #372]	@ (8008fbc <_dtoa_r+0x2e4>)
 8008e46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e52:	f7f7 fe43 	bl	8000adc <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d049      	beq.n	8008eee <_dtoa_r+0x216>
 8008e5a:	3f01      	subs	r7, #1
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e62:	1b9b      	subs	r3, r3, r6
 8008e64:	1e5a      	subs	r2, r3, #1
 8008e66:	bf45      	ittet	mi
 8008e68:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e6c:	9300      	strmi	r3, [sp, #0]
 8008e6e:	2300      	movpl	r3, #0
 8008e70:	2300      	movmi	r3, #0
 8008e72:	9206      	str	r2, [sp, #24]
 8008e74:	bf54      	ite	pl
 8008e76:	9300      	strpl	r3, [sp, #0]
 8008e78:	9306      	strmi	r3, [sp, #24]
 8008e7a:	2f00      	cmp	r7, #0
 8008e7c:	db39      	blt.n	8008ef2 <_dtoa_r+0x21a>
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	970d      	str	r7, [sp, #52]	@ 0x34
 8008e82:	443b      	add	r3, r7
 8008e84:	9306      	str	r3, [sp, #24]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d863      	bhi.n	8008f58 <_dtoa_r+0x280>
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	bfc4      	itt	gt
 8008e94:	3b04      	subgt	r3, #4
 8008e96:	9307      	strgt	r3, [sp, #28]
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008e9e:	bfcc      	ite	gt
 8008ea0:	2400      	movgt	r4, #0
 8008ea2:	2401      	movle	r4, #1
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d863      	bhi.n	8008f70 <_dtoa_r+0x298>
 8008ea8:	e8df f003 	tbb	[pc, r3]
 8008eac:	2b375452 	.word	0x2b375452
 8008eb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008eb4:	441e      	add	r6, r3
 8008eb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	bfc1      	itttt	gt
 8008ebe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ec2:	409f      	lslgt	r7, r3
 8008ec4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ec8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ecc:	bfd6      	itet	le
 8008ece:	f1c3 0320 	rsble	r3, r3, #32
 8008ed2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ed6:	fa04 f003 	lslle.w	r0, r4, r3
 8008eda:	f7f7 fb13 	bl	8000504 <__aeabi_ui2d>
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ee4:	3e01      	subs	r6, #1
 8008ee6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ee8:	e776      	b.n	8008dd8 <_dtoa_r+0x100>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e7b7      	b.n	8008e5e <_dtoa_r+0x186>
 8008eee:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ef0:	e7b6      	b.n	8008e60 <_dtoa_r+0x188>
 8008ef2:	9b00      	ldr	r3, [sp, #0]
 8008ef4:	1bdb      	subs	r3, r3, r7
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	427b      	negs	r3, r7
 8008efa:	9308      	str	r3, [sp, #32]
 8008efc:	2300      	movs	r3, #0
 8008efe:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f00:	e7c3      	b.n	8008e8a <_dtoa_r+0x1b2>
 8008f02:	2301      	movs	r3, #1
 8008f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f08:	eb07 0b03 	add.w	fp, r7, r3
 8008f0c:	f10b 0301 	add.w	r3, fp, #1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	bfb8      	it	lt
 8008f16:	2301      	movlt	r3, #1
 8008f18:	e006      	b.n	8008f28 <_dtoa_r+0x250>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dd28      	ble.n	8008f76 <_dtoa_r+0x29e>
 8008f24:	469b      	mov	fp, r3
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	2204      	movs	r2, #4
 8008f30:	f102 0514 	add.w	r5, r2, #20
 8008f34:	429d      	cmp	r5, r3
 8008f36:	d926      	bls.n	8008f86 <_dtoa_r+0x2ae>
 8008f38:	6041      	str	r1, [r0, #4]
 8008f3a:	4648      	mov	r0, r9
 8008f3c:	f000 fd9c 	bl	8009a78 <_Balloc>
 8008f40:	4682      	mov	sl, r0
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d142      	bne.n	8008fcc <_dtoa_r+0x2f4>
 8008f46:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc0 <_dtoa_r+0x2e8>)
 8008f48:	4602      	mov	r2, r0
 8008f4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f4e:	e6da      	b.n	8008d06 <_dtoa_r+0x2e>
 8008f50:	2300      	movs	r3, #0
 8008f52:	e7e3      	b.n	8008f1c <_dtoa_r+0x244>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e7d5      	b.n	8008f04 <_dtoa_r+0x22c>
 8008f58:	2401      	movs	r4, #1
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	9307      	str	r3, [sp, #28]
 8008f5e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f60:	f04f 3bff 	mov.w	fp, #4294967295
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f6a:	2312      	movs	r3, #18
 8008f6c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f6e:	e7db      	b.n	8008f28 <_dtoa_r+0x250>
 8008f70:	2301      	movs	r3, #1
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	e7f4      	b.n	8008f60 <_dtoa_r+0x288>
 8008f76:	f04f 0b01 	mov.w	fp, #1
 8008f7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f7e:	465b      	mov	r3, fp
 8008f80:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008f84:	e7d0      	b.n	8008f28 <_dtoa_r+0x250>
 8008f86:	3101      	adds	r1, #1
 8008f88:	0052      	lsls	r2, r2, #1
 8008f8a:	e7d1      	b.n	8008f30 <_dtoa_r+0x258>
 8008f8c:	f3af 8000 	nop.w
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800ade9 	.word	0x0800ade9
 8008fac:	0800ae00 	.word	0x0800ae00
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800adb9 	.word	0x0800adb9
 8008fb8:	3ff80000 	.word	0x3ff80000
 8008fbc:	0800af50 	.word	0x0800af50
 8008fc0:	0800ae58 	.word	0x0800ae58
 8008fc4:	0800ade5 	.word	0x0800ade5
 8008fc8:	0800adb8 	.word	0x0800adb8
 8008fcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fd0:	6018      	str	r0, [r3, #0]
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	2b0e      	cmp	r3, #14
 8008fd6:	f200 80a1 	bhi.w	800911c <_dtoa_r+0x444>
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	f000 809e 	beq.w	800911c <_dtoa_r+0x444>
 8008fe0:	2f00      	cmp	r7, #0
 8008fe2:	dd33      	ble.n	800904c <_dtoa_r+0x374>
 8008fe4:	4b9c      	ldr	r3, [pc, #624]	@ (8009258 <_dtoa_r+0x580>)
 8008fe6:	f007 020f 	and.w	r2, r7, #15
 8008fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fee:	ed93 7b00 	vldr	d7, [r3]
 8008ff2:	05f8      	lsls	r0, r7, #23
 8008ff4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ffc:	d516      	bpl.n	800902c <_dtoa_r+0x354>
 8008ffe:	4b97      	ldr	r3, [pc, #604]	@ (800925c <_dtoa_r+0x584>)
 8009000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009004:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009008:	f7f7 fc20 	bl	800084c <__aeabi_ddiv>
 800900c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009010:	f004 040f 	and.w	r4, r4, #15
 8009014:	2603      	movs	r6, #3
 8009016:	4d91      	ldr	r5, [pc, #580]	@ (800925c <_dtoa_r+0x584>)
 8009018:	b954      	cbnz	r4, 8009030 <_dtoa_r+0x358>
 800901a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800901e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009022:	f7f7 fc13 	bl	800084c <__aeabi_ddiv>
 8009026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800902a:	e028      	b.n	800907e <_dtoa_r+0x3a6>
 800902c:	2602      	movs	r6, #2
 800902e:	e7f2      	b.n	8009016 <_dtoa_r+0x33e>
 8009030:	07e1      	lsls	r1, r4, #31
 8009032:	d508      	bpl.n	8009046 <_dtoa_r+0x36e>
 8009034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800903c:	f7f7 fadc 	bl	80005f8 <__aeabi_dmul>
 8009040:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009044:	3601      	adds	r6, #1
 8009046:	1064      	asrs	r4, r4, #1
 8009048:	3508      	adds	r5, #8
 800904a:	e7e5      	b.n	8009018 <_dtoa_r+0x340>
 800904c:	f000 80af 	beq.w	80091ae <_dtoa_r+0x4d6>
 8009050:	427c      	negs	r4, r7
 8009052:	4b81      	ldr	r3, [pc, #516]	@ (8009258 <_dtoa_r+0x580>)
 8009054:	4d81      	ldr	r5, [pc, #516]	@ (800925c <_dtoa_r+0x584>)
 8009056:	f004 020f 	and.w	r2, r4, #15
 800905a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009066:	f7f7 fac7 	bl	80005f8 <__aeabi_dmul>
 800906a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800906e:	1124      	asrs	r4, r4, #4
 8009070:	2300      	movs	r3, #0
 8009072:	2602      	movs	r6, #2
 8009074:	2c00      	cmp	r4, #0
 8009076:	f040 808f 	bne.w	8009198 <_dtoa_r+0x4c0>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1d3      	bne.n	8009026 <_dtoa_r+0x34e>
 800907e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009080:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8094 	beq.w	80091b2 <_dtoa_r+0x4da>
 800908a:	4b75      	ldr	r3, [pc, #468]	@ (8009260 <_dtoa_r+0x588>)
 800908c:	2200      	movs	r2, #0
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 fd23 	bl	8000adc <__aeabi_dcmplt>
 8009096:	2800      	cmp	r0, #0
 8009098:	f000 808b 	beq.w	80091b2 <_dtoa_r+0x4da>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 8087 	beq.w	80091b2 <_dtoa_r+0x4da>
 80090a4:	f1bb 0f00 	cmp.w	fp, #0
 80090a8:	dd34      	ble.n	8009114 <_dtoa_r+0x43c>
 80090aa:	4620      	mov	r0, r4
 80090ac:	4b6d      	ldr	r3, [pc, #436]	@ (8009264 <_dtoa_r+0x58c>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80090be:	3601      	adds	r6, #1
 80090c0:	465c      	mov	r4, fp
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7f7 fa2e 	bl	8000524 <__aeabi_i2d>
 80090c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090cc:	f7f7 fa94 	bl	80005f8 <__aeabi_dmul>
 80090d0:	4b65      	ldr	r3, [pc, #404]	@ (8009268 <_dtoa_r+0x590>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	f7f7 f8da 	bl	800028c <__adddf3>
 80090d8:	4605      	mov	r5, r0
 80090da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090de:	2c00      	cmp	r4, #0
 80090e0:	d16a      	bne.n	80091b8 <_dtoa_r+0x4e0>
 80090e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e6:	4b61      	ldr	r3, [pc, #388]	@ (800926c <_dtoa_r+0x594>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	f7f7 f8cd 	bl	8000288 <__aeabi_dsub>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090f6:	462a      	mov	r2, r5
 80090f8:	4633      	mov	r3, r6
 80090fa:	f7f7 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f040 8298 	bne.w	8009634 <_dtoa_r+0x95c>
 8009104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009108:	462a      	mov	r2, r5
 800910a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800910e:	f7f7 fce5 	bl	8000adc <__aeabi_dcmplt>
 8009112:	bb38      	cbnz	r0, 8009164 <_dtoa_r+0x48c>
 8009114:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009118:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800911c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800911e:	2b00      	cmp	r3, #0
 8009120:	f2c0 8157 	blt.w	80093d2 <_dtoa_r+0x6fa>
 8009124:	2f0e      	cmp	r7, #14
 8009126:	f300 8154 	bgt.w	80093d2 <_dtoa_r+0x6fa>
 800912a:	4b4b      	ldr	r3, [pc, #300]	@ (8009258 <_dtoa_r+0x580>)
 800912c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009130:	ed93 7b00 	vldr	d7, [r3]
 8009134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009136:	2b00      	cmp	r3, #0
 8009138:	ed8d 7b00 	vstr	d7, [sp]
 800913c:	f280 80e5 	bge.w	800930a <_dtoa_r+0x632>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f300 80e1 	bgt.w	800930a <_dtoa_r+0x632>
 8009148:	d10c      	bne.n	8009164 <_dtoa_r+0x48c>
 800914a:	4b48      	ldr	r3, [pc, #288]	@ (800926c <_dtoa_r+0x594>)
 800914c:	2200      	movs	r2, #0
 800914e:	ec51 0b17 	vmov	r0, r1, d7
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800915a:	f7f7 fcd3 	bl	8000b04 <__aeabi_dcmpge>
 800915e:	2800      	cmp	r0, #0
 8009160:	f000 8266 	beq.w	8009630 <_dtoa_r+0x958>
 8009164:	2400      	movs	r4, #0
 8009166:	4625      	mov	r5, r4
 8009168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800916a:	4656      	mov	r6, sl
 800916c:	ea6f 0803 	mvn.w	r8, r3
 8009170:	2700      	movs	r7, #0
 8009172:	4621      	mov	r1, r4
 8009174:	4648      	mov	r0, r9
 8009176:	f000 fcbf 	bl	8009af8 <_Bfree>
 800917a:	2d00      	cmp	r5, #0
 800917c:	f000 80bd 	beq.w	80092fa <_dtoa_r+0x622>
 8009180:	b12f      	cbz	r7, 800918e <_dtoa_r+0x4b6>
 8009182:	42af      	cmp	r7, r5
 8009184:	d003      	beq.n	800918e <_dtoa_r+0x4b6>
 8009186:	4639      	mov	r1, r7
 8009188:	4648      	mov	r0, r9
 800918a:	f000 fcb5 	bl	8009af8 <_Bfree>
 800918e:	4629      	mov	r1, r5
 8009190:	4648      	mov	r0, r9
 8009192:	f000 fcb1 	bl	8009af8 <_Bfree>
 8009196:	e0b0      	b.n	80092fa <_dtoa_r+0x622>
 8009198:	07e2      	lsls	r2, r4, #31
 800919a:	d505      	bpl.n	80091a8 <_dtoa_r+0x4d0>
 800919c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	3601      	adds	r6, #1
 80091a6:	2301      	movs	r3, #1
 80091a8:	1064      	asrs	r4, r4, #1
 80091aa:	3508      	adds	r5, #8
 80091ac:	e762      	b.n	8009074 <_dtoa_r+0x39c>
 80091ae:	2602      	movs	r6, #2
 80091b0:	e765      	b.n	800907e <_dtoa_r+0x3a6>
 80091b2:	9c03      	ldr	r4, [sp, #12]
 80091b4:	46b8      	mov	r8, r7
 80091b6:	e784      	b.n	80090c2 <_dtoa_r+0x3ea>
 80091b8:	4b27      	ldr	r3, [pc, #156]	@ (8009258 <_dtoa_r+0x580>)
 80091ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091c4:	4454      	add	r4, sl
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d054      	beq.n	8009274 <_dtoa_r+0x59c>
 80091ca:	4929      	ldr	r1, [pc, #164]	@ (8009270 <_dtoa_r+0x598>)
 80091cc:	2000      	movs	r0, #0
 80091ce:	f7f7 fb3d 	bl	800084c <__aeabi_ddiv>
 80091d2:	4633      	mov	r3, r6
 80091d4:	462a      	mov	r2, r5
 80091d6:	f7f7 f857 	bl	8000288 <__aeabi_dsub>
 80091da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80091de:	4656      	mov	r6, sl
 80091e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091e4:	f7f7 fcb8 	bl	8000b58 <__aeabi_d2iz>
 80091e8:	4605      	mov	r5, r0
 80091ea:	f7f7 f99b 	bl	8000524 <__aeabi_i2d>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f6:	f7f7 f847 	bl	8000288 <__aeabi_dsub>
 80091fa:	3530      	adds	r5, #48	@ 0x30
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009204:	f806 5b01 	strb.w	r5, [r6], #1
 8009208:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800920c:	f7f7 fc66 	bl	8000adc <__aeabi_dcmplt>
 8009210:	2800      	cmp	r0, #0
 8009212:	d172      	bne.n	80092fa <_dtoa_r+0x622>
 8009214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009218:	4911      	ldr	r1, [pc, #68]	@ (8009260 <_dtoa_r+0x588>)
 800921a:	2000      	movs	r0, #0
 800921c:	f7f7 f834 	bl	8000288 <__aeabi_dsub>
 8009220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009224:	f7f7 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8009228:	2800      	cmp	r0, #0
 800922a:	f040 80b4 	bne.w	8009396 <_dtoa_r+0x6be>
 800922e:	42a6      	cmp	r6, r4
 8009230:	f43f af70 	beq.w	8009114 <_dtoa_r+0x43c>
 8009234:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009238:	4b0a      	ldr	r3, [pc, #40]	@ (8009264 <_dtoa_r+0x58c>)
 800923a:	2200      	movs	r2, #0
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	4b08      	ldr	r3, [pc, #32]	@ (8009264 <_dtoa_r+0x58c>)
 8009242:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009246:	2200      	movs	r2, #0
 8009248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924c:	f7f7 f9d4 	bl	80005f8 <__aeabi_dmul>
 8009250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009254:	e7c4      	b.n	80091e0 <_dtoa_r+0x508>
 8009256:	bf00      	nop
 8009258:	0800af50 	.word	0x0800af50
 800925c:	0800af28 	.word	0x0800af28
 8009260:	3ff00000 	.word	0x3ff00000
 8009264:	40240000 	.word	0x40240000
 8009268:	401c0000 	.word	0x401c0000
 800926c:	40140000 	.word	0x40140000
 8009270:	3fe00000 	.word	0x3fe00000
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	f7f7 f9be 	bl	80005f8 <__aeabi_dmul>
 800927c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009280:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009282:	4656      	mov	r6, sl
 8009284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009288:	f7f7 fc66 	bl	8000b58 <__aeabi_d2iz>
 800928c:	4605      	mov	r5, r0
 800928e:	f7f7 f949 	bl	8000524 <__aeabi_i2d>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800929a:	f7f6 fff5 	bl	8000288 <__aeabi_dsub>
 800929e:	3530      	adds	r5, #48	@ 0x30
 80092a0:	f806 5b01 	strb.w	r5, [r6], #1
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	d124      	bne.n	80092fe <_dtoa_r+0x626>
 80092b4:	4baf      	ldr	r3, [pc, #700]	@ (8009574 <_dtoa_r+0x89c>)
 80092b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092ba:	f7f6 ffe7 	bl	800028c <__adddf3>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c6:	f7f7 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d163      	bne.n	8009396 <_dtoa_r+0x6be>
 80092ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092d2:	49a8      	ldr	r1, [pc, #672]	@ (8009574 <_dtoa_r+0x89c>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f7f6 ffd7 	bl	8000288 <__aeabi_dsub>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e2:	f7f7 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f43f af14 	beq.w	8009114 <_dtoa_r+0x43c>
 80092ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80092ee:	1e73      	subs	r3, r6, #1
 80092f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092f6:	2b30      	cmp	r3, #48	@ 0x30
 80092f8:	d0f8      	beq.n	80092ec <_dtoa_r+0x614>
 80092fa:	4647      	mov	r7, r8
 80092fc:	e03b      	b.n	8009376 <_dtoa_r+0x69e>
 80092fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009578 <_dtoa_r+0x8a0>)
 8009300:	f7f7 f97a 	bl	80005f8 <__aeabi_dmul>
 8009304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009308:	e7bc      	b.n	8009284 <_dtoa_r+0x5ac>
 800930a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800930e:	4656      	mov	r6, sl
 8009310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f7 fa98 	bl	800084c <__aeabi_ddiv>
 800931c:	f7f7 fc1c 	bl	8000b58 <__aeabi_d2iz>
 8009320:	4680      	mov	r8, r0
 8009322:	f7f7 f8ff 	bl	8000524 <__aeabi_i2d>
 8009326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	f806 4b01 	strb.w	r4, [r6], #1
 8009342:	9d03      	ldr	r5, [sp, #12]
 8009344:	eba6 040a 	sub.w	r4, r6, sl
 8009348:	42a5      	cmp	r5, r4
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	d133      	bne.n	80093b8 <_dtoa_r+0x6e0>
 8009350:	f7f6 ff9c 	bl	800028c <__adddf3>
 8009354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	f7f7 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8009360:	b9c0      	cbnz	r0, 8009394 <_dtoa_r+0x6bc>
 8009362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800936e:	b110      	cbz	r0, 8009376 <_dtoa_r+0x69e>
 8009370:	f018 0f01 	tst.w	r8, #1
 8009374:	d10e      	bne.n	8009394 <_dtoa_r+0x6bc>
 8009376:	9902      	ldr	r1, [sp, #8]
 8009378:	4648      	mov	r0, r9
 800937a:	f000 fbbd 	bl	8009af8 <_Bfree>
 800937e:	2300      	movs	r3, #0
 8009380:	7033      	strb	r3, [r6, #0]
 8009382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009384:	3701      	adds	r7, #1
 8009386:	601f      	str	r7, [r3, #0]
 8009388:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 824b 	beq.w	8009826 <_dtoa_r+0xb4e>
 8009390:	601e      	str	r6, [r3, #0]
 8009392:	e248      	b.n	8009826 <_dtoa_r+0xb4e>
 8009394:	46b8      	mov	r8, r7
 8009396:	4633      	mov	r3, r6
 8009398:	461e      	mov	r6, r3
 800939a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800939e:	2a39      	cmp	r2, #57	@ 0x39
 80093a0:	d106      	bne.n	80093b0 <_dtoa_r+0x6d8>
 80093a2:	459a      	cmp	sl, r3
 80093a4:	d1f8      	bne.n	8009398 <_dtoa_r+0x6c0>
 80093a6:	2230      	movs	r2, #48	@ 0x30
 80093a8:	f108 0801 	add.w	r8, r8, #1
 80093ac:	f88a 2000 	strb.w	r2, [sl]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	3201      	adds	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e7a0      	b.n	80092fa <_dtoa_r+0x622>
 80093b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009578 <_dtoa_r+0x8a0>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	f7f7 f91c 	bl	80005f8 <__aeabi_dmul>
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	4604      	mov	r4, r0
 80093c6:	460d      	mov	r5, r1
 80093c8:	f7f7 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d09f      	beq.n	8009310 <_dtoa_r+0x638>
 80093d0:	e7d1      	b.n	8009376 <_dtoa_r+0x69e>
 80093d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d4:	2a00      	cmp	r2, #0
 80093d6:	f000 80ea 	beq.w	80095ae <_dtoa_r+0x8d6>
 80093da:	9a07      	ldr	r2, [sp, #28]
 80093dc:	2a01      	cmp	r2, #1
 80093de:	f300 80cd 	bgt.w	800957c <_dtoa_r+0x8a4>
 80093e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	f000 80c1 	beq.w	800956c <_dtoa_r+0x894>
 80093ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093ee:	9c08      	ldr	r4, [sp, #32]
 80093f0:	9e00      	ldr	r6, [sp, #0]
 80093f2:	9a00      	ldr	r2, [sp, #0]
 80093f4:	441a      	add	r2, r3
 80093f6:	9200      	str	r2, [sp, #0]
 80093f8:	9a06      	ldr	r2, [sp, #24]
 80093fa:	2101      	movs	r1, #1
 80093fc:	441a      	add	r2, r3
 80093fe:	4648      	mov	r0, r9
 8009400:	9206      	str	r2, [sp, #24]
 8009402:	f000 fc2d 	bl	8009c60 <__i2b>
 8009406:	4605      	mov	r5, r0
 8009408:	b166      	cbz	r6, 8009424 <_dtoa_r+0x74c>
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd09      	ble.n	8009424 <_dtoa_r+0x74c>
 8009410:	42b3      	cmp	r3, r6
 8009412:	9a00      	ldr	r2, [sp, #0]
 8009414:	bfa8      	it	ge
 8009416:	4633      	movge	r3, r6
 8009418:	1ad2      	subs	r2, r2, r3
 800941a:	9200      	str	r2, [sp, #0]
 800941c:	9a06      	ldr	r2, [sp, #24]
 800941e:	1af6      	subs	r6, r6, r3
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	9306      	str	r3, [sp, #24]
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	b30b      	cbz	r3, 800946c <_dtoa_r+0x794>
 8009428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80c6 	beq.w	80095bc <_dtoa_r+0x8e4>
 8009430:	2c00      	cmp	r4, #0
 8009432:	f000 80c0 	beq.w	80095b6 <_dtoa_r+0x8de>
 8009436:	4629      	mov	r1, r5
 8009438:	4622      	mov	r2, r4
 800943a:	4648      	mov	r0, r9
 800943c:	f000 fcc8 	bl	8009dd0 <__pow5mult>
 8009440:	9a02      	ldr	r2, [sp, #8]
 8009442:	4601      	mov	r1, r0
 8009444:	4605      	mov	r5, r0
 8009446:	4648      	mov	r0, r9
 8009448:	f000 fc20 	bl	8009c8c <__multiply>
 800944c:	9902      	ldr	r1, [sp, #8]
 800944e:	4680      	mov	r8, r0
 8009450:	4648      	mov	r0, r9
 8009452:	f000 fb51 	bl	8009af8 <_Bfree>
 8009456:	9b08      	ldr	r3, [sp, #32]
 8009458:	1b1b      	subs	r3, r3, r4
 800945a:	9308      	str	r3, [sp, #32]
 800945c:	f000 80b1 	beq.w	80095c2 <_dtoa_r+0x8ea>
 8009460:	9a08      	ldr	r2, [sp, #32]
 8009462:	4641      	mov	r1, r8
 8009464:	4648      	mov	r0, r9
 8009466:	f000 fcb3 	bl	8009dd0 <__pow5mult>
 800946a:	9002      	str	r0, [sp, #8]
 800946c:	2101      	movs	r1, #1
 800946e:	4648      	mov	r0, r9
 8009470:	f000 fbf6 	bl	8009c60 <__i2b>
 8009474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009476:	4604      	mov	r4, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 81d8 	beq.w	800982e <_dtoa_r+0xb56>
 800947e:	461a      	mov	r2, r3
 8009480:	4601      	mov	r1, r0
 8009482:	4648      	mov	r0, r9
 8009484:	f000 fca4 	bl	8009dd0 <__pow5mult>
 8009488:	9b07      	ldr	r3, [sp, #28]
 800948a:	2b01      	cmp	r3, #1
 800948c:	4604      	mov	r4, r0
 800948e:	f300 809f 	bgt.w	80095d0 <_dtoa_r+0x8f8>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f040 8097 	bne.w	80095c8 <_dtoa_r+0x8f0>
 800949a:	9b05      	ldr	r3, [sp, #20]
 800949c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f040 8093 	bne.w	80095cc <_dtoa_r+0x8f4>
 80094a6:	9b05      	ldr	r3, [sp, #20]
 80094a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094ac:	0d1b      	lsrs	r3, r3, #20
 80094ae:	051b      	lsls	r3, r3, #20
 80094b0:	b133      	cbz	r3, 80094c0 <_dtoa_r+0x7e8>
 80094b2:	9b00      	ldr	r3, [sp, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	3301      	adds	r3, #1
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	2301      	movs	r3, #1
 80094c0:	9308      	str	r3, [sp, #32]
 80094c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 81b8 	beq.w	800983a <_dtoa_r+0xb62>
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094d0:	6918      	ldr	r0, [r3, #16]
 80094d2:	f000 fb79 	bl	8009bc8 <__hi0bits>
 80094d6:	f1c0 0020 	rsb	r0, r0, #32
 80094da:	9b06      	ldr	r3, [sp, #24]
 80094dc:	4418      	add	r0, r3
 80094de:	f010 001f 	ands.w	r0, r0, #31
 80094e2:	f000 8082 	beq.w	80095ea <_dtoa_r+0x912>
 80094e6:	f1c0 0320 	rsb	r3, r0, #32
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	dd73      	ble.n	80095d6 <_dtoa_r+0x8fe>
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	f1c0 001c 	rsb	r0, r0, #28
 80094f4:	4403      	add	r3, r0
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	9b06      	ldr	r3, [sp, #24]
 80094fa:	4403      	add	r3, r0
 80094fc:	4406      	add	r6, r0
 80094fe:	9306      	str	r3, [sp, #24]
 8009500:	9b00      	ldr	r3, [sp, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	dd05      	ble.n	8009512 <_dtoa_r+0x83a>
 8009506:	9902      	ldr	r1, [sp, #8]
 8009508:	461a      	mov	r2, r3
 800950a:	4648      	mov	r0, r9
 800950c:	f000 fcba 	bl	8009e84 <__lshift>
 8009510:	9002      	str	r0, [sp, #8]
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd05      	ble.n	8009524 <_dtoa_r+0x84c>
 8009518:	4621      	mov	r1, r4
 800951a:	461a      	mov	r2, r3
 800951c:	4648      	mov	r0, r9
 800951e:	f000 fcb1 	bl	8009e84 <__lshift>
 8009522:	4604      	mov	r4, r0
 8009524:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d061      	beq.n	80095ee <_dtoa_r+0x916>
 800952a:	9802      	ldr	r0, [sp, #8]
 800952c:	4621      	mov	r1, r4
 800952e:	f000 fd15 	bl	8009f5c <__mcmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	da5b      	bge.n	80095ee <_dtoa_r+0x916>
 8009536:	2300      	movs	r3, #0
 8009538:	9902      	ldr	r1, [sp, #8]
 800953a:	220a      	movs	r2, #10
 800953c:	4648      	mov	r0, r9
 800953e:	f000 fafd 	bl	8009b3c <__multadd>
 8009542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009544:	9002      	str	r0, [sp, #8]
 8009546:	f107 38ff 	add.w	r8, r7, #4294967295
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8177 	beq.w	800983e <_dtoa_r+0xb66>
 8009550:	4629      	mov	r1, r5
 8009552:	2300      	movs	r3, #0
 8009554:	220a      	movs	r2, #10
 8009556:	4648      	mov	r0, r9
 8009558:	f000 faf0 	bl	8009b3c <__multadd>
 800955c:	f1bb 0f00 	cmp.w	fp, #0
 8009560:	4605      	mov	r5, r0
 8009562:	dc6f      	bgt.n	8009644 <_dtoa_r+0x96c>
 8009564:	9b07      	ldr	r3, [sp, #28]
 8009566:	2b02      	cmp	r3, #2
 8009568:	dc49      	bgt.n	80095fe <_dtoa_r+0x926>
 800956a:	e06b      	b.n	8009644 <_dtoa_r+0x96c>
 800956c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800956e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009572:	e73c      	b.n	80093ee <_dtoa_r+0x716>
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	40240000 	.word	0x40240000
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	1e5c      	subs	r4, r3, #1
 8009580:	9b08      	ldr	r3, [sp, #32]
 8009582:	42a3      	cmp	r3, r4
 8009584:	db09      	blt.n	800959a <_dtoa_r+0x8c2>
 8009586:	1b1c      	subs	r4, r3, r4
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f6bf af30 	bge.w	80093f0 <_dtoa_r+0x718>
 8009590:	9b00      	ldr	r3, [sp, #0]
 8009592:	9a03      	ldr	r2, [sp, #12]
 8009594:	1a9e      	subs	r6, r3, r2
 8009596:	2300      	movs	r3, #0
 8009598:	e72b      	b.n	80093f2 <_dtoa_r+0x71a>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800959e:	9408      	str	r4, [sp, #32]
 80095a0:	1ae3      	subs	r3, r4, r3
 80095a2:	441a      	add	r2, r3
 80095a4:	9e00      	ldr	r6, [sp, #0]
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80095aa:	2400      	movs	r4, #0
 80095ac:	e721      	b.n	80093f2 <_dtoa_r+0x71a>
 80095ae:	9c08      	ldr	r4, [sp, #32]
 80095b0:	9e00      	ldr	r6, [sp, #0]
 80095b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80095b4:	e728      	b.n	8009408 <_dtoa_r+0x730>
 80095b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80095ba:	e751      	b.n	8009460 <_dtoa_r+0x788>
 80095bc:	9a08      	ldr	r2, [sp, #32]
 80095be:	9902      	ldr	r1, [sp, #8]
 80095c0:	e750      	b.n	8009464 <_dtoa_r+0x78c>
 80095c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80095c6:	e751      	b.n	800946c <_dtoa_r+0x794>
 80095c8:	2300      	movs	r3, #0
 80095ca:	e779      	b.n	80094c0 <_dtoa_r+0x7e8>
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	e777      	b.n	80094c0 <_dtoa_r+0x7e8>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	e779      	b.n	80094ca <_dtoa_r+0x7f2>
 80095d6:	d093      	beq.n	8009500 <_dtoa_r+0x828>
 80095d8:	9a00      	ldr	r2, [sp, #0]
 80095da:	331c      	adds	r3, #28
 80095dc:	441a      	add	r2, r3
 80095de:	9200      	str	r2, [sp, #0]
 80095e0:	9a06      	ldr	r2, [sp, #24]
 80095e2:	441a      	add	r2, r3
 80095e4:	441e      	add	r6, r3
 80095e6:	9206      	str	r2, [sp, #24]
 80095e8:	e78a      	b.n	8009500 <_dtoa_r+0x828>
 80095ea:	4603      	mov	r3, r0
 80095ec:	e7f4      	b.n	80095d8 <_dtoa_r+0x900>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	46b8      	mov	r8, r7
 80095f4:	dc20      	bgt.n	8009638 <_dtoa_r+0x960>
 80095f6:	469b      	mov	fp, r3
 80095f8:	9b07      	ldr	r3, [sp, #28]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	dd1e      	ble.n	800963c <_dtoa_r+0x964>
 80095fe:	f1bb 0f00 	cmp.w	fp, #0
 8009602:	f47f adb1 	bne.w	8009168 <_dtoa_r+0x490>
 8009606:	4621      	mov	r1, r4
 8009608:	465b      	mov	r3, fp
 800960a:	2205      	movs	r2, #5
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fa95 	bl	8009b3c <__multadd>
 8009612:	4601      	mov	r1, r0
 8009614:	4604      	mov	r4, r0
 8009616:	9802      	ldr	r0, [sp, #8]
 8009618:	f000 fca0 	bl	8009f5c <__mcmp>
 800961c:	2800      	cmp	r0, #0
 800961e:	f77f ada3 	ble.w	8009168 <_dtoa_r+0x490>
 8009622:	4656      	mov	r6, sl
 8009624:	2331      	movs	r3, #49	@ 0x31
 8009626:	f806 3b01 	strb.w	r3, [r6], #1
 800962a:	f108 0801 	add.w	r8, r8, #1
 800962e:	e59f      	b.n	8009170 <_dtoa_r+0x498>
 8009630:	9c03      	ldr	r4, [sp, #12]
 8009632:	46b8      	mov	r8, r7
 8009634:	4625      	mov	r5, r4
 8009636:	e7f4      	b.n	8009622 <_dtoa_r+0x94a>
 8009638:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800963c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 8101 	beq.w	8009846 <_dtoa_r+0xb6e>
 8009644:	2e00      	cmp	r6, #0
 8009646:	dd05      	ble.n	8009654 <_dtoa_r+0x97c>
 8009648:	4629      	mov	r1, r5
 800964a:	4632      	mov	r2, r6
 800964c:	4648      	mov	r0, r9
 800964e:	f000 fc19 	bl	8009e84 <__lshift>
 8009652:	4605      	mov	r5, r0
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d05c      	beq.n	8009714 <_dtoa_r+0xa3c>
 800965a:	6869      	ldr	r1, [r5, #4]
 800965c:	4648      	mov	r0, r9
 800965e:	f000 fa0b 	bl	8009a78 <_Balloc>
 8009662:	4606      	mov	r6, r0
 8009664:	b928      	cbnz	r0, 8009672 <_dtoa_r+0x99a>
 8009666:	4b82      	ldr	r3, [pc, #520]	@ (8009870 <_dtoa_r+0xb98>)
 8009668:	4602      	mov	r2, r0
 800966a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800966e:	f7ff bb4a 	b.w	8008d06 <_dtoa_r+0x2e>
 8009672:	692a      	ldr	r2, [r5, #16]
 8009674:	3202      	adds	r2, #2
 8009676:	0092      	lsls	r2, r2, #2
 8009678:	f105 010c 	add.w	r1, r5, #12
 800967c:	300c      	adds	r0, #12
 800967e:	f000 fff7 	bl	800a670 <memcpy>
 8009682:	2201      	movs	r2, #1
 8009684:	4631      	mov	r1, r6
 8009686:	4648      	mov	r0, r9
 8009688:	f000 fbfc 	bl	8009e84 <__lshift>
 800968c:	f10a 0301 	add.w	r3, sl, #1
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	eb0a 030b 	add.w	r3, sl, fp
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	462f      	mov	r7, r5
 80096a0:	9306      	str	r3, [sp, #24]
 80096a2:	4605      	mov	r5, r0
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	9802      	ldr	r0, [sp, #8]
 80096a8:	4621      	mov	r1, r4
 80096aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80096ae:	f7ff fa88 	bl	8008bc2 <quorem>
 80096b2:	4603      	mov	r3, r0
 80096b4:	3330      	adds	r3, #48	@ 0x30
 80096b6:	9003      	str	r0, [sp, #12]
 80096b8:	4639      	mov	r1, r7
 80096ba:	9802      	ldr	r0, [sp, #8]
 80096bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096be:	f000 fc4d 	bl	8009f5c <__mcmp>
 80096c2:	462a      	mov	r2, r5
 80096c4:	9004      	str	r0, [sp, #16]
 80096c6:	4621      	mov	r1, r4
 80096c8:	4648      	mov	r0, r9
 80096ca:	f000 fc63 	bl	8009f94 <__mdiff>
 80096ce:	68c2      	ldr	r2, [r0, #12]
 80096d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d2:	4606      	mov	r6, r0
 80096d4:	bb02      	cbnz	r2, 8009718 <_dtoa_r+0xa40>
 80096d6:	4601      	mov	r1, r0
 80096d8:	9802      	ldr	r0, [sp, #8]
 80096da:	f000 fc3f 	bl	8009f5c <__mcmp>
 80096de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e0:	4602      	mov	r2, r0
 80096e2:	4631      	mov	r1, r6
 80096e4:	4648      	mov	r0, r9
 80096e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80096e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ea:	f000 fa05 	bl	8009af8 <_Bfree>
 80096ee:	9b07      	ldr	r3, [sp, #28]
 80096f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80096f2:	9e00      	ldr	r6, [sp, #0]
 80096f4:	ea42 0103 	orr.w	r1, r2, r3
 80096f8:	9b06      	ldr	r3, [sp, #24]
 80096fa:	4319      	orrs	r1, r3
 80096fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fe:	d10d      	bne.n	800971c <_dtoa_r+0xa44>
 8009700:	2b39      	cmp	r3, #57	@ 0x39
 8009702:	d027      	beq.n	8009754 <_dtoa_r+0xa7c>
 8009704:	9a04      	ldr	r2, [sp, #16]
 8009706:	2a00      	cmp	r2, #0
 8009708:	dd01      	ble.n	800970e <_dtoa_r+0xa36>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	3331      	adds	r3, #49	@ 0x31
 800970e:	f88b 3000 	strb.w	r3, [fp]
 8009712:	e52e      	b.n	8009172 <_dtoa_r+0x49a>
 8009714:	4628      	mov	r0, r5
 8009716:	e7b9      	b.n	800968c <_dtoa_r+0x9b4>
 8009718:	2201      	movs	r2, #1
 800971a:	e7e2      	b.n	80096e2 <_dtoa_r+0xa0a>
 800971c:	9904      	ldr	r1, [sp, #16]
 800971e:	2900      	cmp	r1, #0
 8009720:	db04      	blt.n	800972c <_dtoa_r+0xa54>
 8009722:	9807      	ldr	r0, [sp, #28]
 8009724:	4301      	orrs	r1, r0
 8009726:	9806      	ldr	r0, [sp, #24]
 8009728:	4301      	orrs	r1, r0
 800972a:	d120      	bne.n	800976e <_dtoa_r+0xa96>
 800972c:	2a00      	cmp	r2, #0
 800972e:	ddee      	ble.n	800970e <_dtoa_r+0xa36>
 8009730:	9902      	ldr	r1, [sp, #8]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2201      	movs	r2, #1
 8009736:	4648      	mov	r0, r9
 8009738:	f000 fba4 	bl	8009e84 <__lshift>
 800973c:	4621      	mov	r1, r4
 800973e:	9002      	str	r0, [sp, #8]
 8009740:	f000 fc0c 	bl	8009f5c <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	9b00      	ldr	r3, [sp, #0]
 8009748:	dc02      	bgt.n	8009750 <_dtoa_r+0xa78>
 800974a:	d1e0      	bne.n	800970e <_dtoa_r+0xa36>
 800974c:	07da      	lsls	r2, r3, #31
 800974e:	d5de      	bpl.n	800970e <_dtoa_r+0xa36>
 8009750:	2b39      	cmp	r3, #57	@ 0x39
 8009752:	d1da      	bne.n	800970a <_dtoa_r+0xa32>
 8009754:	2339      	movs	r3, #57	@ 0x39
 8009756:	f88b 3000 	strb.w	r3, [fp]
 800975a:	4633      	mov	r3, r6
 800975c:	461e      	mov	r6, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009764:	2a39      	cmp	r2, #57	@ 0x39
 8009766:	d04e      	beq.n	8009806 <_dtoa_r+0xb2e>
 8009768:	3201      	adds	r2, #1
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e501      	b.n	8009172 <_dtoa_r+0x49a>
 800976e:	2a00      	cmp	r2, #0
 8009770:	dd03      	ble.n	800977a <_dtoa_r+0xaa2>
 8009772:	2b39      	cmp	r3, #57	@ 0x39
 8009774:	d0ee      	beq.n	8009754 <_dtoa_r+0xa7c>
 8009776:	3301      	adds	r3, #1
 8009778:	e7c9      	b.n	800970e <_dtoa_r+0xa36>
 800977a:	9a00      	ldr	r2, [sp, #0]
 800977c:	9908      	ldr	r1, [sp, #32]
 800977e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009782:	428a      	cmp	r2, r1
 8009784:	d028      	beq.n	80097d8 <_dtoa_r+0xb00>
 8009786:	9902      	ldr	r1, [sp, #8]
 8009788:	2300      	movs	r3, #0
 800978a:	220a      	movs	r2, #10
 800978c:	4648      	mov	r0, r9
 800978e:	f000 f9d5 	bl	8009b3c <__multadd>
 8009792:	42af      	cmp	r7, r5
 8009794:	9002      	str	r0, [sp, #8]
 8009796:	f04f 0300 	mov.w	r3, #0
 800979a:	f04f 020a 	mov.w	r2, #10
 800979e:	4639      	mov	r1, r7
 80097a0:	4648      	mov	r0, r9
 80097a2:	d107      	bne.n	80097b4 <_dtoa_r+0xadc>
 80097a4:	f000 f9ca 	bl	8009b3c <__multadd>
 80097a8:	4607      	mov	r7, r0
 80097aa:	4605      	mov	r5, r0
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	e777      	b.n	80096a4 <_dtoa_r+0x9cc>
 80097b4:	f000 f9c2 	bl	8009b3c <__multadd>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4607      	mov	r7, r0
 80097bc:	2300      	movs	r3, #0
 80097be:	220a      	movs	r2, #10
 80097c0:	4648      	mov	r0, r9
 80097c2:	f000 f9bb 	bl	8009b3c <__multadd>
 80097c6:	4605      	mov	r5, r0
 80097c8:	e7f0      	b.n	80097ac <_dtoa_r+0xad4>
 80097ca:	f1bb 0f00 	cmp.w	fp, #0
 80097ce:	bfcc      	ite	gt
 80097d0:	465e      	movgt	r6, fp
 80097d2:	2601      	movle	r6, #1
 80097d4:	4456      	add	r6, sl
 80097d6:	2700      	movs	r7, #0
 80097d8:	9902      	ldr	r1, [sp, #8]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2201      	movs	r2, #1
 80097de:	4648      	mov	r0, r9
 80097e0:	f000 fb50 	bl	8009e84 <__lshift>
 80097e4:	4621      	mov	r1, r4
 80097e6:	9002      	str	r0, [sp, #8]
 80097e8:	f000 fbb8 	bl	8009f5c <__mcmp>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	dcb4      	bgt.n	800975a <_dtoa_r+0xa82>
 80097f0:	d102      	bne.n	80097f8 <_dtoa_r+0xb20>
 80097f2:	9b00      	ldr	r3, [sp, #0]
 80097f4:	07db      	lsls	r3, r3, #31
 80097f6:	d4b0      	bmi.n	800975a <_dtoa_r+0xa82>
 80097f8:	4633      	mov	r3, r6
 80097fa:	461e      	mov	r6, r3
 80097fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009800:	2a30      	cmp	r2, #48	@ 0x30
 8009802:	d0fa      	beq.n	80097fa <_dtoa_r+0xb22>
 8009804:	e4b5      	b.n	8009172 <_dtoa_r+0x49a>
 8009806:	459a      	cmp	sl, r3
 8009808:	d1a8      	bne.n	800975c <_dtoa_r+0xa84>
 800980a:	2331      	movs	r3, #49	@ 0x31
 800980c:	f108 0801 	add.w	r8, r8, #1
 8009810:	f88a 3000 	strb.w	r3, [sl]
 8009814:	e4ad      	b.n	8009172 <_dtoa_r+0x49a>
 8009816:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009818:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009874 <_dtoa_r+0xb9c>
 800981c:	b11b      	cbz	r3, 8009826 <_dtoa_r+0xb4e>
 800981e:	f10a 0308 	add.w	r3, sl, #8
 8009822:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	4650      	mov	r0, sl
 8009828:	b017      	add	sp, #92	@ 0x5c
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	9b07      	ldr	r3, [sp, #28]
 8009830:	2b01      	cmp	r3, #1
 8009832:	f77f ae2e 	ble.w	8009492 <_dtoa_r+0x7ba>
 8009836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	2001      	movs	r0, #1
 800983c:	e64d      	b.n	80094da <_dtoa_r+0x802>
 800983e:	f1bb 0f00 	cmp.w	fp, #0
 8009842:	f77f aed9 	ble.w	80095f8 <_dtoa_r+0x920>
 8009846:	4656      	mov	r6, sl
 8009848:	9802      	ldr	r0, [sp, #8]
 800984a:	4621      	mov	r1, r4
 800984c:	f7ff f9b9 	bl	8008bc2 <quorem>
 8009850:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009854:	f806 3b01 	strb.w	r3, [r6], #1
 8009858:	eba6 020a 	sub.w	r2, r6, sl
 800985c:	4593      	cmp	fp, r2
 800985e:	ddb4      	ble.n	80097ca <_dtoa_r+0xaf2>
 8009860:	9902      	ldr	r1, [sp, #8]
 8009862:	2300      	movs	r3, #0
 8009864:	220a      	movs	r2, #10
 8009866:	4648      	mov	r0, r9
 8009868:	f000 f968 	bl	8009b3c <__multadd>
 800986c:	9002      	str	r0, [sp, #8]
 800986e:	e7eb      	b.n	8009848 <_dtoa_r+0xb70>
 8009870:	0800ae58 	.word	0x0800ae58
 8009874:	0800addc 	.word	0x0800addc

08009878 <_free_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4605      	mov	r5, r0
 800987c:	2900      	cmp	r1, #0
 800987e:	d041      	beq.n	8009904 <_free_r+0x8c>
 8009880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009884:	1f0c      	subs	r4, r1, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfb8      	it	lt
 800988a:	18e4      	addlt	r4, r4, r3
 800988c:	f000 f8e8 	bl	8009a60 <__malloc_lock>
 8009890:	4a1d      	ldr	r2, [pc, #116]	@ (8009908 <_free_r+0x90>)
 8009892:	6813      	ldr	r3, [r2, #0]
 8009894:	b933      	cbnz	r3, 80098a4 <_free_r+0x2c>
 8009896:	6063      	str	r3, [r4, #4]
 8009898:	6014      	str	r4, [r2, #0]
 800989a:	4628      	mov	r0, r5
 800989c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a0:	f000 b8e4 	b.w	8009a6c <__malloc_unlock>
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d908      	bls.n	80098ba <_free_r+0x42>
 80098a8:	6820      	ldr	r0, [r4, #0]
 80098aa:	1821      	adds	r1, r4, r0
 80098ac:	428b      	cmp	r3, r1
 80098ae:	bf01      	itttt	eq
 80098b0:	6819      	ldreq	r1, [r3, #0]
 80098b2:	685b      	ldreq	r3, [r3, #4]
 80098b4:	1809      	addeq	r1, r1, r0
 80098b6:	6021      	streq	r1, [r4, #0]
 80098b8:	e7ed      	b.n	8009896 <_free_r+0x1e>
 80098ba:	461a      	mov	r2, r3
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	b10b      	cbz	r3, 80098c4 <_free_r+0x4c>
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	d9fa      	bls.n	80098ba <_free_r+0x42>
 80098c4:	6811      	ldr	r1, [r2, #0]
 80098c6:	1850      	adds	r0, r2, r1
 80098c8:	42a0      	cmp	r0, r4
 80098ca:	d10b      	bne.n	80098e4 <_free_r+0x6c>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	4401      	add	r1, r0
 80098d0:	1850      	adds	r0, r2, r1
 80098d2:	4283      	cmp	r3, r0
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	d1e0      	bne.n	800989a <_free_r+0x22>
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	6053      	str	r3, [r2, #4]
 80098de:	4408      	add	r0, r1
 80098e0:	6010      	str	r0, [r2, #0]
 80098e2:	e7da      	b.n	800989a <_free_r+0x22>
 80098e4:	d902      	bls.n	80098ec <_free_r+0x74>
 80098e6:	230c      	movs	r3, #12
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	e7d6      	b.n	800989a <_free_r+0x22>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	1821      	adds	r1, r4, r0
 80098f0:	428b      	cmp	r3, r1
 80098f2:	bf04      	itt	eq
 80098f4:	6819      	ldreq	r1, [r3, #0]
 80098f6:	685b      	ldreq	r3, [r3, #4]
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	bf04      	itt	eq
 80098fc:	1809      	addeq	r1, r1, r0
 80098fe:	6021      	streq	r1, [r4, #0]
 8009900:	6054      	str	r4, [r2, #4]
 8009902:	e7ca      	b.n	800989a <_free_r+0x22>
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	200005cc 	.word	0x200005cc

0800990c <malloc>:
 800990c:	4b02      	ldr	r3, [pc, #8]	@ (8009918 <malloc+0xc>)
 800990e:	4601      	mov	r1, r0
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	f000 b825 	b.w	8009960 <_malloc_r>
 8009916:	bf00      	nop
 8009918:	20000024 	.word	0x20000024

0800991c <sbrk_aligned>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	4e0f      	ldr	r6, [pc, #60]	@ (800995c <sbrk_aligned+0x40>)
 8009920:	460c      	mov	r4, r1
 8009922:	6831      	ldr	r1, [r6, #0]
 8009924:	4605      	mov	r5, r0
 8009926:	b911      	cbnz	r1, 800992e <sbrk_aligned+0x12>
 8009928:	f000 fe92 	bl	800a650 <_sbrk_r>
 800992c:	6030      	str	r0, [r6, #0]
 800992e:	4621      	mov	r1, r4
 8009930:	4628      	mov	r0, r5
 8009932:	f000 fe8d 	bl	800a650 <_sbrk_r>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d103      	bne.n	8009942 <sbrk_aligned+0x26>
 800993a:	f04f 34ff 	mov.w	r4, #4294967295
 800993e:	4620      	mov	r0, r4
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	1cc4      	adds	r4, r0, #3
 8009944:	f024 0403 	bic.w	r4, r4, #3
 8009948:	42a0      	cmp	r0, r4
 800994a:	d0f8      	beq.n	800993e <sbrk_aligned+0x22>
 800994c:	1a21      	subs	r1, r4, r0
 800994e:	4628      	mov	r0, r5
 8009950:	f000 fe7e 	bl	800a650 <_sbrk_r>
 8009954:	3001      	adds	r0, #1
 8009956:	d1f2      	bne.n	800993e <sbrk_aligned+0x22>
 8009958:	e7ef      	b.n	800993a <sbrk_aligned+0x1e>
 800995a:	bf00      	nop
 800995c:	200005c8 	.word	0x200005c8

08009960 <_malloc_r>:
 8009960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009964:	1ccd      	adds	r5, r1, #3
 8009966:	f025 0503 	bic.w	r5, r5, #3
 800996a:	3508      	adds	r5, #8
 800996c:	2d0c      	cmp	r5, #12
 800996e:	bf38      	it	cc
 8009970:	250c      	movcc	r5, #12
 8009972:	2d00      	cmp	r5, #0
 8009974:	4606      	mov	r6, r0
 8009976:	db01      	blt.n	800997c <_malloc_r+0x1c>
 8009978:	42a9      	cmp	r1, r5
 800997a:	d904      	bls.n	8009986 <_malloc_r+0x26>
 800997c:	230c      	movs	r3, #12
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	2000      	movs	r0, #0
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a5c <_malloc_r+0xfc>
 800998a:	f000 f869 	bl	8009a60 <__malloc_lock>
 800998e:	f8d8 3000 	ldr.w	r3, [r8]
 8009992:	461c      	mov	r4, r3
 8009994:	bb44      	cbnz	r4, 80099e8 <_malloc_r+0x88>
 8009996:	4629      	mov	r1, r5
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffbf 	bl	800991c <sbrk_aligned>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	4604      	mov	r4, r0
 80099a2:	d158      	bne.n	8009a56 <_malloc_r+0xf6>
 80099a4:	f8d8 4000 	ldr.w	r4, [r8]
 80099a8:	4627      	mov	r7, r4
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	d143      	bne.n	8009a36 <_malloc_r+0xd6>
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d04b      	beq.n	8009a4a <_malloc_r+0xea>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	4639      	mov	r1, r7
 80099b6:	4630      	mov	r0, r6
 80099b8:	eb04 0903 	add.w	r9, r4, r3
 80099bc:	f000 fe48 	bl	800a650 <_sbrk_r>
 80099c0:	4581      	cmp	r9, r0
 80099c2:	d142      	bne.n	8009a4a <_malloc_r+0xea>
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	1a6d      	subs	r5, r5, r1
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ffa6 	bl	800991c <sbrk_aligned>
 80099d0:	3001      	adds	r0, #1
 80099d2:	d03a      	beq.n	8009a4a <_malloc_r+0xea>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	442b      	add	r3, r5
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	f8d8 3000 	ldr.w	r3, [r8]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	bb62      	cbnz	r2, 8009a3c <_malloc_r+0xdc>
 80099e2:	f8c8 7000 	str.w	r7, [r8]
 80099e6:	e00f      	b.n	8009a08 <_malloc_r+0xa8>
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	1b52      	subs	r2, r2, r5
 80099ec:	d420      	bmi.n	8009a30 <_malloc_r+0xd0>
 80099ee:	2a0b      	cmp	r2, #11
 80099f0:	d917      	bls.n	8009a22 <_malloc_r+0xc2>
 80099f2:	1961      	adds	r1, r4, r5
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	6025      	str	r5, [r4, #0]
 80099f8:	bf18      	it	ne
 80099fa:	6059      	strne	r1, [r3, #4]
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	bf08      	it	eq
 8009a00:	f8c8 1000 	streq.w	r1, [r8]
 8009a04:	5162      	str	r2, [r4, r5]
 8009a06:	604b      	str	r3, [r1, #4]
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 f82f 	bl	8009a6c <__malloc_unlock>
 8009a0e:	f104 000b 	add.w	r0, r4, #11
 8009a12:	1d23      	adds	r3, r4, #4
 8009a14:	f020 0007 	bic.w	r0, r0, #7
 8009a18:	1ac2      	subs	r2, r0, r3
 8009a1a:	bf1c      	itt	ne
 8009a1c:	1a1b      	subne	r3, r3, r0
 8009a1e:	50a3      	strne	r3, [r4, r2]
 8009a20:	e7af      	b.n	8009982 <_malloc_r+0x22>
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	bf0c      	ite	eq
 8009a28:	f8c8 2000 	streq.w	r2, [r8]
 8009a2c:	605a      	strne	r2, [r3, #4]
 8009a2e:	e7eb      	b.n	8009a08 <_malloc_r+0xa8>
 8009a30:	4623      	mov	r3, r4
 8009a32:	6864      	ldr	r4, [r4, #4]
 8009a34:	e7ae      	b.n	8009994 <_malloc_r+0x34>
 8009a36:	463c      	mov	r4, r7
 8009a38:	687f      	ldr	r7, [r7, #4]
 8009a3a:	e7b6      	b.n	80099aa <_malloc_r+0x4a>
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d1fb      	bne.n	8009a3c <_malloc_r+0xdc>
 8009a44:	2300      	movs	r3, #0
 8009a46:	6053      	str	r3, [r2, #4]
 8009a48:	e7de      	b.n	8009a08 <_malloc_r+0xa8>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 f80c 	bl	8009a6c <__malloc_unlock>
 8009a54:	e794      	b.n	8009980 <_malloc_r+0x20>
 8009a56:	6005      	str	r5, [r0, #0]
 8009a58:	e7d6      	b.n	8009a08 <_malloc_r+0xa8>
 8009a5a:	bf00      	nop
 8009a5c:	200005cc 	.word	0x200005cc

08009a60 <__malloc_lock>:
 8009a60:	4801      	ldr	r0, [pc, #4]	@ (8009a68 <__malloc_lock+0x8>)
 8009a62:	f7ff b8ac 	b.w	8008bbe <__retarget_lock_acquire_recursive>
 8009a66:	bf00      	nop
 8009a68:	200005c4 	.word	0x200005c4

08009a6c <__malloc_unlock>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	@ (8009a74 <__malloc_unlock+0x8>)
 8009a6e:	f7ff b8a7 	b.w	8008bc0 <__retarget_lock_release_recursive>
 8009a72:	bf00      	nop
 8009a74:	200005c4 	.word	0x200005c4

08009a78 <_Balloc>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	69c6      	ldr	r6, [r0, #28]
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	b976      	cbnz	r6, 8009aa0 <_Balloc+0x28>
 8009a82:	2010      	movs	r0, #16
 8009a84:	f7ff ff42 	bl	800990c <malloc>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	61e0      	str	r0, [r4, #28]
 8009a8c:	b920      	cbnz	r0, 8009a98 <_Balloc+0x20>
 8009a8e:	4b18      	ldr	r3, [pc, #96]	@ (8009af0 <_Balloc+0x78>)
 8009a90:	4818      	ldr	r0, [pc, #96]	@ (8009af4 <_Balloc+0x7c>)
 8009a92:	216b      	movs	r1, #107	@ 0x6b
 8009a94:	f000 fdfa 	bl	800a68c <__assert_func>
 8009a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a9c:	6006      	str	r6, [r0, #0]
 8009a9e:	60c6      	str	r6, [r0, #12]
 8009aa0:	69e6      	ldr	r6, [r4, #28]
 8009aa2:	68f3      	ldr	r3, [r6, #12]
 8009aa4:	b183      	cbz	r3, 8009ac8 <_Balloc+0x50>
 8009aa6:	69e3      	ldr	r3, [r4, #28]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aae:	b9b8      	cbnz	r0, 8009ae0 <_Balloc+0x68>
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ab6:	1d72      	adds	r2, r6, #5
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 fe04 	bl	800a6c8 <_calloc_r>
 8009ac0:	b160      	cbz	r0, 8009adc <_Balloc+0x64>
 8009ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ac6:	e00e      	b.n	8009ae6 <_Balloc+0x6e>
 8009ac8:	2221      	movs	r2, #33	@ 0x21
 8009aca:	2104      	movs	r1, #4
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fdfb 	bl	800a6c8 <_calloc_r>
 8009ad2:	69e3      	ldr	r3, [r4, #28]
 8009ad4:	60f0      	str	r0, [r6, #12]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <_Balloc+0x2e>
 8009adc:	2000      	movs	r0, #0
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	6802      	ldr	r2, [r0, #0]
 8009ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aec:	e7f7      	b.n	8009ade <_Balloc+0x66>
 8009aee:	bf00      	nop
 8009af0:	0800ade9 	.word	0x0800ade9
 8009af4:	0800ae69 	.word	0x0800ae69

08009af8 <_Bfree>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	69c6      	ldr	r6, [r0, #28]
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b976      	cbnz	r6, 8009b20 <_Bfree+0x28>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7ff ff02 	bl	800990c <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	61e8      	str	r0, [r5, #28]
 8009b0c:	b920      	cbnz	r0, 8009b18 <_Bfree+0x20>
 8009b0e:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <_Bfree+0x3c>)
 8009b10:	4809      	ldr	r0, [pc, #36]	@ (8009b38 <_Bfree+0x40>)
 8009b12:	218f      	movs	r1, #143	@ 0x8f
 8009b14:	f000 fdba 	bl	800a68c <__assert_func>
 8009b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b1c:	6006      	str	r6, [r0, #0]
 8009b1e:	60c6      	str	r6, [r0, #12]
 8009b20:	b13c      	cbz	r4, 8009b32 <_Bfree+0x3a>
 8009b22:	69eb      	ldr	r3, [r5, #28]
 8009b24:	6862      	ldr	r2, [r4, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b2c:	6021      	str	r1, [r4, #0]
 8009b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	0800ade9 	.word	0x0800ade9
 8009b38:	0800ae69 	.word	0x0800ae69

08009b3c <__multadd>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	690d      	ldr	r5, [r1, #16]
 8009b42:	4607      	mov	r7, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	461e      	mov	r6, r3
 8009b48:	f101 0c14 	add.w	ip, r1, #20
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b52:	b299      	uxth	r1, r3
 8009b54:	fb02 6101 	mla	r1, r2, r1, r6
 8009b58:	0c1e      	lsrs	r6, r3, #16
 8009b5a:	0c0b      	lsrs	r3, r1, #16
 8009b5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b60:	b289      	uxth	r1, r1
 8009b62:	3001      	adds	r0, #1
 8009b64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b68:	4285      	cmp	r5, r0
 8009b6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b72:	dcec      	bgt.n	8009b4e <__multadd+0x12>
 8009b74:	b30e      	cbz	r6, 8009bba <__multadd+0x7e>
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dc19      	bgt.n	8009bb0 <__multadd+0x74>
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4638      	mov	r0, r7
 8009b80:	3101      	adds	r1, #1
 8009b82:	f7ff ff79 	bl	8009a78 <_Balloc>
 8009b86:	4680      	mov	r8, r0
 8009b88:	b928      	cbnz	r0, 8009b96 <__multadd+0x5a>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <__multadd+0x84>)
 8009b8e:	480d      	ldr	r0, [pc, #52]	@ (8009bc4 <__multadd+0x88>)
 8009b90:	21ba      	movs	r1, #186	@ 0xba
 8009b92:	f000 fd7b 	bl	800a68c <__assert_func>
 8009b96:	6922      	ldr	r2, [r4, #16]
 8009b98:	3202      	adds	r2, #2
 8009b9a:	f104 010c 	add.w	r1, r4, #12
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	f000 fd65 	bl	800a670 <memcpy>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ffa5 	bl	8009af8 <_Bfree>
 8009bae:	4644      	mov	r4, r8
 8009bb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	615e      	str	r6, [r3, #20]
 8009bb8:	6125      	str	r5, [r4, #16]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	0800ae58 	.word	0x0800ae58
 8009bc4:	0800ae69 	.word	0x0800ae69

08009bc8 <__hi0bits>:
 8009bc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bcc:	4603      	mov	r3, r0
 8009bce:	bf36      	itet	cc
 8009bd0:	0403      	lslcc	r3, r0, #16
 8009bd2:	2000      	movcs	r0, #0
 8009bd4:	2010      	movcc	r0, #16
 8009bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bda:	bf3c      	itt	cc
 8009bdc:	021b      	lslcc	r3, r3, #8
 8009bde:	3008      	addcc	r0, #8
 8009be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009be4:	bf3c      	itt	cc
 8009be6:	011b      	lslcc	r3, r3, #4
 8009be8:	3004      	addcc	r0, #4
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bee:	bf3c      	itt	cc
 8009bf0:	009b      	lslcc	r3, r3, #2
 8009bf2:	3002      	addcc	r0, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db05      	blt.n	8009c04 <__hi0bits+0x3c>
 8009bf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bfc:	f100 0001 	add.w	r0, r0, #1
 8009c00:	bf08      	it	eq
 8009c02:	2020      	moveq	r0, #32
 8009c04:	4770      	bx	lr

08009c06 <__lo0bits>:
 8009c06:	6803      	ldr	r3, [r0, #0]
 8009c08:	4602      	mov	r2, r0
 8009c0a:	f013 0007 	ands.w	r0, r3, #7
 8009c0e:	d00b      	beq.n	8009c28 <__lo0bits+0x22>
 8009c10:	07d9      	lsls	r1, r3, #31
 8009c12:	d421      	bmi.n	8009c58 <__lo0bits+0x52>
 8009c14:	0798      	lsls	r0, r3, #30
 8009c16:	bf49      	itett	mi
 8009c18:	085b      	lsrmi	r3, r3, #1
 8009c1a:	089b      	lsrpl	r3, r3, #2
 8009c1c:	2001      	movmi	r0, #1
 8009c1e:	6013      	strmi	r3, [r2, #0]
 8009c20:	bf5c      	itt	pl
 8009c22:	6013      	strpl	r3, [r2, #0]
 8009c24:	2002      	movpl	r0, #2
 8009c26:	4770      	bx	lr
 8009c28:	b299      	uxth	r1, r3
 8009c2a:	b909      	cbnz	r1, 8009c30 <__lo0bits+0x2a>
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	2010      	movs	r0, #16
 8009c30:	b2d9      	uxtb	r1, r3
 8009c32:	b909      	cbnz	r1, 8009c38 <__lo0bits+0x32>
 8009c34:	3008      	adds	r0, #8
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	0719      	lsls	r1, r3, #28
 8009c3a:	bf04      	itt	eq
 8009c3c:	091b      	lsreq	r3, r3, #4
 8009c3e:	3004      	addeq	r0, #4
 8009c40:	0799      	lsls	r1, r3, #30
 8009c42:	bf04      	itt	eq
 8009c44:	089b      	lsreq	r3, r3, #2
 8009c46:	3002      	addeq	r0, #2
 8009c48:	07d9      	lsls	r1, r3, #31
 8009c4a:	d403      	bmi.n	8009c54 <__lo0bits+0x4e>
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	f100 0001 	add.w	r0, r0, #1
 8009c52:	d003      	beq.n	8009c5c <__lo0bits+0x56>
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	4770      	bx	lr
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4770      	bx	lr
 8009c5c:	2020      	movs	r0, #32
 8009c5e:	4770      	bx	lr

08009c60 <__i2b>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	460c      	mov	r4, r1
 8009c64:	2101      	movs	r1, #1
 8009c66:	f7ff ff07 	bl	8009a78 <_Balloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <__i2b+0x1a>
 8009c6e:	4b05      	ldr	r3, [pc, #20]	@ (8009c84 <__i2b+0x24>)
 8009c70:	4805      	ldr	r0, [pc, #20]	@ (8009c88 <__i2b+0x28>)
 8009c72:	f240 1145 	movw	r1, #325	@ 0x145
 8009c76:	f000 fd09 	bl	800a68c <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	6144      	str	r4, [r0, #20]
 8009c7e:	6103      	str	r3, [r0, #16]
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	bf00      	nop
 8009c84:	0800ae58 	.word	0x0800ae58
 8009c88:	0800ae69 	.word	0x0800ae69

08009c8c <__multiply>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4617      	mov	r7, r2
 8009c92:	690a      	ldr	r2, [r1, #16]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	bfa8      	it	ge
 8009c9a:	463b      	movge	r3, r7
 8009c9c:	4689      	mov	r9, r1
 8009c9e:	bfa4      	itt	ge
 8009ca0:	460f      	movge	r7, r1
 8009ca2:	4699      	movge	r9, r3
 8009ca4:	693d      	ldr	r5, [r7, #16]
 8009ca6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	eb05 060a 	add.w	r6, r5, sl
 8009cb2:	42b3      	cmp	r3, r6
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	bfb8      	it	lt
 8009cb8:	3101      	addlt	r1, #1
 8009cba:	f7ff fedd 	bl	8009a78 <_Balloc>
 8009cbe:	b930      	cbnz	r0, 8009cce <__multiply+0x42>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	4b41      	ldr	r3, [pc, #260]	@ (8009dc8 <__multiply+0x13c>)
 8009cc4:	4841      	ldr	r0, [pc, #260]	@ (8009dcc <__multiply+0x140>)
 8009cc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009cca:	f000 fcdf 	bl	800a68c <__assert_func>
 8009cce:	f100 0414 	add.w	r4, r0, #20
 8009cd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4573      	cmp	r3, lr
 8009cdc:	d320      	bcc.n	8009d20 <__multiply+0x94>
 8009cde:	f107 0814 	add.w	r8, r7, #20
 8009ce2:	f109 0114 	add.w	r1, r9, #20
 8009ce6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009cea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	1beb      	subs	r3, r5, r7
 8009cf2:	3b15      	subs	r3, #21
 8009cf4:	f023 0303 	bic.w	r3, r3, #3
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	3715      	adds	r7, #21
 8009cfc:	42bd      	cmp	r5, r7
 8009cfe:	bf38      	it	cc
 8009d00:	2304      	movcc	r3, #4
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	9b02      	ldr	r3, [sp, #8]
 8009d06:	9103      	str	r1, [sp, #12]
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	d80c      	bhi.n	8009d26 <__multiply+0x9a>
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	dd03      	ble.n	8009d18 <__multiply+0x8c>
 8009d10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d055      	beq.n	8009dc4 <__multiply+0x138>
 8009d18:	6106      	str	r6, [r0, #16]
 8009d1a:	b005      	add	sp, #20
 8009d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	f843 2b04 	str.w	r2, [r3], #4
 8009d24:	e7d9      	b.n	8009cda <__multiply+0x4e>
 8009d26:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d2a:	f1ba 0f00 	cmp.w	sl, #0
 8009d2e:	d01f      	beq.n	8009d70 <__multiply+0xe4>
 8009d30:	46c4      	mov	ip, r8
 8009d32:	46a1      	mov	r9, r4
 8009d34:	2700      	movs	r7, #0
 8009d36:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8009d3e:	fa1f fb82 	uxth.w	fp, r2
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d48:	443b      	add	r3, r7
 8009d4a:	f8d9 7000 	ldr.w	r7, [r9]
 8009d4e:	0c12      	lsrs	r2, r2, #16
 8009d50:	0c3f      	lsrs	r7, r7, #16
 8009d52:	fb0a 7202 	mla	r2, sl, r2, r7
 8009d56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d60:	4565      	cmp	r5, ip
 8009d62:	f849 3b04 	str.w	r3, [r9], #4
 8009d66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009d6a:	d8e4      	bhi.n	8009d36 <__multiply+0xaa>
 8009d6c:	9b01      	ldr	r3, [sp, #4]
 8009d6e:	50e7      	str	r7, [r4, r3]
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d76:	3104      	adds	r1, #4
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	d020      	beq.n	8009dc0 <__multiply+0x134>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	4647      	mov	r7, r8
 8009d82:	46a4      	mov	ip, r4
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	f8b7 b000 	ldrh.w	fp, [r7]
 8009d8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009d90:	fb09 220b 	mla	r2, r9, fp, r2
 8009d94:	4452      	add	r2, sl
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8009da0:	f857 3b04 	ldr.w	r3, [r7], #4
 8009da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009da8:	f8bc 3000 	ldrh.w	r3, [ip]
 8009dac:	fb09 330a 	mla	r3, r9, sl, r3
 8009db0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009db4:	42bd      	cmp	r5, r7
 8009db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dba:	d8e5      	bhi.n	8009d88 <__multiply+0xfc>
 8009dbc:	9a01      	ldr	r2, [sp, #4]
 8009dbe:	50a3      	str	r3, [r4, r2]
 8009dc0:	3404      	adds	r4, #4
 8009dc2:	e79f      	b.n	8009d04 <__multiply+0x78>
 8009dc4:	3e01      	subs	r6, #1
 8009dc6:	e7a1      	b.n	8009d0c <__multiply+0x80>
 8009dc8:	0800ae58 	.word	0x0800ae58
 8009dcc:	0800ae69 	.word	0x0800ae69

08009dd0 <__pow5mult>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	f012 0203 	ands.w	r2, r2, #3
 8009dda:	4607      	mov	r7, r0
 8009ddc:	460e      	mov	r6, r1
 8009dde:	d007      	beq.n	8009df0 <__pow5mult+0x20>
 8009de0:	4c25      	ldr	r4, [pc, #148]	@ (8009e78 <__pow5mult+0xa8>)
 8009de2:	3a01      	subs	r2, #1
 8009de4:	2300      	movs	r3, #0
 8009de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dea:	f7ff fea7 	bl	8009b3c <__multadd>
 8009dee:	4606      	mov	r6, r0
 8009df0:	10ad      	asrs	r5, r5, #2
 8009df2:	d03d      	beq.n	8009e70 <__pow5mult+0xa0>
 8009df4:	69fc      	ldr	r4, [r7, #28]
 8009df6:	b97c      	cbnz	r4, 8009e18 <__pow5mult+0x48>
 8009df8:	2010      	movs	r0, #16
 8009dfa:	f7ff fd87 	bl	800990c <malloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	61f8      	str	r0, [r7, #28]
 8009e02:	b928      	cbnz	r0, 8009e10 <__pow5mult+0x40>
 8009e04:	4b1d      	ldr	r3, [pc, #116]	@ (8009e7c <__pow5mult+0xac>)
 8009e06:	481e      	ldr	r0, [pc, #120]	@ (8009e80 <__pow5mult+0xb0>)
 8009e08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e0c:	f000 fc3e 	bl	800a68c <__assert_func>
 8009e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e14:	6004      	str	r4, [r0, #0]
 8009e16:	60c4      	str	r4, [r0, #12]
 8009e18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e20:	b94c      	cbnz	r4, 8009e36 <__pow5mult+0x66>
 8009e22:	f240 2171 	movw	r1, #625	@ 0x271
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7ff ff1a 	bl	8009c60 <__i2b>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e32:	4604      	mov	r4, r0
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	f04f 0900 	mov.w	r9, #0
 8009e3a:	07eb      	lsls	r3, r5, #31
 8009e3c:	d50a      	bpl.n	8009e54 <__pow5mult+0x84>
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4622      	mov	r2, r4
 8009e42:	4638      	mov	r0, r7
 8009e44:	f7ff ff22 	bl	8009c8c <__multiply>
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7ff fe53 	bl	8009af8 <_Bfree>
 8009e52:	4646      	mov	r6, r8
 8009e54:	106d      	asrs	r5, r5, #1
 8009e56:	d00b      	beq.n	8009e70 <__pow5mult+0xa0>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	b938      	cbnz	r0, 8009e6c <__pow5mult+0x9c>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7ff ff13 	bl	8009c8c <__multiply>
 8009e66:	6020      	str	r0, [r4, #0]
 8009e68:	f8c0 9000 	str.w	r9, [r0]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e7e4      	b.n	8009e3a <__pow5mult+0x6a>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	bf00      	nop
 8009e78:	0800af1c 	.word	0x0800af1c
 8009e7c:	0800ade9 	.word	0x0800ade9
 8009e80:	0800ae69 	.word	0x0800ae69

08009e84 <__lshift>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	6849      	ldr	r1, [r1, #4]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	4607      	mov	r7, r0
 8009e96:	4691      	mov	r9, r2
 8009e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e9c:	f108 0601 	add.w	r6, r8, #1
 8009ea0:	42b3      	cmp	r3, r6
 8009ea2:	db0b      	blt.n	8009ebc <__lshift+0x38>
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fde7 	bl	8009a78 <_Balloc>
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b948      	cbnz	r0, 8009ec2 <__lshift+0x3e>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b28      	ldr	r3, [pc, #160]	@ (8009f54 <__lshift+0xd0>)
 8009eb2:	4829      	ldr	r0, [pc, #164]	@ (8009f58 <__lshift+0xd4>)
 8009eb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009eb8:	f000 fbe8 	bl	800a68c <__assert_func>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__lshift+0x1c>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f100 0114 	add.w	r1, r0, #20
 8009ec8:	f100 0210 	add.w	r2, r0, #16
 8009ecc:	4618      	mov	r0, r3
 8009ece:	4553      	cmp	r3, sl
 8009ed0:	db33      	blt.n	8009f3a <__lshift+0xb6>
 8009ed2:	6920      	ldr	r0, [r4, #16]
 8009ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ed8:	f104 0314 	add.w	r3, r4, #20
 8009edc:	f019 091f 	ands.w	r9, r9, #31
 8009ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ee8:	d02b      	beq.n	8009f42 <__lshift+0xbe>
 8009eea:	f1c9 0e20 	rsb	lr, r9, #32
 8009eee:	468a      	mov	sl, r1
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ef8:	4310      	orrs	r0, r2
 8009efa:	f84a 0b04 	str.w	r0, [sl], #4
 8009efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f02:	459c      	cmp	ip, r3
 8009f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f08:	d8f3      	bhi.n	8009ef2 <__lshift+0x6e>
 8009f0a:	ebac 0304 	sub.w	r3, ip, r4
 8009f0e:	3b15      	subs	r3, #21
 8009f10:	f023 0303 	bic.w	r3, r3, #3
 8009f14:	3304      	adds	r3, #4
 8009f16:	f104 0015 	add.w	r0, r4, #21
 8009f1a:	4560      	cmp	r0, ip
 8009f1c:	bf88      	it	hi
 8009f1e:	2304      	movhi	r3, #4
 8009f20:	50ca      	str	r2, [r1, r3]
 8009f22:	b10a      	cbz	r2, 8009f28 <__lshift+0xa4>
 8009f24:	f108 0602 	add.w	r6, r8, #2
 8009f28:	3e01      	subs	r6, #1
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	612e      	str	r6, [r5, #16]
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f7ff fde2 	bl	8009af8 <_Bfree>
 8009f34:	4628      	mov	r0, r5
 8009f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f3e:	3301      	adds	r3, #1
 8009f40:	e7c5      	b.n	8009ece <__lshift+0x4a>
 8009f42:	3904      	subs	r1, #4
 8009f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f4c:	459c      	cmp	ip, r3
 8009f4e:	d8f9      	bhi.n	8009f44 <__lshift+0xc0>
 8009f50:	e7ea      	b.n	8009f28 <__lshift+0xa4>
 8009f52:	bf00      	nop
 8009f54:	0800ae58 	.word	0x0800ae58
 8009f58:	0800ae69 	.word	0x0800ae69

08009f5c <__mcmp>:
 8009f5c:	690a      	ldr	r2, [r1, #16]
 8009f5e:	4603      	mov	r3, r0
 8009f60:	6900      	ldr	r0, [r0, #16]
 8009f62:	1a80      	subs	r0, r0, r2
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	d10e      	bne.n	8009f86 <__mcmp+0x2a>
 8009f68:	3314      	adds	r3, #20
 8009f6a:	3114      	adds	r1, #20
 8009f6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f7c:	4295      	cmp	r5, r2
 8009f7e:	d003      	beq.n	8009f88 <__mcmp+0x2c>
 8009f80:	d205      	bcs.n	8009f8e <__mcmp+0x32>
 8009f82:	f04f 30ff 	mov.w	r0, #4294967295
 8009f86:	bd30      	pop	{r4, r5, pc}
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d3f3      	bcc.n	8009f74 <__mcmp+0x18>
 8009f8c:	e7fb      	b.n	8009f86 <__mcmp+0x2a>
 8009f8e:	2001      	movs	r0, #1
 8009f90:	e7f9      	b.n	8009f86 <__mcmp+0x2a>
	...

08009f94 <__mdiff>:
 8009f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	4689      	mov	r9, r1
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	f7ff ffdb 	bl	8009f5c <__mcmp>
 8009fa6:	1e05      	subs	r5, r0, #0
 8009fa8:	d112      	bne.n	8009fd0 <__mdiff+0x3c>
 8009faa:	4629      	mov	r1, r5
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff fd63 	bl	8009a78 <_Balloc>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	b928      	cbnz	r0, 8009fc2 <__mdiff+0x2e>
 8009fb6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0b4 <__mdiff+0x120>)
 8009fb8:	f240 2137 	movw	r1, #567	@ 0x237
 8009fbc:	483e      	ldr	r0, [pc, #248]	@ (800a0b8 <__mdiff+0x124>)
 8009fbe:	f000 fb65 	bl	800a68c <__assert_func>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fc8:	4610      	mov	r0, r2
 8009fca:	b003      	add	sp, #12
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	bfbc      	itt	lt
 8009fd2:	464b      	movlt	r3, r9
 8009fd4:	46a1      	movlt	r9, r4
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fdc:	bfba      	itte	lt
 8009fde:	461c      	movlt	r4, r3
 8009fe0:	2501      	movlt	r5, #1
 8009fe2:	2500      	movge	r5, #0
 8009fe4:	f7ff fd48 	bl	8009a78 <_Balloc>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	b918      	cbnz	r0, 8009ff4 <__mdiff+0x60>
 8009fec:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <__mdiff+0x120>)
 8009fee:	f240 2145 	movw	r1, #581	@ 0x245
 8009ff2:	e7e3      	b.n	8009fbc <__mdiff+0x28>
 8009ff4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ff8:	6926      	ldr	r6, [r4, #16]
 8009ffa:	60c5      	str	r5, [r0, #12]
 8009ffc:	f109 0310 	add.w	r3, r9, #16
 800a000:	f109 0514 	add.w	r5, r9, #20
 800a004:	f104 0e14 	add.w	lr, r4, #20
 800a008:	f100 0b14 	add.w	fp, r0, #20
 800a00c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a010:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	46d9      	mov	r9, fp
 800a018:	f04f 0c00 	mov.w	ip, #0
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a022:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	fa1f f38a 	uxth.w	r3, sl
 800a02c:	4619      	mov	r1, r3
 800a02e:	b283      	uxth	r3, r0
 800a030:	1acb      	subs	r3, r1, r3
 800a032:	0c00      	lsrs	r0, r0, #16
 800a034:	4463      	add	r3, ip
 800a036:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a03a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a03e:	b29b      	uxth	r3, r3
 800a040:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a044:	4576      	cmp	r6, lr
 800a046:	f849 3b04 	str.w	r3, [r9], #4
 800a04a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a04e:	d8e5      	bhi.n	800a01c <__mdiff+0x88>
 800a050:	1b33      	subs	r3, r6, r4
 800a052:	3b15      	subs	r3, #21
 800a054:	f023 0303 	bic.w	r3, r3, #3
 800a058:	3415      	adds	r4, #21
 800a05a:	3304      	adds	r3, #4
 800a05c:	42a6      	cmp	r6, r4
 800a05e:	bf38      	it	cc
 800a060:	2304      	movcc	r3, #4
 800a062:	441d      	add	r5, r3
 800a064:	445b      	add	r3, fp
 800a066:	461e      	mov	r6, r3
 800a068:	462c      	mov	r4, r5
 800a06a:	4544      	cmp	r4, r8
 800a06c:	d30e      	bcc.n	800a08c <__mdiff+0xf8>
 800a06e:	f108 0103 	add.w	r1, r8, #3
 800a072:	1b49      	subs	r1, r1, r5
 800a074:	f021 0103 	bic.w	r1, r1, #3
 800a078:	3d03      	subs	r5, #3
 800a07a:	45a8      	cmp	r8, r5
 800a07c:	bf38      	it	cc
 800a07e:	2100      	movcc	r1, #0
 800a080:	440b      	add	r3, r1
 800a082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a086:	b191      	cbz	r1, 800a0ae <__mdiff+0x11a>
 800a088:	6117      	str	r7, [r2, #16]
 800a08a:	e79d      	b.n	8009fc8 <__mdiff+0x34>
 800a08c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a090:	46e6      	mov	lr, ip
 800a092:	0c08      	lsrs	r0, r1, #16
 800a094:	fa1c fc81 	uxtah	ip, ip, r1
 800a098:	4471      	add	r1, lr
 800a09a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a09e:	b289      	uxth	r1, r1
 800a0a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0a4:	f846 1b04 	str.w	r1, [r6], #4
 800a0a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0ac:	e7dd      	b.n	800a06a <__mdiff+0xd6>
 800a0ae:	3f01      	subs	r7, #1
 800a0b0:	e7e7      	b.n	800a082 <__mdiff+0xee>
 800a0b2:	bf00      	nop
 800a0b4:	0800ae58 	.word	0x0800ae58
 800a0b8:	0800ae69 	.word	0x0800ae69

0800a0bc <__d2b>:
 800a0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	ec59 8b10 	vmov	r8, r9, d0
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	f7ff fcd5 	bl	8009a78 <_Balloc>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	b930      	cbnz	r0, 800a0e0 <__d2b+0x24>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	4b23      	ldr	r3, [pc, #140]	@ (800a164 <__d2b+0xa8>)
 800a0d6:	4824      	ldr	r0, [pc, #144]	@ (800a168 <__d2b+0xac>)
 800a0d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a0dc:	f000 fad6 	bl	800a68c <__assert_func>
 800a0e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0e8:	b10d      	cbz	r5, 800a0ee <__d2b+0x32>
 800a0ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a0f4:	d023      	beq.n	800a13e <__d2b+0x82>
 800a0f6:	4668      	mov	r0, sp
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	f7ff fd84 	bl	8009c06 <__lo0bits>
 800a0fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a102:	b1d0      	cbz	r0, 800a13a <__d2b+0x7e>
 800a104:	f1c0 0320 	rsb	r3, r0, #32
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	430b      	orrs	r3, r1
 800a10e:	40c2      	lsrs	r2, r0
 800a110:	6163      	str	r3, [r4, #20]
 800a112:	9201      	str	r2, [sp, #4]
 800a114:	9b01      	ldr	r3, [sp, #4]
 800a116:	61a3      	str	r3, [r4, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bf0c      	ite	eq
 800a11c:	2201      	moveq	r2, #1
 800a11e:	2202      	movne	r2, #2
 800a120:	6122      	str	r2, [r4, #16]
 800a122:	b1a5      	cbz	r5, 800a14e <__d2b+0x92>
 800a124:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a128:	4405      	add	r5, r0
 800a12a:	603d      	str	r5, [r7, #0]
 800a12c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a130:	6030      	str	r0, [r6, #0]
 800a132:	4620      	mov	r0, r4
 800a134:	b003      	add	sp, #12
 800a136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a13a:	6161      	str	r1, [r4, #20]
 800a13c:	e7ea      	b.n	800a114 <__d2b+0x58>
 800a13e:	a801      	add	r0, sp, #4
 800a140:	f7ff fd61 	bl	8009c06 <__lo0bits>
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	6163      	str	r3, [r4, #20]
 800a148:	3020      	adds	r0, #32
 800a14a:	2201      	movs	r2, #1
 800a14c:	e7e8      	b.n	800a120 <__d2b+0x64>
 800a14e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a152:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a156:	6038      	str	r0, [r7, #0]
 800a158:	6918      	ldr	r0, [r3, #16]
 800a15a:	f7ff fd35 	bl	8009bc8 <__hi0bits>
 800a15e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a162:	e7e5      	b.n	800a130 <__d2b+0x74>
 800a164:	0800ae58 	.word	0x0800ae58
 800a168:	0800ae69 	.word	0x0800ae69

0800a16c <__sfputc_r>:
 800a16c:	6893      	ldr	r3, [r2, #8]
 800a16e:	3b01      	subs	r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	b410      	push	{r4}
 800a174:	6093      	str	r3, [r2, #8]
 800a176:	da08      	bge.n	800a18a <__sfputc_r+0x1e>
 800a178:	6994      	ldr	r4, [r2, #24]
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	db01      	blt.n	800a182 <__sfputc_r+0x16>
 800a17e:	290a      	cmp	r1, #10
 800a180:	d103      	bne.n	800a18a <__sfputc_r+0x1e>
 800a182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a186:	f7fe bc08 	b.w	800899a <__swbuf_r>
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	1c58      	adds	r0, r3, #1
 800a18e:	6010      	str	r0, [r2, #0]
 800a190:	7019      	strb	r1, [r3, #0]
 800a192:	4608      	mov	r0, r1
 800a194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <__sfputs_r>:
 800a19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	18d5      	adds	r5, r2, r3
 800a1a4:	42ac      	cmp	r4, r5
 800a1a6:	d101      	bne.n	800a1ac <__sfputs_r+0x12>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e007      	b.n	800a1bc <__sfputs_r+0x22>
 800a1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7ff ffda 	bl	800a16c <__sfputc_r>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d1f3      	bne.n	800a1a4 <__sfputs_r+0xa>
 800a1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1c0 <_vfiprintf_r>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	b09d      	sub	sp, #116	@ 0x74
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	4698      	mov	r8, r3
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	b118      	cbz	r0, 800a1d8 <_vfiprintf_r+0x18>
 800a1d0:	6a03      	ldr	r3, [r0, #32]
 800a1d2:	b90b      	cbnz	r3, 800a1d8 <_vfiprintf_r+0x18>
 800a1d4:	f7fe faf8 	bl	80087c8 <__sinit>
 800a1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1da:	07d9      	lsls	r1, r3, #31
 800a1dc:	d405      	bmi.n	800a1ea <_vfiprintf_r+0x2a>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	059a      	lsls	r2, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_vfiprintf_r+0x2a>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e6:	f7fe fcea 	bl	8008bbe <__retarget_lock_acquire_recursive>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	071b      	lsls	r3, r3, #28
 800a1ee:	d501      	bpl.n	800a1f4 <_vfiprintf_r+0x34>
 800a1f0:	692b      	ldr	r3, [r5, #16]
 800a1f2:	b99b      	cbnz	r3, 800a21c <_vfiprintf_r+0x5c>
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7fe fc0e 	bl	8008a18 <__swsetup_r>
 800a1fc:	b170      	cbz	r0, 800a21c <_vfiprintf_r+0x5c>
 800a1fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a200:	07dc      	lsls	r4, r3, #31
 800a202:	d504      	bpl.n	800a20e <_vfiprintf_r+0x4e>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	b01d      	add	sp, #116	@ 0x74
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	0598      	lsls	r0, r3, #22
 800a212:	d4f7      	bmi.n	800a204 <_vfiprintf_r+0x44>
 800a214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a216:	f7fe fcd3 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a21a:	e7f3      	b.n	800a204 <_vfiprintf_r+0x44>
 800a21c:	2300      	movs	r3, #0
 800a21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a220:	2320      	movs	r3, #32
 800a222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a226:	f8cd 800c 	str.w	r8, [sp, #12]
 800a22a:	2330      	movs	r3, #48	@ 0x30
 800a22c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3dc <_vfiprintf_r+0x21c>
 800a230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a234:	f04f 0901 	mov.w	r9, #1
 800a238:	4623      	mov	r3, r4
 800a23a:	469a      	mov	sl, r3
 800a23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a240:	b10a      	cbz	r2, 800a246 <_vfiprintf_r+0x86>
 800a242:	2a25      	cmp	r2, #37	@ 0x25
 800a244:	d1f9      	bne.n	800a23a <_vfiprintf_r+0x7a>
 800a246:	ebba 0b04 	subs.w	fp, sl, r4
 800a24a:	d00b      	beq.n	800a264 <_vfiprintf_r+0xa4>
 800a24c:	465b      	mov	r3, fp
 800a24e:	4622      	mov	r2, r4
 800a250:	4629      	mov	r1, r5
 800a252:	4630      	mov	r0, r6
 800a254:	f7ff ffa1 	bl	800a19a <__sfputs_r>
 800a258:	3001      	adds	r0, #1
 800a25a:	f000 80a7 	beq.w	800a3ac <_vfiprintf_r+0x1ec>
 800a25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a260:	445a      	add	r2, fp
 800a262:	9209      	str	r2, [sp, #36]	@ 0x24
 800a264:	f89a 3000 	ldrb.w	r3, [sl]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 809f 	beq.w	800a3ac <_vfiprintf_r+0x1ec>
 800a26e:	2300      	movs	r3, #0
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a278:	f10a 0a01 	add.w	sl, sl, #1
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	9307      	str	r3, [sp, #28]
 800a280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a284:	931a      	str	r3, [sp, #104]	@ 0x68
 800a286:	4654      	mov	r4, sl
 800a288:	2205      	movs	r2, #5
 800a28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28e:	4853      	ldr	r0, [pc, #332]	@ (800a3dc <_vfiprintf_r+0x21c>)
 800a290:	f7f5 ff9e 	bl	80001d0 <memchr>
 800a294:	9a04      	ldr	r2, [sp, #16]
 800a296:	b9d8      	cbnz	r0, 800a2d0 <_vfiprintf_r+0x110>
 800a298:	06d1      	lsls	r1, r2, #27
 800a29a:	bf44      	itt	mi
 800a29c:	2320      	movmi	r3, #32
 800a29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a2:	0713      	lsls	r3, r2, #28
 800a2a4:	bf44      	itt	mi
 800a2a6:	232b      	movmi	r3, #43	@ 0x2b
 800a2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b2:	d015      	beq.n	800a2e0 <_vfiprintf_r+0x120>
 800a2b4:	9a07      	ldr	r2, [sp, #28]
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f04f 0c0a 	mov.w	ip, #10
 800a2be:	4621      	mov	r1, r4
 800a2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c4:	3b30      	subs	r3, #48	@ 0x30
 800a2c6:	2b09      	cmp	r3, #9
 800a2c8:	d94b      	bls.n	800a362 <_vfiprintf_r+0x1a2>
 800a2ca:	b1b0      	cbz	r0, 800a2fa <_vfiprintf_r+0x13a>
 800a2cc:	9207      	str	r2, [sp, #28]
 800a2ce:	e014      	b.n	800a2fa <_vfiprintf_r+0x13a>
 800a2d0:	eba0 0308 	sub.w	r3, r0, r8
 800a2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	46a2      	mov	sl, r4
 800a2de:	e7d2      	b.n	800a286 <_vfiprintf_r+0xc6>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	1d19      	adds	r1, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	9103      	str	r1, [sp, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfbb      	ittet	lt
 800a2ec:	425b      	neglt	r3, r3
 800a2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a2f2:	9307      	strge	r3, [sp, #28]
 800a2f4:	9307      	strlt	r3, [sp, #28]
 800a2f6:	bfb8      	it	lt
 800a2f8:	9204      	strlt	r2, [sp, #16]
 800a2fa:	7823      	ldrb	r3, [r4, #0]
 800a2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2fe:	d10a      	bne.n	800a316 <_vfiprintf_r+0x156>
 800a300:	7863      	ldrb	r3, [r4, #1]
 800a302:	2b2a      	cmp	r3, #42	@ 0x2a
 800a304:	d132      	bne.n	800a36c <_vfiprintf_r+0x1ac>
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	1d1a      	adds	r2, r3, #4
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	9203      	str	r2, [sp, #12]
 800a30e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a312:	3402      	adds	r4, #2
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3ec <_vfiprintf_r+0x22c>
 800a31a:	7821      	ldrb	r1, [r4, #0]
 800a31c:	2203      	movs	r2, #3
 800a31e:	4650      	mov	r0, sl
 800a320:	f7f5 ff56 	bl	80001d0 <memchr>
 800a324:	b138      	cbz	r0, 800a336 <_vfiprintf_r+0x176>
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	eba0 000a 	sub.w	r0, r0, sl
 800a32c:	2240      	movs	r2, #64	@ 0x40
 800a32e:	4082      	lsls	r2, r0
 800a330:	4313      	orrs	r3, r2
 800a332:	3401      	adds	r4, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33a:	4829      	ldr	r0, [pc, #164]	@ (800a3e0 <_vfiprintf_r+0x220>)
 800a33c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a340:	2206      	movs	r2, #6
 800a342:	f7f5 ff45 	bl	80001d0 <memchr>
 800a346:	2800      	cmp	r0, #0
 800a348:	d03f      	beq.n	800a3ca <_vfiprintf_r+0x20a>
 800a34a:	4b26      	ldr	r3, [pc, #152]	@ (800a3e4 <_vfiprintf_r+0x224>)
 800a34c:	bb1b      	cbnz	r3, 800a396 <_vfiprintf_r+0x1d6>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	f023 0307 	bic.w	r3, r3, #7
 800a356:	3308      	adds	r3, #8
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35c:	443b      	add	r3, r7
 800a35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a360:	e76a      	b.n	800a238 <_vfiprintf_r+0x78>
 800a362:	fb0c 3202 	mla	r2, ip, r2, r3
 800a366:	460c      	mov	r4, r1
 800a368:	2001      	movs	r0, #1
 800a36a:	e7a8      	b.n	800a2be <_vfiprintf_r+0xfe>
 800a36c:	2300      	movs	r3, #0
 800a36e:	3401      	adds	r4, #1
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	4619      	mov	r1, r3
 800a374:	f04f 0c0a 	mov.w	ip, #10
 800a378:	4620      	mov	r0, r4
 800a37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a37e:	3a30      	subs	r2, #48	@ 0x30
 800a380:	2a09      	cmp	r2, #9
 800a382:	d903      	bls.n	800a38c <_vfiprintf_r+0x1cc>
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0c6      	beq.n	800a316 <_vfiprintf_r+0x156>
 800a388:	9105      	str	r1, [sp, #20]
 800a38a:	e7c4      	b.n	800a316 <_vfiprintf_r+0x156>
 800a38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a390:	4604      	mov	r4, r0
 800a392:	2301      	movs	r3, #1
 800a394:	e7f0      	b.n	800a378 <_vfiprintf_r+0x1b8>
 800a396:	ab03      	add	r3, sp, #12
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	462a      	mov	r2, r5
 800a39c:	4b12      	ldr	r3, [pc, #72]	@ (800a3e8 <_vfiprintf_r+0x228>)
 800a39e:	a904      	add	r1, sp, #16
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7fd fdcf 	bl	8007f44 <_printf_float>
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	1c78      	adds	r0, r7, #1
 800a3aa:	d1d6      	bne.n	800a35a <_vfiprintf_r+0x19a>
 800a3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ae:	07d9      	lsls	r1, r3, #31
 800a3b0:	d405      	bmi.n	800a3be <_vfiprintf_r+0x1fe>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	059a      	lsls	r2, r3, #22
 800a3b6:	d402      	bmi.n	800a3be <_vfiprintf_r+0x1fe>
 800a3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ba:	f7fe fc01 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	065b      	lsls	r3, r3, #25
 800a3c2:	f53f af1f 	bmi.w	800a204 <_vfiprintf_r+0x44>
 800a3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c8:	e71e      	b.n	800a208 <_vfiprintf_r+0x48>
 800a3ca:	ab03      	add	r3, sp, #12
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4b05      	ldr	r3, [pc, #20]	@ (800a3e8 <_vfiprintf_r+0x228>)
 800a3d2:	a904      	add	r1, sp, #16
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7fe f84d 	bl	8008474 <_printf_i>
 800a3da:	e7e4      	b.n	800a3a6 <_vfiprintf_r+0x1e6>
 800a3dc:	0800aec2 	.word	0x0800aec2
 800a3e0:	0800aecc 	.word	0x0800aecc
 800a3e4:	08007f45 	.word	0x08007f45
 800a3e8:	0800a19b 	.word	0x0800a19b
 800a3ec:	0800aec8 	.word	0x0800aec8

0800a3f0 <__sflush_r>:
 800a3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f8:	0716      	lsls	r6, r2, #28
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	d454      	bmi.n	800a4aa <__sflush_r+0xba>
 800a400:	684b      	ldr	r3, [r1, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	dc02      	bgt.n	800a40c <__sflush_r+0x1c>
 800a406:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd48      	ble.n	800a49e <__sflush_r+0xae>
 800a40c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a40e:	2e00      	cmp	r6, #0
 800a410:	d045      	beq.n	800a49e <__sflush_r+0xae>
 800a412:	2300      	movs	r3, #0
 800a414:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a418:	682f      	ldr	r7, [r5, #0]
 800a41a:	6a21      	ldr	r1, [r4, #32]
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	d030      	beq.n	800a482 <__sflush_r+0x92>
 800a420:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	0759      	lsls	r1, r3, #29
 800a426:	d505      	bpl.n	800a434 <__sflush_r+0x44>
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a42e:	b10b      	cbz	r3, 800a434 <__sflush_r+0x44>
 800a430:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a432:	1ad2      	subs	r2, r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a438:	6a21      	ldr	r1, [r4, #32]
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b0      	blx	r6
 800a43e:	1c43      	adds	r3, r0, #1
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	d106      	bne.n	800a452 <__sflush_r+0x62>
 800a444:	6829      	ldr	r1, [r5, #0]
 800a446:	291d      	cmp	r1, #29
 800a448:	d82b      	bhi.n	800a4a2 <__sflush_r+0xb2>
 800a44a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f4 <__sflush_r+0x104>)
 800a44c:	40ca      	lsrs	r2, r1
 800a44e:	07d6      	lsls	r6, r2, #31
 800a450:	d527      	bpl.n	800a4a2 <__sflush_r+0xb2>
 800a452:	2200      	movs	r2, #0
 800a454:	6062      	str	r2, [r4, #4]
 800a456:	04d9      	lsls	r1, r3, #19
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	6022      	str	r2, [r4, #0]
 800a45c:	d504      	bpl.n	800a468 <__sflush_r+0x78>
 800a45e:	1c42      	adds	r2, r0, #1
 800a460:	d101      	bne.n	800a466 <__sflush_r+0x76>
 800a462:	682b      	ldr	r3, [r5, #0]
 800a464:	b903      	cbnz	r3, 800a468 <__sflush_r+0x78>
 800a466:	6560      	str	r0, [r4, #84]	@ 0x54
 800a468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a46a:	602f      	str	r7, [r5, #0]
 800a46c:	b1b9      	cbz	r1, 800a49e <__sflush_r+0xae>
 800a46e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a472:	4299      	cmp	r1, r3
 800a474:	d002      	beq.n	800a47c <__sflush_r+0x8c>
 800a476:	4628      	mov	r0, r5
 800a478:	f7ff f9fe 	bl	8009878 <_free_r>
 800a47c:	2300      	movs	r3, #0
 800a47e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a480:	e00d      	b.n	800a49e <__sflush_r+0xae>
 800a482:	2301      	movs	r3, #1
 800a484:	4628      	mov	r0, r5
 800a486:	47b0      	blx	r6
 800a488:	4602      	mov	r2, r0
 800a48a:	1c50      	adds	r0, r2, #1
 800a48c:	d1c9      	bne.n	800a422 <__sflush_r+0x32>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0c6      	beq.n	800a422 <__sflush_r+0x32>
 800a494:	2b1d      	cmp	r3, #29
 800a496:	d001      	beq.n	800a49c <__sflush_r+0xac>
 800a498:	2b16      	cmp	r3, #22
 800a49a:	d11e      	bne.n	800a4da <__sflush_r+0xea>
 800a49c:	602f      	str	r7, [r5, #0]
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e022      	b.n	800a4e8 <__sflush_r+0xf8>
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	e01b      	b.n	800a4e2 <__sflush_r+0xf2>
 800a4aa:	690f      	ldr	r7, [r1, #16]
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	d0f6      	beq.n	800a49e <__sflush_r+0xae>
 800a4b0:	0793      	lsls	r3, r2, #30
 800a4b2:	680e      	ldr	r6, [r1, #0]
 800a4b4:	bf08      	it	eq
 800a4b6:	694b      	ldreq	r3, [r1, #20]
 800a4b8:	600f      	str	r7, [r1, #0]
 800a4ba:	bf18      	it	ne
 800a4bc:	2300      	movne	r3, #0
 800a4be:	eba6 0807 	sub.w	r8, r6, r7
 800a4c2:	608b      	str	r3, [r1, #8]
 800a4c4:	f1b8 0f00 	cmp.w	r8, #0
 800a4c8:	dde9      	ble.n	800a49e <__sflush_r+0xae>
 800a4ca:	6a21      	ldr	r1, [r4, #32]
 800a4cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4ce:	4643      	mov	r3, r8
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b0      	blx	r6
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dc08      	bgt.n	800a4ec <__sflush_r+0xfc>
 800a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	4407      	add	r7, r0
 800a4ee:	eba8 0800 	sub.w	r8, r8, r0
 800a4f2:	e7e7      	b.n	800a4c4 <__sflush_r+0xd4>
 800a4f4:	20400001 	.word	0x20400001

0800a4f8 <_fflush_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	690b      	ldr	r3, [r1, #16]
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	b913      	cbnz	r3, 800a508 <_fflush_r+0x10>
 800a502:	2500      	movs	r5, #0
 800a504:	4628      	mov	r0, r5
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	b118      	cbz	r0, 800a512 <_fflush_r+0x1a>
 800a50a:	6a03      	ldr	r3, [r0, #32]
 800a50c:	b90b      	cbnz	r3, 800a512 <_fflush_r+0x1a>
 800a50e:	f7fe f95b 	bl	80087c8 <__sinit>
 800a512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0f3      	beq.n	800a502 <_fflush_r+0xa>
 800a51a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a51c:	07d0      	lsls	r0, r2, #31
 800a51e:	d404      	bmi.n	800a52a <_fflush_r+0x32>
 800a520:	0599      	lsls	r1, r3, #22
 800a522:	d402      	bmi.n	800a52a <_fflush_r+0x32>
 800a524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a526:	f7fe fb4a 	bl	8008bbe <__retarget_lock_acquire_recursive>
 800a52a:	4628      	mov	r0, r5
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7ff ff5f 	bl	800a3f0 <__sflush_r>
 800a532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a534:	07da      	lsls	r2, r3, #31
 800a536:	4605      	mov	r5, r0
 800a538:	d4e4      	bmi.n	800a504 <_fflush_r+0xc>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	059b      	lsls	r3, r3, #22
 800a53e:	d4e1      	bmi.n	800a504 <_fflush_r+0xc>
 800a540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a542:	f7fe fb3d 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a546:	e7dd      	b.n	800a504 <_fflush_r+0xc>

0800a548 <__swhatbuf_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	460c      	mov	r4, r1
 800a54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a550:	2900      	cmp	r1, #0
 800a552:	b096      	sub	sp, #88	@ 0x58
 800a554:	4615      	mov	r5, r2
 800a556:	461e      	mov	r6, r3
 800a558:	da0d      	bge.n	800a576 <__swhatbuf_r+0x2e>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a560:	f04f 0100 	mov.w	r1, #0
 800a564:	bf14      	ite	ne
 800a566:	2340      	movne	r3, #64	@ 0x40
 800a568:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a56c:	2000      	movs	r0, #0
 800a56e:	6031      	str	r1, [r6, #0]
 800a570:	602b      	str	r3, [r5, #0]
 800a572:	b016      	add	sp, #88	@ 0x58
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	466a      	mov	r2, sp
 800a578:	f000 f848 	bl	800a60c <_fstat_r>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	dbec      	blt.n	800a55a <__swhatbuf_r+0x12>
 800a580:	9901      	ldr	r1, [sp, #4]
 800a582:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a586:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a58a:	4259      	negs	r1, r3
 800a58c:	4159      	adcs	r1, r3
 800a58e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a592:	e7eb      	b.n	800a56c <__swhatbuf_r+0x24>

0800a594 <__smakebuf_r>:
 800a594:	898b      	ldrh	r3, [r1, #12]
 800a596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a598:	079d      	lsls	r5, r3, #30
 800a59a:	4606      	mov	r6, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	d507      	bpl.n	800a5b0 <__smakebuf_r+0x1c>
 800a5a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	6123      	str	r3, [r4, #16]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	6163      	str	r3, [r4, #20]
 800a5ac:	b003      	add	sp, #12
 800a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b0:	ab01      	add	r3, sp, #4
 800a5b2:	466a      	mov	r2, sp
 800a5b4:	f7ff ffc8 	bl	800a548 <__swhatbuf_r>
 800a5b8:	9f00      	ldr	r7, [sp, #0]
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	4639      	mov	r1, r7
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff f9ce 	bl	8009960 <_malloc_r>
 800a5c4:	b948      	cbnz	r0, 800a5da <__smakebuf_r+0x46>
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	059a      	lsls	r2, r3, #22
 800a5cc:	d4ee      	bmi.n	800a5ac <__smakebuf_r+0x18>
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	f043 0302 	orr.w	r3, r3, #2
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	e7e2      	b.n	800a5a0 <__smakebuf_r+0xc>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	6020      	str	r0, [r4, #0]
 800a5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5ea:	b15b      	cbz	r3, 800a604 <__smakebuf_r+0x70>
 800a5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f000 f81d 	bl	800a630 <_isatty_r>
 800a5f6:	b128      	cbz	r0, 800a604 <__smakebuf_r+0x70>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f023 0303 	bic.w	r3, r3, #3
 800a5fe:	f043 0301 	orr.w	r3, r3, #1
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	431d      	orrs	r5, r3
 800a608:	81a5      	strh	r5, [r4, #12]
 800a60a:	e7cf      	b.n	800a5ac <__smakebuf_r+0x18>

0800a60c <_fstat_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	@ (800a62c <_fstat_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f8 fb8b 	bl	8002d34 <_fstat>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_fstat_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_fstat_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	200005c0 	.word	0x200005c0

0800a630 <_isatty_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	@ (800a64c <_isatty_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f8 fb8a 	bl	8002d54 <_isatty>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_isatty_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_isatty_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	200005c0 	.word	0x200005c0

0800a650 <_sbrk_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d06      	ldr	r5, [pc, #24]	@ (800a66c <_sbrk_r+0x1c>)
 800a654:	2300      	movs	r3, #0
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	f7f8 fb92 	bl	8002d84 <_sbrk>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_sbrk_r+0x1a>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_sbrk_r+0x1a>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	200005c0 	.word	0x200005c0

0800a670 <memcpy>:
 800a670:	440a      	add	r2, r1
 800a672:	4291      	cmp	r1, r2
 800a674:	f100 33ff 	add.w	r3, r0, #4294967295
 800a678:	d100      	bne.n	800a67c <memcpy+0xc>
 800a67a:	4770      	bx	lr
 800a67c:	b510      	push	{r4, lr}
 800a67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a686:	4291      	cmp	r1, r2
 800a688:	d1f9      	bne.n	800a67e <memcpy+0xe>
 800a68a:	bd10      	pop	{r4, pc}

0800a68c <__assert_func>:
 800a68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a68e:	4614      	mov	r4, r2
 800a690:	461a      	mov	r2, r3
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <__assert_func+0x2c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4605      	mov	r5, r0
 800a698:	68d8      	ldr	r0, [r3, #12]
 800a69a:	b14c      	cbz	r4, 800a6b0 <__assert_func+0x24>
 800a69c:	4b07      	ldr	r3, [pc, #28]	@ (800a6bc <__assert_func+0x30>)
 800a69e:	9100      	str	r1, [sp, #0]
 800a6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6a4:	4906      	ldr	r1, [pc, #24]	@ (800a6c0 <__assert_func+0x34>)
 800a6a6:	462b      	mov	r3, r5
 800a6a8:	f000 f842 	bl	800a730 <fiprintf>
 800a6ac:	f000 f852 	bl	800a754 <abort>
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <__assert_func+0x38>)
 800a6b2:	461c      	mov	r4, r3
 800a6b4:	e7f3      	b.n	800a69e <__assert_func+0x12>
 800a6b6:	bf00      	nop
 800a6b8:	20000024 	.word	0x20000024
 800a6bc:	0800aedd 	.word	0x0800aedd
 800a6c0:	0800aeea 	.word	0x0800aeea
 800a6c4:	0800af18 	.word	0x0800af18

0800a6c8 <_calloc_r>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	fba1 5402 	umull	r5, r4, r1, r2
 800a6ce:	b934      	cbnz	r4, 800a6de <_calloc_r+0x16>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7ff f945 	bl	8009960 <_malloc_r>
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	b928      	cbnz	r0, 800a6e6 <_calloc_r+0x1e>
 800a6da:	4630      	mov	r0, r6
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	220c      	movs	r2, #12
 800a6e0:	6002      	str	r2, [r0, #0]
 800a6e2:	2600      	movs	r6, #0
 800a6e4:	e7f9      	b.n	800a6da <_calloc_r+0x12>
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f7fe f9eb 	bl	8008ac4 <memset>
 800a6ee:	e7f4      	b.n	800a6da <_calloc_r+0x12>

0800a6f0 <__ascii_mbtowc>:
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	b901      	cbnz	r1, 800a6f6 <__ascii_mbtowc+0x6>
 800a6f4:	a901      	add	r1, sp, #4
 800a6f6:	b142      	cbz	r2, 800a70a <__ascii_mbtowc+0x1a>
 800a6f8:	b14b      	cbz	r3, 800a70e <__ascii_mbtowc+0x1e>
 800a6fa:	7813      	ldrb	r3, [r2, #0]
 800a6fc:	600b      	str	r3, [r1, #0]
 800a6fe:	7812      	ldrb	r2, [r2, #0]
 800a700:	1e10      	subs	r0, r2, #0
 800a702:	bf18      	it	ne
 800a704:	2001      	movne	r0, #1
 800a706:	b002      	add	sp, #8
 800a708:	4770      	bx	lr
 800a70a:	4610      	mov	r0, r2
 800a70c:	e7fb      	b.n	800a706 <__ascii_mbtowc+0x16>
 800a70e:	f06f 0001 	mvn.w	r0, #1
 800a712:	e7f8      	b.n	800a706 <__ascii_mbtowc+0x16>

0800a714 <__ascii_wctomb>:
 800a714:	4603      	mov	r3, r0
 800a716:	4608      	mov	r0, r1
 800a718:	b141      	cbz	r1, 800a72c <__ascii_wctomb+0x18>
 800a71a:	2aff      	cmp	r2, #255	@ 0xff
 800a71c:	d904      	bls.n	800a728 <__ascii_wctomb+0x14>
 800a71e:	228a      	movs	r2, #138	@ 0x8a
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	4770      	bx	lr
 800a728:	700a      	strb	r2, [r1, #0]
 800a72a:	2001      	movs	r0, #1
 800a72c:	4770      	bx	lr
	...

0800a730 <fiprintf>:
 800a730:	b40e      	push	{r1, r2, r3}
 800a732:	b503      	push	{r0, r1, lr}
 800a734:	4601      	mov	r1, r0
 800a736:	ab03      	add	r3, sp, #12
 800a738:	4805      	ldr	r0, [pc, #20]	@ (800a750 <fiprintf+0x20>)
 800a73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73e:	6800      	ldr	r0, [r0, #0]
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	f7ff fd3d 	bl	800a1c0 <_vfiprintf_r>
 800a746:	b002      	add	sp, #8
 800a748:	f85d eb04 	ldr.w	lr, [sp], #4
 800a74c:	b003      	add	sp, #12
 800a74e:	4770      	bx	lr
 800a750:	20000024 	.word	0x20000024

0800a754 <abort>:
 800a754:	b508      	push	{r3, lr}
 800a756:	2006      	movs	r0, #6
 800a758:	f000 f82c 	bl	800a7b4 <raise>
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7f8 fa99 	bl	8002c94 <_exit>

0800a762 <_raise_r>:
 800a762:	291f      	cmp	r1, #31
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4605      	mov	r5, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	d904      	bls.n	800a776 <_raise_r+0x14>
 800a76c:	2316      	movs	r3, #22
 800a76e:	6003      	str	r3, [r0, #0]
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	bd38      	pop	{r3, r4, r5, pc}
 800a776:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a778:	b112      	cbz	r2, 800a780 <_raise_r+0x1e>
 800a77a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a77e:	b94b      	cbnz	r3, 800a794 <_raise_r+0x32>
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f831 	bl	800a7e8 <_getpid_r>
 800a786:	4622      	mov	r2, r4
 800a788:	4601      	mov	r1, r0
 800a78a:	4628      	mov	r0, r5
 800a78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a790:	f000 b818 	b.w	800a7c4 <_kill_r>
 800a794:	2b01      	cmp	r3, #1
 800a796:	d00a      	beq.n	800a7ae <_raise_r+0x4c>
 800a798:	1c59      	adds	r1, r3, #1
 800a79a:	d103      	bne.n	800a7a4 <_raise_r+0x42>
 800a79c:	2316      	movs	r3, #22
 800a79e:	6003      	str	r3, [r0, #0]
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	e7e7      	b.n	800a774 <_raise_r+0x12>
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4798      	blx	r3
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e7e0      	b.n	800a774 <_raise_r+0x12>
	...

0800a7b4 <raise>:
 800a7b4:	4b02      	ldr	r3, [pc, #8]	@ (800a7c0 <raise+0xc>)
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	f7ff bfd2 	b.w	800a762 <_raise_r>
 800a7be:	bf00      	nop
 800a7c0:	20000024 	.word	0x20000024

0800a7c4 <_kill_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d07      	ldr	r5, [pc, #28]	@ (800a7e4 <_kill_r+0x20>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	602b      	str	r3, [r5, #0]
 800a7d2:	f7f8 fa4f 	bl	8002c74 <_kill>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d102      	bne.n	800a7e0 <_kill_r+0x1c>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	b103      	cbz	r3, 800a7e0 <_kill_r+0x1c>
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200005c0 	.word	0x200005c0

0800a7e8 <_getpid_r>:
 800a7e8:	f7f8 ba3c 	b.w	8002c64 <_getpid>

0800a7ec <_init>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	bf00      	nop
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_fini>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr
